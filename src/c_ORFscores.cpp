/* Generated by Cython 0.29.13 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++",
        "name": "c_ORFscores",
        "sources": [
            "c_ORFscores.pyx"
        ]
    },
    "module_name": "c_ORFscores"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_13"
#define CYTHON_HEX_VERSION 0x001D0DF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__c_ORFscores
#define __PYX_HAVE_API__c_ORFscores
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <map>
#include <string.h>
#include <string>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "c_ORFscores.pyx",
  "stringsource",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'c_ORFscores' */
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "c_ORFscores"
extern int __pyx_module_is_main_c_ORFscores;
int __pyx_module_is_main_c_ORFscores = 0;

/* Implementation of 'c_ORFscores' */
static PyObject *__pyx_builtin_xrange;
static const char __pyx_k_[] = "*";
static const char __pyx_k_A[] = "A";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_D[] = "D";
static const char __pyx_k_E[] = "E";
static const char __pyx_k_F[] = "F";
static const char __pyx_k_G[] = "G";
static const char __pyx_k_H[] = "H";
static const char __pyx_k_I[] = "I";
static const char __pyx_k_K[] = "K";
static const char __pyx_k_L[] = "L";
static const char __pyx_k_M[] = "M";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_P[] = "P";
static const char __pyx_k_Q[] = "Q";
static const char __pyx_k_R[] = "R";
static const char __pyx_k_S[] = "S";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_V[] = "V";
static const char __pyx_k_W[] = "W";
static const char __pyx_k_Y[] = "Y";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_AAA[] = "AAA";
static const char __pyx_k_AAC[] = "AAC";
static const char __pyx_k_AAG[] = "AAG";
static const char __pyx_k_AAT[] = "AAT";
static const char __pyx_k_ACA[] = "ACA";
static const char __pyx_k_ACC[] = "ACC";
static const char __pyx_k_ACG[] = "ACG";
static const char __pyx_k_ACT[] = "ACT";
static const char __pyx_k_AGA[] = "AGA";
static const char __pyx_k_AGC[] = "AGC";
static const char __pyx_k_AGG[] = "AGG";
static const char __pyx_k_AGT[] = "AGT";
static const char __pyx_k_ATA[] = "ATA";
static const char __pyx_k_ATC[] = "ATC";
static const char __pyx_k_ATG[] = "ATG";
static const char __pyx_k_ATT[] = "ATT";
static const char __pyx_k_CAA[] = "CAA";
static const char __pyx_k_CAC[] = "CAC";
static const char __pyx_k_CAG[] = "CAG";
static const char __pyx_k_CAT[] = "CAT";
static const char __pyx_k_CCA[] = "CCA";
static const char __pyx_k_CCC[] = "CCC";
static const char __pyx_k_CCG[] = "CCG";
static const char __pyx_k_CCT[] = "CCT";
static const char __pyx_k_CGA[] = "CGA";
static const char __pyx_k_CGC[] = "CGC";
static const char __pyx_k_CGG[] = "CGG";
static const char __pyx_k_CGT[] = "CGT";
static const char __pyx_k_CTA[] = "CTA";
static const char __pyx_k_CTC[] = "CTC";
static const char __pyx_k_CTG[] = "CTG";
static const char __pyx_k_CTT[] = "CTT";
static const char __pyx_k_GAA[] = "GAA";
static const char __pyx_k_GAC[] = "GAC";
static const char __pyx_k_GAG[] = "GAG";
static const char __pyx_k_GAT[] = "GAT";
static const char __pyx_k_GCA[] = "GCA";
static const char __pyx_k_GCC[] = "GCC";
static const char __pyx_k_GCG[] = "GCG";
static const char __pyx_k_GCT[] = "GCT";
static const char __pyx_k_GGA[] = "GGA";
static const char __pyx_k_GGC[] = "GGC";
static const char __pyx_k_GGG[] = "GGG";
static const char __pyx_k_GGT[] = "GGT";
static const char __pyx_k_GTA[] = "GTA";
static const char __pyx_k_GTC[] = "GTC";
static const char __pyx_k_GTG[] = "GTG";
static const char __pyx_k_GTT[] = "GTT";
static const char __pyx_k_TAA[] = "TAA";
static const char __pyx_k_TAC[] = "TAC";
static const char __pyx_k_TAG[] = "TAG";
static const char __pyx_k_TAT[] = "TAT";
static const char __pyx_k_TCA[] = "TCA";
static const char __pyx_k_TCC[] = "TCC";
static const char __pyx_k_TCG[] = "TCG";
static const char __pyx_k_TCT[] = "TCT";
static const char __pyx_k_TGA[] = "TGA";
static const char __pyx_k_TGC[] = "TGC";
static const char __pyx_k_TGG[] = "TGG";
static const char __pyx_k_TGT[] = "TGT";
static const char __pyx_k_TTA[] = "TTA";
static const char __pyx_k_TTC[] = "TTC";
static const char __pyx_k_TTG[] = "TTG";
static const char __pyx_k_TTT[] = "TTT";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_IUPAC[] = "IUPAC";
static const char __pyx_k_alpha[] = "alpha";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_aa_len[] = "aa_len";
static const char __pyx_k_aa_seq[] = "aa_seq";
static const char __pyx_k_author[] = "__author__";
static const char __pyx_k_factor[] = "factor";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_nt_len[] = "nt_len";
static const char __pyx_k_nt_seq[] = "nt_seq";
static const char __pyx_k_pseudo[] = "pseudo";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_aa_seq2[] = "aa_seq2";
static const char __pyx_k_i_range[] = "i_range";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_CodonTable[] = "CodonTable";
static const char __pyx_k_NT_LETTERS[] = "NT_LETTERS";
static const char __pyx_k_amino_freq[] = "amino_freq";
static const char __pyx_k_clear_dict[] = "clear_dict";
static const char __pyx_k_codon_freq[] = "codon_freq";
static const char __pyx_k_amino_count[] = "amino_count";
static const char __pyx_k_amino_total[] = "amino_total";
static const char __pyx_k_c_ORFscores[] = "c_ORFscores";
static const char __pyx_k_codon_count[] = "codon_count";
static const char __pyx_k_codon_total[] = "codon_total";
static const char __pyx_k_Bio_Alphabet[] = "Bio.Alphabet";
static const char __pyx_k_diamino_freq[] = "diamino_freq";
static const char __pyx_k_AMINO_LETTERS[] = "AMINO_LETTERS";
static const char __pyx_k_CDSWindowFeat[] = "CDSWindowFeat";
static const char __pyx_k_CODON_LETTERS[] = "CODON_LETTERS";
static const char __pyx_k_diamino_count[] = "diamino_count";
static const char __pyx_k_diamino_range[] = "diamino_range";
static const char __pyx_k_diamino_total[] = "diamino_total";
static const char __pyx_k_get_amino_freq[] = "get_amino_freq";
static const char __pyx_k_get_codon_freq[] = "get_codon_freq";
static const char __pyx_k_DIAMINO_LETTERS[] = "DIAMINO_LETTERS";
static const char __pyx_k_c_ORFscores_pyx[] = "c_ORFscores.pyx";
static const char __pyx_k_diamino_changed[] = "diamino_changed";
static const char __pyx_k_calc_amino_count[] = "calc_amino_count";
static const char __pyx_k_calc_codon_count[] = "calc_codon_count";
static const char __pyx_k_get_diamino_freq[] = "get_diamino_freq";
static const char __pyx_k_add_diamino_count[] = "add_diamino_count";
static const char __pyx_k_calc_diamino_count[] = "calc_diamino_count";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_Bio_Data_CodonTable[] = "Bio.Data.CodonTable";
static const char __pyx_k_CDSWindowFeat___init[] = "CDSWindowFeat.__init__";
static const char __pyx_k_deduct_diamino_count[] = "deduct_diamino_count";
static const char __pyx_k_CDSWindowFeat_get_amino_freq[] = "CDSWindowFeat.get_amino_freq";
static const char __pyx_k_CDSWindowFeat_get_codon_freq[] = "CDSWindowFeat.get_codon_freq";
static const char __pyx_k_etseng_pacificbiosciences_com[] = "etseng@pacificbiosciences.com";
static const char __pyx_k_CDSWindowFeat_calc_amino_count[] = "CDSWindowFeat.calc_amino_count";
static const char __pyx_k_CDSWindowFeat_calc_codon_count[] = "CDSWindowFeat.calc_codon_count";
static const char __pyx_k_CDSWindowFeat_get_diamino_freq[] = "CDSWindowFeat.get_diamino_freq";
static const char __pyx_k_CDSWindowFeat_add_diamino_count[] = "CDSWindowFeat.add_diamino_count";
static const char __pyx_k_CDSWindowFeat_calc_diamino_count[] = "CDSWindowFeat.calc_diamino_count";
static const char __pyx_k_CDSWindowFeat_deduct_diamino_cou[] = "CDSWindowFeat.deduct_diamino_count";
static PyObject *__pyx_n_s_;
static PyObject *__pyx_kp_b_;
static PyObject *__pyx_n_b_A;
static PyObject *__pyx_n_b_AAA;
static PyObject *__pyx_n_b_AAC;
static PyObject *__pyx_n_b_AAG;
static PyObject *__pyx_n_b_AAT;
static PyObject *__pyx_n_b_ACA;
static PyObject *__pyx_n_b_ACC;
static PyObject *__pyx_n_b_ACG;
static PyObject *__pyx_n_b_ACT;
static PyObject *__pyx_n_b_AGA;
static PyObject *__pyx_n_b_AGC;
static PyObject *__pyx_n_b_AGG;
static PyObject *__pyx_n_b_AGT;
static PyObject *__pyx_n_s_AMINO_LETTERS;
static PyObject *__pyx_n_b_ATA;
static PyObject *__pyx_n_b_ATC;
static PyObject *__pyx_n_b_ATG;
static PyObject *__pyx_n_b_ATT;
static PyObject *__pyx_n_s_Bio_Alphabet;
static PyObject *__pyx_n_s_Bio_Data_CodonTable;
static PyObject *__pyx_n_b_C;
static PyObject *__pyx_n_b_CAA;
static PyObject *__pyx_n_b_CAC;
static PyObject *__pyx_n_b_CAG;
static PyObject *__pyx_n_b_CAT;
static PyObject *__pyx_n_b_CCA;
static PyObject *__pyx_n_b_CCC;
static PyObject *__pyx_n_b_CCG;
static PyObject *__pyx_n_b_CCT;
static PyObject *__pyx_n_s_CDSWindowFeat;
static PyObject *__pyx_n_s_CDSWindowFeat___init;
static PyObject *__pyx_n_s_CDSWindowFeat_add_diamino_count;
static PyObject *__pyx_n_s_CDSWindowFeat_calc_amino_count;
static PyObject *__pyx_n_s_CDSWindowFeat_calc_codon_count;
static PyObject *__pyx_n_s_CDSWindowFeat_calc_diamino_count;
static PyObject *__pyx_n_s_CDSWindowFeat_deduct_diamino_cou;
static PyObject *__pyx_n_s_CDSWindowFeat_get_amino_freq;
static PyObject *__pyx_n_s_CDSWindowFeat_get_codon_freq;
static PyObject *__pyx_n_s_CDSWindowFeat_get_diamino_freq;
static PyObject *__pyx_n_b_CGA;
static PyObject *__pyx_n_b_CGC;
static PyObject *__pyx_n_b_CGG;
static PyObject *__pyx_n_b_CGT;
static PyObject *__pyx_n_s_CODON_LETTERS;
static PyObject *__pyx_n_b_CTA;
static PyObject *__pyx_n_b_CTC;
static PyObject *__pyx_n_b_CTG;
static PyObject *__pyx_n_b_CTT;
static PyObject *__pyx_n_s_CodonTable;
static PyObject *__pyx_n_b_D;
static PyObject *__pyx_n_s_DIAMINO_LETTERS;
static PyObject *__pyx_n_b_E;
static PyObject *__pyx_n_b_F;
static PyObject *__pyx_n_b_G;
static PyObject *__pyx_n_b_GAA;
static PyObject *__pyx_n_b_GAC;
static PyObject *__pyx_n_b_GAG;
static PyObject *__pyx_n_b_GAT;
static PyObject *__pyx_n_b_GCA;
static PyObject *__pyx_n_b_GCC;
static PyObject *__pyx_n_b_GCG;
static PyObject *__pyx_n_b_GCT;
static PyObject *__pyx_n_b_GGA;
static PyObject *__pyx_n_b_GGC;
static PyObject *__pyx_n_b_GGG;
static PyObject *__pyx_n_b_GGT;
static PyObject *__pyx_n_b_GTA;
static PyObject *__pyx_n_b_GTC;
static PyObject *__pyx_n_b_GTG;
static PyObject *__pyx_n_b_GTT;
static PyObject *__pyx_n_b_H;
static PyObject *__pyx_n_b_I;
static PyObject *__pyx_n_s_IUPAC;
static PyObject *__pyx_n_b_K;
static PyObject *__pyx_n_b_L;
static PyObject *__pyx_n_b_M;
static PyObject *__pyx_n_b_N;
static PyObject *__pyx_n_s_NT_LETTERS;
static PyObject *__pyx_n_b_P;
static PyObject *__pyx_n_b_Q;
static PyObject *__pyx_n_b_R;
static PyObject *__pyx_n_b_S;
static PyObject *__pyx_n_b_T;
static PyObject *__pyx_n_b_TAA;
static PyObject *__pyx_n_b_TAC;
static PyObject *__pyx_n_b_TAG;
static PyObject *__pyx_n_b_TAT;
static PyObject *__pyx_n_b_TCA;
static PyObject *__pyx_n_b_TCC;
static PyObject *__pyx_n_b_TCG;
static PyObject *__pyx_n_b_TCT;
static PyObject *__pyx_n_b_TGA;
static PyObject *__pyx_n_b_TGC;
static PyObject *__pyx_n_b_TGG;
static PyObject *__pyx_n_b_TGT;
static PyObject *__pyx_n_b_TTA;
static PyObject *__pyx_n_b_TTC;
static PyObject *__pyx_n_b_TTG;
static PyObject *__pyx_n_b_TTT;
static PyObject *__pyx_n_b_V;
static PyObject *__pyx_n_b_W;
static PyObject *__pyx_n_b_Y;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_aa_len;
static PyObject *__pyx_n_s_aa_seq;
static PyObject *__pyx_n_s_aa_seq2;
static PyObject *__pyx_n_s_add_diamino_count;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_amino_count;
static PyObject *__pyx_n_s_amino_freq;
static PyObject *__pyx_n_s_amino_total;
static PyObject *__pyx_n_s_author;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_c_ORFscores;
static PyObject *__pyx_kp_s_c_ORFscores_pyx;
static PyObject *__pyx_n_s_calc_amino_count;
static PyObject *__pyx_n_s_calc_codon_count;
static PyObject *__pyx_n_s_calc_diamino_count;
static PyObject *__pyx_n_s_clear_dict;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_codon_count;
static PyObject *__pyx_n_s_codon_freq;
static PyObject *__pyx_n_s_codon_total;
static PyObject *__pyx_n_s_deduct_diamino_count;
static PyObject *__pyx_n_s_diamino_changed;
static PyObject *__pyx_n_s_diamino_count;
static PyObject *__pyx_n_s_diamino_freq;
static PyObject *__pyx_n_s_diamino_range;
static PyObject *__pyx_n_s_diamino_total;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_kp_u_etseng_pacificbiosciences_com;
static PyObject *__pyx_n_s_factor;
static PyObject *__pyx_n_s_get_amino_freq;
static PyObject *__pyx_n_s_get_codon_freq;
static PyObject *__pyx_n_s_get_diamino_freq;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_i_range;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_nt_len;
static PyObject *__pyx_n_s_nt_seq;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_pseudo;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat_2calc_amino_count(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, char *__pyx_v_aa_seq, int __pyx_v_factor); /* proto */
static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat_4calc_codon_count(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, char *__pyx_v_nt_seq, int __pyx_v_nt_len, int __pyx_v_factor); /* proto */
static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat_6calc_diamino_count(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, char *__pyx_v_aa_seq, int __pyx_v_aa_len); /* proto */
static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat_8deduct_diamino_count(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, char *__pyx_v_aa_seq, int __pyx_v_aa_len, int __pyx_v_i_range); /* proto */
static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat_10add_diamino_count(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, char *__pyx_v_aa_seq, int __pyx_v_aa_len, int __pyx_v_i_range); /* proto */
static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat_12get_amino_freq(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_pseudo, double __pyx_v_alpha); /* proto */
static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat_14get_codon_freq(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_pseudo, double __pyx_v_alpha); /* proto */
static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat_16get_diamino_freq(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_pseudo, double __pyx_v_alpha, bool __pyx_v_clear_dict); /* proto */
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__97;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__99;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__111;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__129;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__131;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__133;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__135;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__137;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__139;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__141;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__143;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__145;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__147;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__149;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__151;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__153;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__155;
static PyObject *__pyx_tuple__156;
static PyObject *__pyx_tuple__157;
static PyObject *__pyx_tuple__158;
static PyObject *__pyx_tuple__159;
static PyObject *__pyx_tuple__160;
static PyObject *__pyx_tuple__161;
static PyObject *__pyx_tuple__162;
static PyObject *__pyx_tuple__163;
static PyObject *__pyx_tuple__164;
static PyObject *__pyx_tuple__165;
static PyObject *__pyx_tuple__166;
static PyObject *__pyx_tuple__167;
static PyObject *__pyx_tuple__168;
static PyObject *__pyx_tuple__169;
static PyObject *__pyx_tuple__170;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_tuple__172;
static PyObject *__pyx_tuple__173;
static PyObject *__pyx_tuple__174;
static PyObject *__pyx_tuple__175;
static PyObject *__pyx_tuple__176;
static PyObject *__pyx_tuple__177;
static PyObject *__pyx_tuple__178;
static PyObject *__pyx_tuple__179;
static PyObject *__pyx_tuple__180;
static PyObject *__pyx_tuple__181;
static PyObject *__pyx_tuple__182;
static PyObject *__pyx_tuple__183;
static PyObject *__pyx_tuple__184;
static PyObject *__pyx_tuple__185;
static PyObject *__pyx_tuple__186;
static PyObject *__pyx_tuple__187;
static PyObject *__pyx_tuple__188;
static PyObject *__pyx_tuple__189;
static PyObject *__pyx_tuple__190;
static PyObject *__pyx_tuple__191;
static PyObject *__pyx_tuple__192;
static PyObject *__pyx_tuple__193;
static PyObject *__pyx_tuple__194;
static PyObject *__pyx_tuple__195;
static PyObject *__pyx_tuple__196;
static PyObject *__pyx_tuple__197;
static PyObject *__pyx_tuple__198;
static PyObject *__pyx_tuple__199;
static PyObject *__pyx_tuple__200;
static PyObject *__pyx_tuple__201;
static PyObject *__pyx_tuple__202;
static PyObject *__pyx_tuple__203;
static PyObject *__pyx_tuple__204;
static PyObject *__pyx_tuple__205;
static PyObject *__pyx_tuple__206;
static PyObject *__pyx_tuple__207;
static PyObject *__pyx_tuple__208;
static PyObject *__pyx_tuple__209;
static PyObject *__pyx_tuple__210;
static PyObject *__pyx_tuple__211;
static PyObject *__pyx_tuple__212;
static PyObject *__pyx_tuple__213;
static PyObject *__pyx_tuple__214;
static PyObject *__pyx_tuple__215;
static PyObject *__pyx_tuple__216;
static PyObject *__pyx_tuple__217;
static PyObject *__pyx_tuple__218;
static PyObject *__pyx_tuple__219;
static PyObject *__pyx_tuple__220;
static PyObject *__pyx_tuple__221;
static PyObject *__pyx_tuple__222;
static PyObject *__pyx_tuple__223;
static PyObject *__pyx_tuple__224;
static PyObject *__pyx_tuple__225;
static PyObject *__pyx_tuple__226;
static PyObject *__pyx_tuple__227;
static PyObject *__pyx_tuple__228;
static PyObject *__pyx_tuple__229;
static PyObject *__pyx_tuple__230;
static PyObject *__pyx_tuple__231;
static PyObject *__pyx_tuple__232;
static PyObject *__pyx_tuple__233;
static PyObject *__pyx_tuple__234;
static PyObject *__pyx_tuple__235;
static PyObject *__pyx_tuple__236;
static PyObject *__pyx_tuple__237;
static PyObject *__pyx_tuple__238;
static PyObject *__pyx_tuple__239;
static PyObject *__pyx_tuple__240;
static PyObject *__pyx_tuple__241;
static PyObject *__pyx_tuple__242;
static PyObject *__pyx_tuple__243;
static PyObject *__pyx_tuple__244;
static PyObject *__pyx_tuple__245;
static PyObject *__pyx_tuple__246;
static PyObject *__pyx_tuple__247;
static PyObject *__pyx_tuple__248;
static PyObject *__pyx_tuple__249;
static PyObject *__pyx_tuple__250;
static PyObject *__pyx_tuple__251;
static PyObject *__pyx_tuple__252;
static PyObject *__pyx_tuple__253;
static PyObject *__pyx_tuple__254;
static PyObject *__pyx_tuple__255;
static PyObject *__pyx_tuple__256;
static PyObject *__pyx_tuple__257;
static PyObject *__pyx_tuple__258;
static PyObject *__pyx_tuple__259;
static PyObject *__pyx_tuple__260;
static PyObject *__pyx_tuple__261;
static PyObject *__pyx_tuple__262;
static PyObject *__pyx_tuple__263;
static PyObject *__pyx_tuple__264;
static PyObject *__pyx_tuple__265;
static PyObject *__pyx_tuple__266;
static PyObject *__pyx_tuple__267;
static PyObject *__pyx_tuple__268;
static PyObject *__pyx_tuple__269;
static PyObject *__pyx_tuple__270;
static PyObject *__pyx_tuple__271;
static PyObject *__pyx_tuple__272;
static PyObject *__pyx_tuple__273;
static PyObject *__pyx_tuple__274;
static PyObject *__pyx_tuple__275;
static PyObject *__pyx_tuple__276;
static PyObject *__pyx_tuple__277;
static PyObject *__pyx_tuple__278;
static PyObject *__pyx_tuple__279;
static PyObject *__pyx_tuple__280;
static PyObject *__pyx_tuple__281;
static PyObject *__pyx_tuple__282;
static PyObject *__pyx_tuple__283;
static PyObject *__pyx_tuple__284;
static PyObject *__pyx_tuple__285;
static PyObject *__pyx_tuple__286;
static PyObject *__pyx_tuple__287;
static PyObject *__pyx_tuple__288;
static PyObject *__pyx_tuple__289;
static PyObject *__pyx_tuple__290;
static PyObject *__pyx_tuple__291;
static PyObject *__pyx_tuple__292;
static PyObject *__pyx_tuple__293;
static PyObject *__pyx_tuple__294;
static PyObject *__pyx_tuple__295;
static PyObject *__pyx_tuple__296;
static PyObject *__pyx_tuple__297;
static PyObject *__pyx_tuple__298;
static PyObject *__pyx_tuple__299;
static PyObject *__pyx_tuple__300;
static PyObject *__pyx_tuple__301;
static PyObject *__pyx_tuple__302;
static PyObject *__pyx_tuple__303;
static PyObject *__pyx_tuple__304;
static PyObject *__pyx_tuple__305;
static PyObject *__pyx_tuple__306;
static PyObject *__pyx_tuple__307;
static PyObject *__pyx_tuple__308;
static PyObject *__pyx_tuple__309;
static PyObject *__pyx_tuple__310;
static PyObject *__pyx_tuple__311;
static PyObject *__pyx_tuple__312;
static PyObject *__pyx_tuple__313;
static PyObject *__pyx_tuple__314;
static PyObject *__pyx_tuple__315;
static PyObject *__pyx_tuple__316;
static PyObject *__pyx_tuple__317;
static PyObject *__pyx_tuple__318;
static PyObject *__pyx_tuple__319;
static PyObject *__pyx_tuple__320;
static PyObject *__pyx_tuple__321;
static PyObject *__pyx_tuple__322;
static PyObject *__pyx_tuple__323;
static PyObject *__pyx_tuple__324;
static PyObject *__pyx_tuple__325;
static PyObject *__pyx_tuple__326;
static PyObject *__pyx_tuple__327;
static PyObject *__pyx_tuple__328;
static PyObject *__pyx_tuple__329;
static PyObject *__pyx_tuple__330;
static PyObject *__pyx_tuple__331;
static PyObject *__pyx_tuple__332;
static PyObject *__pyx_tuple__333;
static PyObject *__pyx_tuple__334;
static PyObject *__pyx_tuple__335;
static PyObject *__pyx_tuple__336;
static PyObject *__pyx_tuple__337;
static PyObject *__pyx_tuple__338;
static PyObject *__pyx_tuple__339;
static PyObject *__pyx_tuple__340;
static PyObject *__pyx_tuple__341;
static PyObject *__pyx_tuple__342;
static PyObject *__pyx_tuple__343;
static PyObject *__pyx_tuple__344;
static PyObject *__pyx_tuple__345;
static PyObject *__pyx_tuple__346;
static PyObject *__pyx_tuple__347;
static PyObject *__pyx_tuple__348;
static PyObject *__pyx_tuple__349;
static PyObject *__pyx_tuple__350;
static PyObject *__pyx_tuple__351;
static PyObject *__pyx_tuple__352;
static PyObject *__pyx_tuple__353;
static PyObject *__pyx_tuple__354;
static PyObject *__pyx_tuple__355;
static PyObject *__pyx_tuple__356;
static PyObject *__pyx_tuple__357;
static PyObject *__pyx_tuple__358;
static PyObject *__pyx_tuple__359;
static PyObject *__pyx_tuple__360;
static PyObject *__pyx_tuple__361;
static PyObject *__pyx_tuple__362;
static PyObject *__pyx_tuple__363;
static PyObject *__pyx_tuple__364;
static PyObject *__pyx_tuple__365;
static PyObject *__pyx_tuple__366;
static PyObject *__pyx_tuple__367;
static PyObject *__pyx_tuple__368;
static PyObject *__pyx_tuple__369;
static PyObject *__pyx_tuple__370;
static PyObject *__pyx_tuple__371;
static PyObject *__pyx_tuple__372;
static PyObject *__pyx_tuple__373;
static PyObject *__pyx_tuple__374;
static PyObject *__pyx_tuple__375;
static PyObject *__pyx_tuple__376;
static PyObject *__pyx_tuple__377;
static PyObject *__pyx_tuple__378;
static PyObject *__pyx_tuple__379;
static PyObject *__pyx_tuple__380;
static PyObject *__pyx_tuple__381;
static PyObject *__pyx_tuple__382;
static PyObject *__pyx_tuple__383;
static PyObject *__pyx_tuple__384;
static PyObject *__pyx_tuple__385;
static PyObject *__pyx_tuple__386;
static PyObject *__pyx_tuple__387;
static PyObject *__pyx_tuple__388;
static PyObject *__pyx_tuple__389;
static PyObject *__pyx_tuple__390;
static PyObject *__pyx_tuple__391;
static PyObject *__pyx_tuple__392;
static PyObject *__pyx_tuple__393;
static PyObject *__pyx_tuple__394;
static PyObject *__pyx_tuple__395;
static PyObject *__pyx_tuple__396;
static PyObject *__pyx_tuple__397;
static PyObject *__pyx_tuple__398;
static PyObject *__pyx_tuple__399;
static PyObject *__pyx_tuple__400;
static PyObject *__pyx_tuple__401;
static PyObject *__pyx_tuple__402;
static PyObject *__pyx_tuple__403;
static PyObject *__pyx_tuple__404;
static PyObject *__pyx_tuple__405;
static PyObject *__pyx_tuple__406;
static PyObject *__pyx_tuple__407;
static PyObject *__pyx_tuple__408;
static PyObject *__pyx_tuple__409;
static PyObject *__pyx_tuple__410;
static PyObject *__pyx_tuple__411;
static PyObject *__pyx_tuple__412;
static PyObject *__pyx_tuple__413;
static PyObject *__pyx_tuple__414;
static PyObject *__pyx_tuple__415;
static PyObject *__pyx_tuple__416;
static PyObject *__pyx_tuple__417;
static PyObject *__pyx_tuple__418;
static PyObject *__pyx_tuple__419;
static PyObject *__pyx_tuple__420;
static PyObject *__pyx_tuple__421;
static PyObject *__pyx_tuple__422;
static PyObject *__pyx_tuple__423;
static PyObject *__pyx_tuple__424;
static PyObject *__pyx_tuple__425;
static PyObject *__pyx_tuple__426;
static PyObject *__pyx_tuple__427;
static PyObject *__pyx_tuple__428;
static PyObject *__pyx_tuple__429;
static PyObject *__pyx_tuple__430;
static PyObject *__pyx_tuple__431;
static PyObject *__pyx_tuple__432;
static PyObject *__pyx_tuple__433;
static PyObject *__pyx_tuple__434;
static PyObject *__pyx_tuple__435;
static PyObject *__pyx_tuple__436;
static PyObject *__pyx_tuple__437;
static PyObject *__pyx_tuple__438;
static PyObject *__pyx_tuple__439;
static PyObject *__pyx_tuple__440;
static PyObject *__pyx_tuple__441;
static PyObject *__pyx_tuple__442;
static PyObject *__pyx_tuple__443;
static PyObject *__pyx_tuple__445;
static PyObject *__pyx_tuple__447;
static PyObject *__pyx_tuple__449;
static PyObject *__pyx_tuple__451;
static PyObject *__pyx_tuple__453;
static PyObject *__pyx_tuple__455;
static PyObject *__pyx_tuple__457;
static PyObject *__pyx_tuple__459;
static PyObject *__pyx_codeobj__444;
static PyObject *__pyx_codeobj__446;
static PyObject *__pyx_codeobj__448;
static PyObject *__pyx_codeobj__450;
static PyObject *__pyx_codeobj__452;
static PyObject *__pyx_codeobj__454;
static PyObject *__pyx_codeobj__456;
static PyObject *__pyx_codeobj__458;
static PyObject *__pyx_codeobj__460;
/* Late includes */

/* "c_ORFscores.pyx":24
 * 
 * class CDSWindowFeat:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Input filename: should be a fasta filename containing just CDS sequences (in-frame)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_1__init__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_11c_ORFscores_13CDSWindowFeat___init__[] = "\n        Input filename: should be a fasta filename containing just CDS sequences (in-frame)\n        ";
static PyMethodDef __pyx_mdef_11c_ORFscores_13CDSWindowFeat_1__init__ = {"__init__", (PyCFunction)__pyx_pw_11c_ORFscores_13CDSWindowFeat_1__init__, METH_O, __pyx_doc_11c_ORFscores_13CDSWindowFeat___init__};
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_1__init__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11c_ORFscores_13CDSWindowFeat___init__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  std::string __pyx_v_x;
  std::string __pyx_v_y;
  int __pyx_v_k;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  std::string __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  std::string __pyx_t_14;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "c_ORFscores.pyx":34
 *         cdef int k
 * 
 *         self.diamino_range = [1,2,3,4] # parameter k             # <<<<<<<<<<<<<<
 *         self.amino_total = 0
 *         self.amino_count = {}
 */
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_1);
  __Pyx_INCREF(__pyx_int_2);
  __Pyx_GIVEREF(__pyx_int_2);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_2);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_3);
  __Pyx_INCREF(__pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_int_4);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_diamino_range, __pyx_t_1) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_ORFscores.pyx":35
 * 
 *         self.diamino_range = [1,2,3,4] # parameter k
 *         self.amino_total = 0             # <<<<<<<<<<<<<<
 *         self.amino_count = {}
 *         # init amino count
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_amino_total, __pyx_int_0) < 0) __PYX_ERR(0, 35, __pyx_L1_error)

  /* "c_ORFscores.pyx":36
 *         self.diamino_range = [1,2,3,4] # parameter k
 *         self.amino_total = 0
 *         self.amino_count = {}             # <<<<<<<<<<<<<<
 *         # init amino count
 *         for x in AMINO_LETTERS:
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_amino_count, __pyx_t_1) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_ORFscores.pyx":38
 *         self.amino_count = {}
 *         # init amino count
 *         for x in AMINO_LETTERS:             # <<<<<<<<<<<<<<
 *             self.amino_count[x] = 0
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_AMINO_LETTERS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 38, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 38, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 38, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 38, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_x = __pyx_t_5;

    /* "c_ORFscores.pyx":39
 *         # init amino count
 *         for x in AMINO_LETTERS:
 *             self.amino_count[x] = 0             # <<<<<<<<<<<<<<
 * 
 *         self.codon_total = 0
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_amino_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_t_6, __pyx_int_0) < 0)) __PYX_ERR(0, 39, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "c_ORFscores.pyx":38
 *         self.amino_count = {}
 *         # init amino count
 *         for x in AMINO_LETTERS:             # <<<<<<<<<<<<<<
 *             self.amino_count[x] = 0
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_ORFscores.pyx":41
 *             self.amino_count[x] = 0
 * 
 *         self.codon_total = 0             # <<<<<<<<<<<<<<
 *         self.codon_count = {}
 *         for y in CODON_LETTERS:
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_codon_total, __pyx_int_0) < 0) __PYX_ERR(0, 41, __pyx_L1_error)

  /* "c_ORFscores.pyx":42
 * 
 *         self.codon_total = 0
 *         self.codon_count = {}             # <<<<<<<<<<<<<<
 *         for y in CODON_LETTERS:
 *             self.codon_count[y] = 0
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_codon_count, __pyx_t_2) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_ORFscores.pyx":43
 *         self.codon_total = 0
 *         self.codon_count = {}
 *         for y in CODON_LETTERS:             # <<<<<<<<<<<<<<
 *             self.codon_count[y] = 0
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_CODON_LETTERS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_6 = __pyx_t_2; __Pyx_INCREF(__pyx_t_6); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 43, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 43, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 43, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_6);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 43, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_y = __pyx_t_5;

    /* "c_ORFscores.pyx":44
 *         self.codon_count = {}
 *         for y in CODON_LETTERS:
 *             self.codon_count[y] = 0             # <<<<<<<<<<<<<<
 * 
 *         self.diamino_count = {} # dict of k --> (A_i, B_j) --> count
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_codon_count); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_t_1, __pyx_int_0) < 0)) __PYX_ERR(0, 44, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "c_ORFscores.pyx":43
 *         self.codon_total = 0
 *         self.codon_count = {}
 *         for y in CODON_LETTERS:             # <<<<<<<<<<<<<<
 *             self.codon_count[y] = 0
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "c_ORFscores.pyx":46
 *             self.codon_count[y] = 0
 * 
 *         self.diamino_count = {} # dict of k --> (A_i, B_j) --> count             # <<<<<<<<<<<<<<
 *         self.diamino_total = {}
 *         for k in self.diamino_range:
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_diamino_count, __pyx_t_6) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "c_ORFscores.pyx":47
 * 
 *         self.diamino_count = {} # dict of k --> (A_i, B_j) --> count
 *         self.diamino_total = {}             # <<<<<<<<<<<<<<
 *         for k in self.diamino_range:
 *             self.diamino_total[k] = 0
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_diamino_total, __pyx_t_6) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "c_ORFscores.pyx":48
 *         self.diamino_count = {} # dict of k --> (A_i, B_j) --> count
 *         self.diamino_total = {}
 *         for k in self.diamino_range:             # <<<<<<<<<<<<<<
 *             self.diamino_total[k] = 0
 *             self.diamino_count[k] = {}
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_range); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
    __pyx_t_1 = __pyx_t_6; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 48, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 48, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 48, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 48, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 48, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 48, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_k = __pyx_t_7;

    /* "c_ORFscores.pyx":49
 *         self.diamino_total = {}
 *         for k in self.diamino_range:
 *             self.diamino_total[k] = 0             # <<<<<<<<<<<<<<
 *             self.diamino_count[k] = {}
 *             for x, y in DIAMINO_LETTERS:
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_total); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_SetItemInt(__pyx_t_6, __pyx_v_k, __pyx_int_0, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "c_ORFscores.pyx":50
 *         for k in self.diamino_range:
 *             self.diamino_total[k] = 0
 *             self.diamino_count[k] = {}             # <<<<<<<<<<<<<<
 *             for x, y in DIAMINO_LETTERS:
 *                 self.diamino_count[k][(x, y)] = 0
 */
    __pyx_t_6 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_count); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_SetItemInt(__pyx_t_2, __pyx_v_k, __pyx_t_6, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "c_ORFscores.pyx":51
 *             self.diamino_total[k] = 0
 *             self.diamino_count[k] = {}
 *             for x, y in DIAMINO_LETTERS:             # <<<<<<<<<<<<<<
 *                 self.diamino_count[k][(x, y)] = 0
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_DIAMINO_LETTERS); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_2 = __pyx_t_6; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 51, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_6); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 51, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 51, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_6); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 51, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 51, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_9(__pyx_t_2);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 51, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_6))) || (PyList_CheckExact(__pyx_t_6))) {
        PyObject* sequence = __pyx_t_6;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 51, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        #else
        __pyx_t_10 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_12 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_13 = Py_TYPE(__pyx_t_12)->tp_iternext;
        index = 0; __pyx_t_10 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_10)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_10);
        index = 1; __pyx_t_11 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_11)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_12), 2) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
        __pyx_t_13 = NULL;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L12_unpacking_done;
        __pyx_L11_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 51, __pyx_L1_error)
        __pyx_L12_unpacking_done:;
      }
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_10); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 51, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_14 = __pyx_convert_string_from_py_std__in_string(__pyx_t_11); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 51, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_v_x = __pyx_t_5;
      __pyx_v_y = __pyx_t_14;

      /* "c_ORFscores.pyx":52
 *             self.diamino_count[k] = {}
 *             for x, y in DIAMINO_LETTERS:
 *                 self.diamino_count[k][(x, y)] = 0             # <<<<<<<<<<<<<<
 * 
 *         self.amino_freq = {}
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_count); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_6, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_y); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_10);
      __pyx_t_6 = 0;
      __pyx_t_10 = 0;
      if (unlikely(PyObject_SetItem(__pyx_t_11, __pyx_t_12, __pyx_int_0) < 0)) __PYX_ERR(0, 52, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "c_ORFscores.pyx":51
 *             self.diamino_total[k] = 0
 *             self.diamino_count[k] = {}
 *             for x, y in DIAMINO_LETTERS:             # <<<<<<<<<<<<<<
 *                 self.diamino_count[k][(x, y)] = 0
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "c_ORFscores.pyx":48
 *         self.diamino_count = {} # dict of k --> (A_i, B_j) --> count
 *         self.diamino_total = {}
 *         for k in self.diamino_range:             # <<<<<<<<<<<<<<
 *             self.diamino_total[k] = 0
 *             self.diamino_count[k] = {}
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_ORFscores.pyx":54
 *                 self.diamino_count[k][(x, y)] = 0
 * 
 *         self.amino_freq = {}             # <<<<<<<<<<<<<<
 *         self.codon_freq = {}
 *         self.diamino_freq = {}
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_amino_freq, __pyx_t_1) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_ORFscores.pyx":55
 * 
 *         self.amino_freq = {}
 *         self.codon_freq = {}             # <<<<<<<<<<<<<<
 *         self.diamino_freq = {}
 *         self.diamino_changed = {} # (k, x, y)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_codon_freq, __pyx_t_1) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_ORFscores.pyx":56
 *         self.amino_freq = {}
 *         self.codon_freq = {}
 *         self.diamino_freq = {}             # <<<<<<<<<<<<<<
 *         self.diamino_changed = {} # (k, x, y)
 * #
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_diamino_freq, __pyx_t_1) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_ORFscores.pyx":57
 *         self.codon_freq = {}
 *         self.diamino_freq = {}
 *         self.diamino_changed = {} # (k, x, y)             # <<<<<<<<<<<<<<
 * #
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_diamino_changed, __pyx_t_1) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_ORFscores.pyx":24
 * 
 * class CDSWindowFeat:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Input filename: should be a fasta filename containing just CDS sequences (in-frame)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("c_ORFscores.CDSWindowFeat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_ORFscores.pyx":80
 * 
 * 
 *     def calc_amino_count(self, char* aa_seq, int factor=1):             # <<<<<<<<<<<<<<
 *         cdef bytes x
 *         cdef bytes aa_seq2 = aa_seq
 */

/* Python wrapper */
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_3calc_amino_count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11c_ORFscores_13CDSWindowFeat_3calc_amino_count = {"calc_amino_count", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11c_ORFscores_13CDSWindowFeat_3calc_amino_count, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_3calc_amino_count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  char *__pyx_v_aa_seq;
  int __pyx_v_factor;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calc_amino_count (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_aa_seq,&__pyx_n_s_factor,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aa_seq)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calc_amino_count", 0, 2, 3, 1); __PYX_ERR(0, 80, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_factor);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calc_amino_count") < 0)) __PYX_ERR(0, 80, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_aa_seq = __Pyx_PyObject_AsWritableString(values[1]); if (unlikely((!__pyx_v_aa_seq) && PyErr_Occurred())) __PYX_ERR(0, 80, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_factor = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_factor == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 80, __pyx_L3_error)
    } else {
      __pyx_v_factor = ((int)((int)1));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calc_amino_count", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 80, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_ORFscores.CDSWindowFeat.calc_amino_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11c_ORFscores_13CDSWindowFeat_2calc_amino_count(__pyx_self, __pyx_v_self, __pyx_v_aa_seq, __pyx_v_factor);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat_2calc_amino_count(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, char *__pyx_v_aa_seq, int __pyx_v_factor) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_aa_seq2 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  char *__pyx_t_4;
  char *__pyx_t_5;
  char *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("calc_amino_count", 0);

  /* "c_ORFscores.pyx":82
 *     def calc_amino_count(self, char* aa_seq, int factor=1):
 *         cdef bytes x
 *         cdef bytes aa_seq2 = aa_seq             # <<<<<<<<<<<<<<
 *         for x in aa_seq2:
 *             self.amino_count[x] += 1 * factor
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_aa_seq); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_aa_seq2 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "c_ORFscores.pyx":83
 *         cdef bytes x
 *         cdef bytes aa_seq2 = aa_seq
 *         for x in aa_seq2:             # <<<<<<<<<<<<<<
 *             self.amino_count[x] += 1 * factor
 *             self.amino_total += 1 * factor
 */
  __Pyx_INCREF(__pyx_v_aa_seq2);
  __pyx_t_2 = __pyx_v_aa_seq2;
  __pyx_t_4 = PyBytes_AS_STRING(__pyx_t_2);
  __pyx_t_5 = (__pyx_t_4 + PyBytes_GET_SIZE(__pyx_t_2));
  for (__pyx_t_6 = __pyx_t_4; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_3 = __pyx_t_6;
    __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_t_3 + 0, 1 - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_x, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "c_ORFscores.pyx":84
 *         cdef bytes aa_seq2 = aa_seq
 *         for x in aa_seq2:
 *             self.amino_count[x] += 1 * factor             # <<<<<<<<<<<<<<
 *             self.amino_total += 1 * factor
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_amino_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_x);
    __pyx_t_7 = __pyx_v_x;
    __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyInt_From_long((1 * __pyx_v_factor)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = PyNumber_InPlaceAdd(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_t_7, __pyx_t_10) < 0)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "c_ORFscores.pyx":85
 *         for x in aa_seq2:
 *             self.amino_count[x] += 1 * factor
 *             self.amino_total += 1 * factor             # <<<<<<<<<<<<<<
 * 
 *     def calc_codon_count(self, char* nt_seq, int nt_len, int factor=1):
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_amino_total); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyInt_From_long((1 * __pyx_v_factor)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = PyNumber_InPlaceAdd(__pyx_t_1, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_amino_total, __pyx_t_9) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_ORFscores.pyx":80
 * 
 * 
 *     def calc_amino_count(self, char* aa_seq, int factor=1):             # <<<<<<<<<<<<<<
 *         cdef bytes x
 *         cdef bytes aa_seq2 = aa_seq
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("c_ORFscores.CDSWindowFeat.calc_amino_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_aa_seq2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_ORFscores.pyx":87
 *             self.amino_total += 1 * factor
 * 
 *     def calc_codon_count(self, char* nt_seq, int nt_len, int factor=1):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in xrange(0, nt_len-2, 3):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_5calc_codon_count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11c_ORFscores_13CDSWindowFeat_5calc_codon_count = {"calc_codon_count", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11c_ORFscores_13CDSWindowFeat_5calc_codon_count, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_5calc_codon_count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  char *__pyx_v_nt_seq;
  int __pyx_v_nt_len;
  int __pyx_v_factor;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calc_codon_count (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_nt_seq,&__pyx_n_s_nt_len,&__pyx_n_s_factor,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nt_seq)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calc_codon_count", 0, 3, 4, 1); __PYX_ERR(0, 87, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nt_len)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calc_codon_count", 0, 3, 4, 2); __PYX_ERR(0, 87, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_factor);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calc_codon_count") < 0)) __PYX_ERR(0, 87, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_nt_seq = __Pyx_PyObject_AsWritableString(values[1]); if (unlikely((!__pyx_v_nt_seq) && PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L3_error)
    __pyx_v_nt_len = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nt_len == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_factor = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_factor == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L3_error)
    } else {
      __pyx_v_factor = ((int)((int)1));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calc_codon_count", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 87, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_ORFscores.CDSWindowFeat.calc_codon_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11c_ORFscores_13CDSWindowFeat_4calc_codon_count(__pyx_self, __pyx_v_self, __pyx_v_nt_seq, __pyx_v_nt_len, __pyx_v_factor);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat_4calc_codon_count(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, char *__pyx_v_nt_seq, int __pyx_v_nt_len, int __pyx_v_factor) {
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  long __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("calc_codon_count", 0);

  /* "c_ORFscores.pyx":89
 *     def calc_codon_count(self, char* nt_seq, int nt_len, int factor=1):
 *         cdef int i
 *         for i in xrange(0, nt_len-2, 3):             # <<<<<<<<<<<<<<
 *             self.codon_count[nt_seq[i:i+3]] += 1 * factor
 *             self.codon_total += 1 * factor
 */
  __pyx_t_1 = (__pyx_v_nt_len - 2);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=3) {
    __pyx_v_i = __pyx_t_3;

    /* "c_ORFscores.pyx":90
 *         cdef int i
 *         for i in xrange(0, nt_len-2, 3):
 *             self.codon_count[nt_seq[i:i+3]] += 1 * factor             # <<<<<<<<<<<<<<
 *             self.codon_total += 1 * factor
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_codon_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_nt_seq + __pyx_v_i, (__pyx_v_i + 3) - __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyInt_From_long((1 * __pyx_v_factor)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(PyObject_SetItem(__pyx_t_4, __pyx_t_5, __pyx_t_8) < 0)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "c_ORFscores.pyx":91
 *         for i in xrange(0, nt_len-2, 3):
 *             self.codon_count[nt_seq[i:i+3]] += 1 * factor
 *             self.codon_total += 1 * factor             # <<<<<<<<<<<<<<
 * 
 *     def calc_diamino_count(self, char* aa_seq, int aa_len):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_codon_total); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_long((1 * __pyx_v_factor)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_codon_total, __pyx_t_8) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }

  /* "c_ORFscores.pyx":87
 *             self.amino_total += 1 * factor
 * 
 *     def calc_codon_count(self, char* nt_seq, int nt_len, int factor=1):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in xrange(0, nt_len-2, 3):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("c_ORFscores.CDSWindowFeat.calc_codon_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_ORFscores.pyx":93
 *             self.codon_total += 1 * factor
 * 
 *     def calc_diamino_count(self, char* aa_seq, int aa_len):             # <<<<<<<<<<<<<<
 *         cdef int i, k
 *         cdef bytes x, y
 */

/* Python wrapper */
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_7calc_diamino_count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11c_ORFscores_13CDSWindowFeat_7calc_diamino_count = {"calc_diamino_count", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11c_ORFscores_13CDSWindowFeat_7calc_diamino_count, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_7calc_diamino_count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  char *__pyx_v_aa_seq;
  int __pyx_v_aa_len;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calc_diamino_count (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_aa_seq,&__pyx_n_s_aa_len,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aa_seq)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calc_diamino_count", 1, 3, 3, 1); __PYX_ERR(0, 93, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aa_len)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("calc_diamino_count", 1, 3, 3, 2); __PYX_ERR(0, 93, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calc_diamino_count") < 0)) __PYX_ERR(0, 93, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_aa_seq = __Pyx_PyObject_AsWritableString(values[1]); if (unlikely((!__pyx_v_aa_seq) && PyErr_Occurred())) __PYX_ERR(0, 93, __pyx_L3_error)
    __pyx_v_aa_len = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_aa_len == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 93, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calc_diamino_count", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 93, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_ORFscores.CDSWindowFeat.calc_diamino_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11c_ORFscores_13CDSWindowFeat_6calc_diamino_count(__pyx_self, __pyx_v_self, __pyx_v_aa_seq, __pyx_v_aa_len);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat_6calc_diamino_count(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, char *__pyx_v_aa_seq, int __pyx_v_aa_len) {
  int __pyx_v_i;
  int __pyx_v_k;
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  long __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_t_9;
  char __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("calc_diamino_count", 0);

  /* "c_ORFscores.pyx":96
 *         cdef int i, k
 *         cdef bytes x, y
 *         for i in xrange(aa_len-1):             # <<<<<<<<<<<<<<
 *             for k in self.diamino_range:
 *                 if i + k < aa_len:
 */
  __pyx_t_1 = (__pyx_v_aa_len - 1);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "c_ORFscores.pyx":97
 *         cdef bytes x, y
 *         for i in xrange(aa_len-1):
 *             for k in self.diamino_range:             # <<<<<<<<<<<<<<
 *                 if i + k < aa_len:
 *                     x = aa_seq[i]
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_range); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 97, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 97, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 97, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 97, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 97, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 97, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 97, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_k = __pyx_t_8;

      /* "c_ORFscores.pyx":98
 *         for i in xrange(aa_len-1):
 *             for k in self.diamino_range:
 *                 if i + k < aa_len:             # <<<<<<<<<<<<<<
 *                     x = aa_seq[i]
 *                     y = aa_seq[i+k]
 */
      __pyx_t_9 = (((__pyx_v_i + __pyx_v_k) < __pyx_v_aa_len) != 0);
      if (__pyx_t_9) {

        /* "c_ORFscores.pyx":99
 *             for k in self.diamino_range:
 *                 if i + k < aa_len:
 *                     x = aa_seq[i]             # <<<<<<<<<<<<<<
 *                     y = aa_seq[i+k]
 *                     self.diamino_count[k][(x,y)] += 1
 */
        __pyx_t_4 = PyBytes_FromStringAndSize(&(__pyx_v_aa_seq[__pyx_v_i]), 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 99, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_XDECREF_SET(__pyx_v_x, ((PyObject*)__pyx_t_4));
        __pyx_t_4 = 0;

        /* "c_ORFscores.pyx":100
 *                 if i + k < aa_len:
 *                     x = aa_seq[i]
 *                     y = aa_seq[i+k]             # <<<<<<<<<<<<<<
 *                     self.diamino_count[k][(x,y)] += 1
 *                     self.diamino_total[k] += 1
 */
        __pyx_t_10 = (__pyx_v_aa_seq[(__pyx_v_i + __pyx_v_k)]);
        __pyx_t_4 = PyBytes_FromStringAndSize(&__pyx_t_10, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_XDECREF_SET(__pyx_v_y, ((PyObject*)__pyx_t_4));
        __pyx_t_4 = 0;

        /* "c_ORFscores.pyx":101
 *                     x = aa_seq[i]
 *                     y = aa_seq[i+k]
 *                     self.diamino_count[k][(x,y)] += 1             # <<<<<<<<<<<<<<
 *                     self.diamino_total[k] += 1
 * 
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 101, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 101, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 101, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v_x);
        __Pyx_GIVEREF(__pyx_v_x);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_x);
        __Pyx_INCREF(__pyx_v_y);
        __Pyx_GIVEREF(__pyx_v_y);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_y);
        __pyx_t_12 = __Pyx_PyObject_GetItem(__pyx_t_11, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 101, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = __Pyx_PyInt_AddObjC(__pyx_t_12, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 101, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(PyObject_SetItem(__pyx_t_11, __pyx_t_4, __pyx_t_13) < 0)) __PYX_ERR(0, 101, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "c_ORFscores.pyx":102
 *                     y = aa_seq[i+k]
 *                     self.diamino_count[k][(x,y)] += 1
 *                     self.diamino_total[k] += 1             # <<<<<<<<<<<<<<
 * 
 *     def deduct_diamino_count(self, char* aa_seq, int aa_len, int i_range):
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_total); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 102, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_8 = __pyx_v_k;
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_11, __pyx_t_8, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 102, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_13 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 102, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(__Pyx_SetItemInt(__pyx_t_11, __pyx_t_8, __pyx_t_13, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 102, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "c_ORFscores.pyx":98
 *         for i in xrange(aa_len-1):
 *             for k in self.diamino_range:
 *                 if i + k < aa_len:             # <<<<<<<<<<<<<<
 *                     x = aa_seq[i]
 *                     y = aa_seq[i+k]
 */
      }

      /* "c_ORFscores.pyx":97
 *         cdef bytes x, y
 *         for i in xrange(aa_len-1):
 *             for k in self.diamino_range:             # <<<<<<<<<<<<<<
 *                 if i + k < aa_len:
 *                     x = aa_seq[i]
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "c_ORFscores.pyx":93
 *             self.codon_total += 1 * factor
 * 
 *     def calc_diamino_count(self, char* aa_seq, int aa_len):             # <<<<<<<<<<<<<<
 *         cdef int i, k
 *         cdef bytes x, y
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("c_ORFscores.CDSWindowFeat.calc_diamino_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_ORFscores.pyx":104
 *                     self.diamino_total[k] += 1
 * 
 *     def deduct_diamino_count(self, char* aa_seq, int aa_len, int i_range):             # <<<<<<<<<<<<<<
 *         cdef int i, k
 *         cdef bytes x, y
 */

/* Python wrapper */
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_9deduct_diamino_count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11c_ORFscores_13CDSWindowFeat_9deduct_diamino_count = {"deduct_diamino_count", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11c_ORFscores_13CDSWindowFeat_9deduct_diamino_count, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_9deduct_diamino_count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  char *__pyx_v_aa_seq;
  int __pyx_v_aa_len;
  int __pyx_v_i_range;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deduct_diamino_count (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_aa_seq,&__pyx_n_s_aa_len,&__pyx_n_s_i_range,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aa_seq)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("deduct_diamino_count", 1, 4, 4, 1); __PYX_ERR(0, 104, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aa_len)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("deduct_diamino_count", 1, 4, 4, 2); __PYX_ERR(0, 104, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("deduct_diamino_count", 1, 4, 4, 3); __PYX_ERR(0, 104, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "deduct_diamino_count") < 0)) __PYX_ERR(0, 104, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_aa_seq = __Pyx_PyObject_AsWritableString(values[1]); if (unlikely((!__pyx_v_aa_seq) && PyErr_Occurred())) __PYX_ERR(0, 104, __pyx_L3_error)
    __pyx_v_aa_len = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_aa_len == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 104, __pyx_L3_error)
    __pyx_v_i_range = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_i_range == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 104, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("deduct_diamino_count", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 104, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_ORFscores.CDSWindowFeat.deduct_diamino_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11c_ORFscores_13CDSWindowFeat_8deduct_diamino_count(__pyx_self, __pyx_v_self, __pyx_v_aa_seq, __pyx_v_aa_len, __pyx_v_i_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat_8deduct_diamino_count(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, char *__pyx_v_aa_seq, int __pyx_v_aa_len, int __pyx_v_i_range) {
  int __pyx_v_i;
  int __pyx_v_k;
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_t_9;
  char __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("deduct_diamino_count", 0);

  /* "c_ORFscores.pyx":107
 *         cdef int i, k
 *         cdef bytes x, y
 *         for i in xrange(i_range):             # <<<<<<<<<<<<<<
 *             for k in self.diamino_range:
 *                 if i + k < aa_len:
 */
  __pyx_t_1 = __pyx_v_i_range;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "c_ORFscores.pyx":108
 *         cdef bytes x, y
 *         for i in xrange(i_range):
 *             for k in self.diamino_range:             # <<<<<<<<<<<<<<
 *                 if i + k < aa_len:
 *                     x = aa_seq[i]
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_range); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 108, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 108, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 108, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 108, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 108, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 108, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 108, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 108, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_k = __pyx_t_8;

      /* "c_ORFscores.pyx":109
 *         for i in xrange(i_range):
 *             for k in self.diamino_range:
 *                 if i + k < aa_len:             # <<<<<<<<<<<<<<
 *                     x = aa_seq[i]
 *                     y = aa_seq[i+k]
 */
      __pyx_t_9 = (((__pyx_v_i + __pyx_v_k) < __pyx_v_aa_len) != 0);
      if (__pyx_t_9) {

        /* "c_ORFscores.pyx":110
 *             for k in self.diamino_range:
 *                 if i + k < aa_len:
 *                     x = aa_seq[i]             # <<<<<<<<<<<<<<
 *                     y = aa_seq[i+k]
 *                     self.diamino_count[k][(x, y)] -= 1
 */
        __pyx_t_4 = PyBytes_FromStringAndSize(&(__pyx_v_aa_seq[__pyx_v_i]), 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 110, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_XDECREF_SET(__pyx_v_x, ((PyObject*)__pyx_t_4));
        __pyx_t_4 = 0;

        /* "c_ORFscores.pyx":111
 *                 if i + k < aa_len:
 *                     x = aa_seq[i]
 *                     y = aa_seq[i+k]             # <<<<<<<<<<<<<<
 *                     self.diamino_count[k][(x, y)] -= 1
 *                     self.diamino_total[k] -= 1
 */
        __pyx_t_10 = (__pyx_v_aa_seq[(__pyx_v_i + __pyx_v_k)]);
        __pyx_t_4 = PyBytes_FromStringAndSize(&__pyx_t_10, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 111, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_XDECREF_SET(__pyx_v_y, ((PyObject*)__pyx_t_4));
        __pyx_t_4 = 0;

        /* "c_ORFscores.pyx":112
 *                     x = aa_seq[i]
 *                     y = aa_seq[i+k]
 *                     self.diamino_count[k][(x, y)] -= 1             # <<<<<<<<<<<<<<
 *                     self.diamino_total[k] -= 1
 *                     self.diamino_changed[(k, x, y)] = 1
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v_x);
        __Pyx_GIVEREF(__pyx_v_x);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_x);
        __Pyx_INCREF(__pyx_v_y);
        __Pyx_GIVEREF(__pyx_v_y);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_y);
        __pyx_t_12 = __Pyx_PyObject_GetItem(__pyx_t_11, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = __Pyx_PyInt_SubtractObjC(__pyx_t_12, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(PyObject_SetItem(__pyx_t_11, __pyx_t_4, __pyx_t_13) < 0)) __PYX_ERR(0, 112, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "c_ORFscores.pyx":113
 *                     y = aa_seq[i+k]
 *                     self.diamino_count[k][(x, y)] -= 1
 *                     self.diamino_total[k] -= 1             # <<<<<<<<<<<<<<
 *                     self.diamino_changed[(k, x, y)] = 1
 * 
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_total); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 113, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_8 = __pyx_v_k;
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_11, __pyx_t_8, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_13 = __Pyx_PyInt_SubtractObjC(__pyx_t_4, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 113, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(__Pyx_SetItemInt(__pyx_t_11, __pyx_t_8, __pyx_t_13, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 113, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "c_ORFscores.pyx":114
 *                     self.diamino_count[k][(x, y)] -= 1
 *                     self.diamino_total[k] -= 1
 *                     self.diamino_changed[(k, x, y)] = 1             # <<<<<<<<<<<<<<
 * 
 *     def add_diamino_count(self, char* aa_seq, int aa_len, int i_range):
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_changed); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_13);
        __Pyx_INCREF(__pyx_v_x);
        __Pyx_GIVEREF(__pyx_v_x);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_x);
        __Pyx_INCREF(__pyx_v_y);
        __Pyx_GIVEREF(__pyx_v_y);
        PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_y);
        __pyx_t_13 = 0;
        if (unlikely(PyObject_SetItem(__pyx_t_11, __pyx_t_4, __pyx_int_1) < 0)) __PYX_ERR(0, 114, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "c_ORFscores.pyx":109
 *         for i in xrange(i_range):
 *             for k in self.diamino_range:
 *                 if i + k < aa_len:             # <<<<<<<<<<<<<<
 *                     x = aa_seq[i]
 *                     y = aa_seq[i+k]
 */
      }

      /* "c_ORFscores.pyx":108
 *         cdef bytes x, y
 *         for i in xrange(i_range):
 *             for k in self.diamino_range:             # <<<<<<<<<<<<<<
 *                 if i + k < aa_len:
 *                     x = aa_seq[i]
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "c_ORFscores.pyx":104
 *                     self.diamino_total[k] += 1
 * 
 *     def deduct_diamino_count(self, char* aa_seq, int aa_len, int i_range):             # <<<<<<<<<<<<<<
 *         cdef int i, k
 *         cdef bytes x, y
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("c_ORFscores.CDSWindowFeat.deduct_diamino_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_ORFscores.pyx":116
 *                     self.diamino_changed[(k, x, y)] = 1
 * 
 *     def add_diamino_count(self, char* aa_seq, int aa_len, int i_range):             # <<<<<<<<<<<<<<
 *         cdef int i, k
 *         cdef bytes x, y
 */

/* Python wrapper */
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_11add_diamino_count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11c_ORFscores_13CDSWindowFeat_11add_diamino_count = {"add_diamino_count", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11c_ORFscores_13CDSWindowFeat_11add_diamino_count, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_11add_diamino_count(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  char *__pyx_v_aa_seq;
  int __pyx_v_aa_len;
  int __pyx_v_i_range;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_diamino_count (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_aa_seq,&__pyx_n_s_aa_len,&__pyx_n_s_i_range,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aa_seq)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_diamino_count", 1, 4, 4, 1); __PYX_ERR(0, 116, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aa_len)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_diamino_count", 1, 4, 4, 2); __PYX_ERR(0, 116, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_diamino_count", 1, 4, 4, 3); __PYX_ERR(0, 116, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_diamino_count") < 0)) __PYX_ERR(0, 116, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_self = values[0];
    __pyx_v_aa_seq = __Pyx_PyObject_AsWritableString(values[1]); if (unlikely((!__pyx_v_aa_seq) && PyErr_Occurred())) __PYX_ERR(0, 116, __pyx_L3_error)
    __pyx_v_aa_len = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_aa_len == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 116, __pyx_L3_error)
    __pyx_v_i_range = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_i_range == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 116, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_diamino_count", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 116, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_ORFscores.CDSWindowFeat.add_diamino_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11c_ORFscores_13CDSWindowFeat_10add_diamino_count(__pyx_self, __pyx_v_self, __pyx_v_aa_seq, __pyx_v_aa_len, __pyx_v_i_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat_10add_diamino_count(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, char *__pyx_v_aa_seq, int __pyx_v_aa_len, int __pyx_v_i_range) {
  int __pyx_v_i;
  int __pyx_v_k;
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  long __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_t_9;
  char __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("add_diamino_count", 0);

  /* "c_ORFscores.pyx":119
 *         cdef int i, k
 *         cdef bytes x, y
 *         for i in xrange(aa_len-1, aa_len-1-i_range, -1):             # <<<<<<<<<<<<<<
 *             for k in self.diamino_range:
 *                 if i - k >= 0:
 */
  __pyx_t_1 = ((__pyx_v_aa_len - 1) - __pyx_v_i_range);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = (__pyx_v_aa_len - 1); __pyx_t_3 > __pyx_t_2; __pyx_t_3-=1) {
    __pyx_v_i = __pyx_t_3;

    /* "c_ORFscores.pyx":120
 *         cdef bytes x, y
 *         for i in xrange(aa_len-1, aa_len-1-i_range, -1):
 *             for k in self.diamino_range:             # <<<<<<<<<<<<<<
 *                 if i - k >= 0:
 *                     x = aa_seq[i-k]
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_range); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 120, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 120, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 120, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 120, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 120, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 120, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_k = __pyx_t_8;

      /* "c_ORFscores.pyx":121
 *         for i in xrange(aa_len-1, aa_len-1-i_range, -1):
 *             for k in self.diamino_range:
 *                 if i - k >= 0:             # <<<<<<<<<<<<<<
 *                     x = aa_seq[i-k]
 *                     y = aa_seq[i]
 */
      __pyx_t_9 = (((__pyx_v_i - __pyx_v_k) >= 0) != 0);
      if (__pyx_t_9) {

        /* "c_ORFscores.pyx":122
 *             for k in self.diamino_range:
 *                 if i - k >= 0:
 *                     x = aa_seq[i-k]             # <<<<<<<<<<<<<<
 *                     y = aa_seq[i]
 *                     self.diamino_count[k][(x, y)] += 1
 */
        __pyx_t_10 = (__pyx_v_aa_seq[(__pyx_v_i - __pyx_v_k)]);
        __pyx_t_4 = PyBytes_FromStringAndSize(&__pyx_t_10, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_XDECREF_SET(__pyx_v_x, ((PyObject*)__pyx_t_4));
        __pyx_t_4 = 0;

        /* "c_ORFscores.pyx":123
 *                 if i - k >= 0:
 *                     x = aa_seq[i-k]
 *                     y = aa_seq[i]             # <<<<<<<<<<<<<<
 *                     self.diamino_count[k][(x, y)] += 1
 *                     self.diamino_total[k] += 1
 */
        __pyx_t_4 = PyBytes_FromStringAndSize(&(__pyx_v_aa_seq[__pyx_v_i]), 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 123, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_XDECREF_SET(__pyx_v_y, ((PyObject*)__pyx_t_4));
        __pyx_t_4 = 0;

        /* "c_ORFscores.pyx":124
 *                     x = aa_seq[i-k]
 *                     y = aa_seq[i]
 *                     self.diamino_count[k][(x, y)] += 1             # <<<<<<<<<<<<<<
 *                     self.diamino_total[k] += 1
 *                     self.diamino_changed[(k, x, y)] = 1
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_4, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 124, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v_x);
        __Pyx_GIVEREF(__pyx_v_x);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_x);
        __Pyx_INCREF(__pyx_v_y);
        __Pyx_GIVEREF(__pyx_v_y);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_y);
        __pyx_t_12 = __Pyx_PyObject_GetItem(__pyx_t_11, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 124, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = __Pyx_PyInt_AddObjC(__pyx_t_12, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 124, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(PyObject_SetItem(__pyx_t_11, __pyx_t_4, __pyx_t_13) < 0)) __PYX_ERR(0, 124, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "c_ORFscores.pyx":125
 *                     y = aa_seq[i]
 *                     self.diamino_count[k][(x, y)] += 1
 *                     self.diamino_total[k] += 1             # <<<<<<<<<<<<<<
 *                     self.diamino_changed[(k, x, y)] = 1
 * 
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_total); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 125, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_8 = __pyx_v_k;
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_11, __pyx_t_8, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 125, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_13 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 125, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(__Pyx_SetItemInt(__pyx_t_11, __pyx_t_8, __pyx_t_13, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 125, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "c_ORFscores.pyx":126
 *                     self.diamino_count[k][(x, y)] += 1
 *                     self.diamino_total[k] += 1
 *                     self.diamino_changed[(k, x, y)] = 1             # <<<<<<<<<<<<<<
 * 
 *     def get_amino_freq(self, object pseudo=None, double alpha=0):
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_changed); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 126, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 126, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 126, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_13);
        __Pyx_INCREF(__pyx_v_x);
        __Pyx_GIVEREF(__pyx_v_x);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_x);
        __Pyx_INCREF(__pyx_v_y);
        __Pyx_GIVEREF(__pyx_v_y);
        PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_y);
        __pyx_t_13 = 0;
        if (unlikely(PyObject_SetItem(__pyx_t_11, __pyx_t_4, __pyx_int_1) < 0)) __PYX_ERR(0, 126, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "c_ORFscores.pyx":121
 *         for i in xrange(aa_len-1, aa_len-1-i_range, -1):
 *             for k in self.diamino_range:
 *                 if i - k >= 0:             # <<<<<<<<<<<<<<
 *                     x = aa_seq[i-k]
 *                     y = aa_seq[i]
 */
      }

      /* "c_ORFscores.pyx":120
 *         cdef bytes x, y
 *         for i in xrange(aa_len-1, aa_len-1-i_range, -1):
 *             for k in self.diamino_range:             # <<<<<<<<<<<<<<
 *                 if i - k >= 0:
 *                     x = aa_seq[i-k]
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "c_ORFscores.pyx":116
 *                     self.diamino_changed[(k, x, y)] = 1
 * 
 *     def add_diamino_count(self, char* aa_seq, int aa_len, int i_range):             # <<<<<<<<<<<<<<
 *         cdef int i, k
 *         cdef bytes x, y
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("c_ORFscores.CDSWindowFeat.add_diamino_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_ORFscores.pyx":128
 *                     self.diamino_changed[(k, x, y)] = 1
 * 
 *     def get_amino_freq(self, object pseudo=None, double alpha=0):             # <<<<<<<<<<<<<<
 *         cdef string x
 *         cdef double a, b
 */

/* Python wrapper */
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_13get_amino_freq(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11c_ORFscores_13CDSWindowFeat_13get_amino_freq = {"get_amino_freq", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11c_ORFscores_13CDSWindowFeat_13get_amino_freq, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_13get_amino_freq(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_pseudo = 0;
  double __pyx_v_alpha;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_amino_freq (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_pseudo,&__pyx_n_s_alpha,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pseudo);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_amino_freq") < 0)) __PYX_ERR(0, 128, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_pseudo = values[1];
    if (values[2]) {
      __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 128, __pyx_L3_error)
    } else {
      __pyx_v_alpha = ((double)((double)0.0));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_amino_freq", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 128, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_ORFscores.CDSWindowFeat.get_amino_freq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11c_ORFscores_13CDSWindowFeat_12get_amino_freq(__pyx_self, __pyx_v_self, __pyx_v_pseudo, __pyx_v_alpha);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat_12get_amino_freq(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_pseudo, double __pyx_v_alpha) {
  std::string __pyx_v_x;
  double __pyx_v_a;
  double __pyx_v_b;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  std::string __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  double __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("get_amino_freq", 0);

  /* "c_ORFscores.pyx":131
 *         cdef string x
 *         cdef double a, b
 *         self.amino_freq = {}             # <<<<<<<<<<<<<<
 *         for x in AMINO_LETTERS:
 *             a = self.amino_count[x]
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_amino_freq, __pyx_t_1) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_ORFscores.pyx":132
 *         cdef double a, b
 *         self.amino_freq = {}
 *         for x in AMINO_LETTERS:             # <<<<<<<<<<<<<<
 *             a = self.amino_count[x]
 *             b = self.amino_total
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_AMINO_LETTERS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 132, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 132, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 132, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 132, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_x = __pyx_t_5;

    /* "c_ORFscores.pyx":133
 *         self.amino_freq = {}
 *         for x in AMINO_LETTERS:
 *             a = self.amino_count[x]             # <<<<<<<<<<<<<<
 *             b = self.amino_total
 *             if pseudo is not None and alpha > 0:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_amino_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_a = __pyx_t_8;

    /* "c_ORFscores.pyx":134
 *         for x in AMINO_LETTERS:
 *             a = self.amino_count[x]
 *             b = self.amino_total             # <<<<<<<<<<<<<<
 *             if pseudo is not None and alpha > 0:
 *                 a += alpha*pseudo.amino_count[x]
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_amino_total); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 134, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_b = __pyx_t_8;

    /* "c_ORFscores.pyx":135
 *             a = self.amino_count[x]
 *             b = self.amino_total
 *             if pseudo is not None and alpha > 0:             # <<<<<<<<<<<<<<
 *                 a += alpha*pseudo.amino_count[x]
 *                 b += alpha*pseudo.amino_total
 */
    __pyx_t_10 = (__pyx_v_pseudo != Py_None);
    __pyx_t_11 = (__pyx_t_10 != 0);
    if (__pyx_t_11) {
    } else {
      __pyx_t_9 = __pyx_t_11;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_11 = ((__pyx_v_alpha > 0.0) != 0);
    __pyx_t_9 = __pyx_t_11;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_9) {

      /* "c_ORFscores.pyx":136
 *             b = self.amino_total
 *             if pseudo is not None and alpha > 0:
 *                 a += alpha*pseudo.amino_count[x]             # <<<<<<<<<<<<<<
 *                 b += alpha*pseudo.amino_total
 *             self.amino_freq[x] = a * 1. / b
 */
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_a); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyFloat_FromDouble(__pyx_v_alpha); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_pseudo, __pyx_n_s_amino_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_x); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = PyNumber_Multiply(__pyx_t_6, __pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = PyNumber_InPlaceAdd(__pyx_t_7, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_v_a = __pyx_t_8;

      /* "c_ORFscores.pyx":137
 *             if pseudo is not None and alpha > 0:
 *                 a += alpha*pseudo.amino_count[x]
 *                 b += alpha*pseudo.amino_total             # <<<<<<<<<<<<<<
 *             self.amino_freq[x] = a * 1. / b
 *         return self.amino_freq
 */
      __pyx_t_13 = PyFloat_FromDouble(__pyx_v_b); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_12 = PyFloat_FromDouble(__pyx_v_alpha); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_pseudo, __pyx_n_s_amino_total); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyNumber_Multiply(__pyx_t_12, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_t_13, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 137, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_b = __pyx_t_8;

      /* "c_ORFscores.pyx":135
 *             a = self.amino_count[x]
 *             b = self.amino_total
 *             if pseudo is not None and alpha > 0:             # <<<<<<<<<<<<<<
 *                 a += alpha*pseudo.amino_count[x]
 *                 b += alpha*pseudo.amino_total
 */
    }

    /* "c_ORFscores.pyx":138
 *                 a += alpha*pseudo.amino_count[x]
 *                 b += alpha*pseudo.amino_total
 *             self.amino_freq[x] = a * 1. / b             # <<<<<<<<<<<<<<
 *         return self.amino_freq
 * 
 */
    __pyx_t_8 = (__pyx_v_a * 1.);
    if (unlikely(__pyx_v_b == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 138, __pyx_L1_error)
    }
    __pyx_t_7 = PyFloat_FromDouble((__pyx_t_8 / __pyx_v_b)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_amino_freq); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_x); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (unlikely(PyObject_SetItem(__pyx_t_6, __pyx_t_13, __pyx_t_7) < 0)) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "c_ORFscores.pyx":132
 *         cdef double a, b
 *         self.amino_freq = {}
 *         for x in AMINO_LETTERS:             # <<<<<<<<<<<<<<
 *             a = self.amino_count[x]
 *             b = self.amino_total
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_ORFscores.pyx":139
 *                 b += alpha*pseudo.amino_total
 *             self.amino_freq[x] = a * 1. / b
 *         return self.amino_freq             # <<<<<<<<<<<<<<
 * 
 *     def get_codon_freq(self, object pseudo=None, double alpha=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_amino_freq); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "c_ORFscores.pyx":128
 *                     self.diamino_changed[(k, x, y)] = 1
 * 
 *     def get_amino_freq(self, object pseudo=None, double alpha=0):             # <<<<<<<<<<<<<<
 *         cdef string x
 *         cdef double a, b
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("c_ORFscores.CDSWindowFeat.get_amino_freq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_ORFscores.pyx":141
 *         return self.amino_freq
 * 
 *     def get_codon_freq(self, object pseudo=None, double alpha=0):             # <<<<<<<<<<<<<<
 *         cdef string x
 *         cdef double a, b
 */

/* Python wrapper */
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_15get_codon_freq(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11c_ORFscores_13CDSWindowFeat_15get_codon_freq = {"get_codon_freq", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11c_ORFscores_13CDSWindowFeat_15get_codon_freq, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_15get_codon_freq(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_pseudo = 0;
  double __pyx_v_alpha;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_codon_freq (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_pseudo,&__pyx_n_s_alpha,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pseudo);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_codon_freq") < 0)) __PYX_ERR(0, 141, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_pseudo = values[1];
    if (values[2]) {
      __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L3_error)
    } else {
      __pyx_v_alpha = ((double)((double)0.0));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_codon_freq", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 141, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_ORFscores.CDSWindowFeat.get_codon_freq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11c_ORFscores_13CDSWindowFeat_14get_codon_freq(__pyx_self, __pyx_v_self, __pyx_v_pseudo, __pyx_v_alpha);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat_14get_codon_freq(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_pseudo, double __pyx_v_alpha) {
  std::string __pyx_v_x;
  double __pyx_v_a;
  double __pyx_v_b;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  std::string __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  double __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("get_codon_freq", 0);

  /* "c_ORFscores.pyx":144
 *         cdef string x
 *         cdef double a, b
 *         self.codon_freq = {}             # <<<<<<<<<<<<<<
 *         for x in CODON_LETTERS:
 *             a = self.codon_count[x]
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_codon_freq, __pyx_t_1) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_ORFscores.pyx":145
 *         cdef double a, b
 *         self.codon_freq = {}
 *         for x in CODON_LETTERS:             # <<<<<<<<<<<<<<
 *             a = self.codon_count[x]
 *             b = self.codon_total
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_CODON_LETTERS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 145, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 145, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 145, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 145, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_x = __pyx_t_5;

    /* "c_ORFscores.pyx":146
 *         self.codon_freq = {}
 *         for x in CODON_LETTERS:
 *             a = self.codon_count[x]             # <<<<<<<<<<<<<<
 *             b = self.codon_total
 *             if pseudo is not None and alpha > 0:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_codon_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_x); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_a = __pyx_t_8;

    /* "c_ORFscores.pyx":147
 *         for x in CODON_LETTERS:
 *             a = self.codon_count[x]
 *             b = self.codon_total             # <<<<<<<<<<<<<<
 *             if pseudo is not None and alpha > 0:
 *                 #print "adding pseudo for codon ferq", alpha
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_codon_total); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_b = __pyx_t_8;

    /* "c_ORFscores.pyx":148
 *             a = self.codon_count[x]
 *             b = self.codon_total
 *             if pseudo is not None and alpha > 0:             # <<<<<<<<<<<<<<
 *                 #print "adding pseudo for codon ferq", alpha
 *                 a += alpha*pseudo.codon_count[x]
 */
    __pyx_t_10 = (__pyx_v_pseudo != Py_None);
    __pyx_t_11 = (__pyx_t_10 != 0);
    if (__pyx_t_11) {
    } else {
      __pyx_t_9 = __pyx_t_11;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_11 = ((__pyx_v_alpha > 0.0) != 0);
    __pyx_t_9 = __pyx_t_11;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_9) {

      /* "c_ORFscores.pyx":150
 *             if pseudo is not None and alpha > 0:
 *                 #print "adding pseudo for codon ferq", alpha
 *                 a += alpha*pseudo.codon_count[x]             # <<<<<<<<<<<<<<
 *                 b += alpha*pseudo.codon_total
 *             self.codon_freq[x] = a * 1. / b
 */
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_a); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 150, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyFloat_FromDouble(__pyx_v_alpha); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 150, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_pseudo, __pyx_n_s_codon_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_12 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_x); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 150, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 150, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = PyNumber_Multiply(__pyx_t_6, __pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 150, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = PyNumber_InPlaceAdd(__pyx_t_7, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 150, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 150, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_v_a = __pyx_t_8;

      /* "c_ORFscores.pyx":151
 *                 #print "adding pseudo for codon ferq", alpha
 *                 a += alpha*pseudo.codon_count[x]
 *                 b += alpha*pseudo.codon_total             # <<<<<<<<<<<<<<
 *             self.codon_freq[x] = a * 1. / b
 *         return self.codon_freq
 */
      __pyx_t_13 = PyFloat_FromDouble(__pyx_v_b); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_12 = PyFloat_FromDouble(__pyx_v_alpha); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_pseudo, __pyx_n_s_codon_total); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PyNumber_Multiply(__pyx_t_12, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_InPlaceAdd(__pyx_t_13, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_b = __pyx_t_8;

      /* "c_ORFscores.pyx":148
 *             a = self.codon_count[x]
 *             b = self.codon_total
 *             if pseudo is not None and alpha > 0:             # <<<<<<<<<<<<<<
 *                 #print "adding pseudo for codon ferq", alpha
 *                 a += alpha*pseudo.codon_count[x]
 */
    }

    /* "c_ORFscores.pyx":152
 *                 a += alpha*pseudo.codon_count[x]
 *                 b += alpha*pseudo.codon_total
 *             self.codon_freq[x] = a * 1. / b             # <<<<<<<<<<<<<<
 *         return self.codon_freq
 * 
 */
    __pyx_t_8 = (__pyx_v_a * 1.);
    if (unlikely(__pyx_v_b == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 152, __pyx_L1_error)
    }
    __pyx_t_7 = PyFloat_FromDouble((__pyx_t_8 / __pyx_v_b)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_codon_freq); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_x); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (unlikely(PyObject_SetItem(__pyx_t_6, __pyx_t_13, __pyx_t_7) < 0)) __PYX_ERR(0, 152, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "c_ORFscores.pyx":145
 *         cdef double a, b
 *         self.codon_freq = {}
 *         for x in CODON_LETTERS:             # <<<<<<<<<<<<<<
 *             a = self.codon_count[x]
 *             b = self.codon_total
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_ORFscores.pyx":153
 *                 b += alpha*pseudo.codon_total
 *             self.codon_freq[x] = a * 1. / b
 *         return self.codon_freq             # <<<<<<<<<<<<<<
 * 
 *     def get_diamino_freq(self, object pseudo=None, double alpha=0, bool clear_dict=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_codon_freq); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "c_ORFscores.pyx":141
 *         return self.amino_freq
 * 
 *     def get_codon_freq(self, object pseudo=None, double alpha=0):             # <<<<<<<<<<<<<<
 *         cdef string x
 *         cdef double a, b
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("c_ORFscores.CDSWindowFeat.get_codon_freq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "c_ORFscores.pyx":155
 *         return self.codon_freq
 * 
 *     def get_diamino_freq(self, object pseudo=None, double alpha=0, bool clear_dict=True):             # <<<<<<<<<<<<<<
 *         cdef int k
 *         cdef double a, b
 */

/* Python wrapper */
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_17get_diamino_freq(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11c_ORFscores_13CDSWindowFeat_17get_diamino_freq = {"get_diamino_freq", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11c_ORFscores_13CDSWindowFeat_17get_diamino_freq, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11c_ORFscores_13CDSWindowFeat_17get_diamino_freq(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_pseudo = 0;
  double __pyx_v_alpha;
  bool __pyx_v_clear_dict;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_diamino_freq (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_pseudo,&__pyx_n_s_alpha,&__pyx_n_s_clear_dict,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)((PyObject *)Py_None));
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pseudo);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_clear_dict);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_diamino_freq") < 0)) __PYX_ERR(0, 155, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_pseudo = values[1];
    if (values[2]) {
      __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 155, __pyx_L3_error)
    } else {
      __pyx_v_alpha = ((double)((double)0.0));
    }
    if (values[3]) {
      __pyx_v_clear_dict = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_clear_dict == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 155, __pyx_L3_error)
    } else {
      __pyx_v_clear_dict = ((bool)((int)1));
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_diamino_freq", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 155, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("c_ORFscores.CDSWindowFeat.get_diamino_freq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11c_ORFscores_13CDSWindowFeat_16get_diamino_freq(__pyx_self, __pyx_v_self, __pyx_v_pseudo, __pyx_v_alpha, __pyx_v_clear_dict);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11c_ORFscores_13CDSWindowFeat_16get_diamino_freq(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_pseudo, double __pyx_v_alpha, bool __pyx_v_clear_dict) {
  int __pyx_v_k;
  double __pyx_v_a;
  double __pyx_v_b;
  std::string __pyx_v_x;
  std::string __pyx_v_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  std::string __pyx_t_14;
  std::string __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  double __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  __Pyx_RefNannySetupContext("get_diamino_freq", 0);

  /* "c_ORFscores.pyx":159
 *         cdef double a, b
 *         cdef string x, y
 *         if clear_dict: self.diamino_freq = {}             # <<<<<<<<<<<<<<
 *         for k in self.diamino_range:
 *             if clear_dict: self.diamino_freq[k] = {}
 */
  __pyx_t_1 = (__pyx_v_clear_dict != 0);
  if (__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_diamino_freq, __pyx_t_2) < 0) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "c_ORFscores.pyx":160
 *         cdef string x, y
 *         if clear_dict: self.diamino_freq = {}
 *         for k in self.diamino_range:             # <<<<<<<<<<<<<<
 *             if clear_dict: self.diamino_freq[k] = {}
 *             for x, y in DIAMINO_LETTERS:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_range); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 160, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 160, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 160, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 160, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_k = __pyx_t_6;

    /* "c_ORFscores.pyx":161
 *         if clear_dict: self.diamino_freq = {}
 *         for k in self.diamino_range:
 *             if clear_dict: self.diamino_freq[k] = {}             # <<<<<<<<<<<<<<
 *             for x, y in DIAMINO_LETTERS:
 *                 if not clear_dict and (k, x, y) not in self.diamino_changed: continue
 */
    __pyx_t_1 = (__pyx_v_clear_dict != 0);
    if (__pyx_t_1) {
      __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_freq); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(__Pyx_SetItemInt(__pyx_t_7, __pyx_v_k, __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }

    /* "c_ORFscores.pyx":162
 *         for k in self.diamino_range:
 *             if clear_dict: self.diamino_freq[k] = {}
 *             for x, y in DIAMINO_LETTERS:             # <<<<<<<<<<<<<<
 *                 if not clear_dict and (k, x, y) not in self.diamino_changed: continue
 *                 a = self.diamino_count[k][(x, y)]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_DIAMINO_LETTERS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_7 = __pyx_t_2; __Pyx_INCREF(__pyx_t_7); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 162, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 162, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 162, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 162, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_9(__pyx_t_7);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 162, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
        PyObject* sequence = __pyx_t_2;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 162, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_10 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        #else
        __pyx_t_10 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_12 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_13 = Py_TYPE(__pyx_t_12)->tp_iternext;
        index = 0; __pyx_t_10 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_10)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_10);
        index = 1; __pyx_t_11 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_11)) goto __pyx_L9_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_12), 2) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
        __pyx_t_13 = NULL;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L10_unpacking_done;
        __pyx_L9_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 162, __pyx_L1_error)
        __pyx_L10_unpacking_done:;
      }
      __pyx_t_14 = __pyx_convert_string_from_py_std__in_string(__pyx_t_10); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_15 = __pyx_convert_string_from_py_std__in_string(__pyx_t_11); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_v_x = __pyx_t_14;
      __pyx_v_y = __pyx_t_15;

      /* "c_ORFscores.pyx":163
 *             if clear_dict: self.diamino_freq[k] = {}
 *             for x, y in DIAMINO_LETTERS:
 *                 if not clear_dict and (k, x, y) not in self.diamino_changed: continue             # <<<<<<<<<<<<<<
 *                 a = self.diamino_count[k][(x, y)]
 *                 b = self.diamino_total[k]
 */
      __pyx_t_16 = ((!(__pyx_v_clear_dict != 0)) != 0);
      if (__pyx_t_16) {
      } else {
        __pyx_t_1 = __pyx_t_16;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_k); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_x); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_y); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_10);
      __pyx_t_2 = 0;
      __pyx_t_11 = 0;
      __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_changed); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_16 = (__Pyx_PySequence_ContainsTF(__pyx_t_12, __pyx_t_10, Py_NE)); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 163, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_17 = (__pyx_t_16 != 0);
      __pyx_t_1 = __pyx_t_17;
      __pyx_L12_bool_binop_done:;
      if (__pyx_t_1) {
        goto __pyx_L7_continue;
      }

      /* "c_ORFscores.pyx":164
 *             for x, y in DIAMINO_LETTERS:
 *                 if not clear_dict and (k, x, y) not in self.diamino_changed: continue
 *                 a = self.diamino_count[k][(x, y)]             # <<<<<<<<<<<<<<
 *                 b = self.diamino_total[k]
 *                 if pseudo is not None and alpha> 0:
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_count); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_10, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_x); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_y); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_11);
      __pyx_t_10 = 0;
      __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_t_12, __pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_v_a = __pyx_t_18;

      /* "c_ORFscores.pyx":165
 *                 if not clear_dict and (k, x, y) not in self.diamino_changed: continue
 *                 a = self.diamino_count[k][(x, y)]
 *                 b = self.diamino_total[k]             # <<<<<<<<<<<<<<
 *                 if pseudo is not None and alpha> 0:
 *                     a += alpha*pseudo.diamino_count[k][(x, y)]
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_total); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_11, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_b = __pyx_t_18;

      /* "c_ORFscores.pyx":166
 *                 a = self.diamino_count[k][(x, y)]
 *                 b = self.diamino_total[k]
 *                 if pseudo is not None and alpha> 0:             # <<<<<<<<<<<<<<
 *                     a += alpha*pseudo.diamino_count[k][(x, y)]
 *                     b += alpha*pseudo.diamino_total[k]
 */
      __pyx_t_17 = (__pyx_v_pseudo != Py_None);
      __pyx_t_16 = (__pyx_t_17 != 0);
      if (__pyx_t_16) {
      } else {
        __pyx_t_1 = __pyx_t_16;
        goto __pyx_L15_bool_binop_done;
      }
      __pyx_t_16 = ((__pyx_v_alpha > 0.0) != 0);
      __pyx_t_1 = __pyx_t_16;
      __pyx_L15_bool_binop_done:;
      if (__pyx_t_1) {

        /* "c_ORFscores.pyx":167
 *                 b = self.diamino_total[k]
 *                 if pseudo is not None and alpha> 0:
 *                     a += alpha*pseudo.diamino_count[k][(x, y)]             # <<<<<<<<<<<<<<
 *                     b += alpha*pseudo.diamino_total[k]
 *                 self.diamino_freq[k][(x,y)] = a * 1. / b
 */
        __pyx_t_2 = PyFloat_FromDouble(__pyx_v_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 167, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = PyFloat_FromDouble(__pyx_v_alpha); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 167, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_pseudo, __pyx_n_s_diamino_count); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 167, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_12, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 167, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_x); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 167, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_19 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_y); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 167, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 167, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_19);
        PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_t_19);
        __pyx_t_12 = 0;
        __pyx_t_19 = 0;
        __pyx_t_19 = __Pyx_PyObject_GetItem(__pyx_t_10, __pyx_t_20); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 167, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __pyx_t_20 = PyNumber_Multiply(__pyx_t_11, __pyx_t_19); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 167, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __pyx_t_19 = PyNumber_InPlaceAdd(__pyx_t_2, __pyx_t_20); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 167, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_19); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 167, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __pyx_v_a = __pyx_t_18;

        /* "c_ORFscores.pyx":168
 *                 if pseudo is not None and alpha> 0:
 *                     a += alpha*pseudo.diamino_count[k][(x, y)]
 *                     b += alpha*pseudo.diamino_total[k]             # <<<<<<<<<<<<<<
 *                 self.diamino_freq[k][(x,y)] = a * 1. / b
 *         return self.diamino_freq
 */
        __pyx_t_19 = PyFloat_FromDouble(__pyx_v_b); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 168, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_20 = PyFloat_FromDouble(__pyx_v_alpha); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 168, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pseudo, __pyx_n_s_diamino_total); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 168, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 168, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Multiply(__pyx_t_20, __pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 168, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyNumber_InPlaceAdd(__pyx_t_19, __pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 168, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_v_b = __pyx_t_18;

        /* "c_ORFscores.pyx":166
 *                 a = self.diamino_count[k][(x, y)]
 *                 b = self.diamino_total[k]
 *                 if pseudo is not None and alpha> 0:             # <<<<<<<<<<<<<<
 *                     a += alpha*pseudo.diamino_count[k][(x, y)]
 *                     b += alpha*pseudo.diamino_total[k]
 */
      }

      /* "c_ORFscores.pyx":169
 *                     a += alpha*pseudo.diamino_count[k][(x, y)]
 *                     b += alpha*pseudo.diamino_total[k]
 *                 self.diamino_freq[k][(x,y)] = a * 1. / b             # <<<<<<<<<<<<<<
 *         return self.diamino_freq
 * 
 */
      __pyx_t_18 = (__pyx_v_a * 1.);
      if (unlikely(__pyx_v_b == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 169, __pyx_L1_error)
      }
      __pyx_t_11 = PyFloat_FromDouble((__pyx_t_18 / __pyx_v_b)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_freq); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_19 = __Pyx_GetItemInt(__pyx_t_2, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_20 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_y); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 169, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_20);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_20);
      __pyx_t_2 = 0;
      __pyx_t_20 = 0;
      if (unlikely(PyObject_SetItem(__pyx_t_19, __pyx_t_10, __pyx_t_11) < 0)) __PYX_ERR(0, 169, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "c_ORFscores.pyx":162
 *         for k in self.diamino_range:
 *             if clear_dict: self.diamino_freq[k] = {}
 *             for x, y in DIAMINO_LETTERS:             # <<<<<<<<<<<<<<
 *                 if not clear_dict and (k, x, y) not in self.diamino_changed: continue
 *                 a = self.diamino_count[k][(x, y)]
 */
      __pyx_L7_continue:;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "c_ORFscores.pyx":160
 *         cdef string x, y
 *         if clear_dict: self.diamino_freq = {}
 *         for k in self.diamino_range:             # <<<<<<<<<<<<<<
 *             if clear_dict: self.diamino_freq[k] = {}
 *             for x, y in DIAMINO_LETTERS:
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "c_ORFscores.pyx":170
 *                     b += alpha*pseudo.diamino_total[k]
 *                 self.diamino_freq[k][(x,y)] = a * 1. / b
 *         return self.diamino_freq             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_diamino_freq); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "c_ORFscores.pyx":155
 *         return self.codon_freq
 * 
 *     def get_diamino_freq(self, object pseudo=None, double alpha=0, bool clear_dict=True):             # <<<<<<<<<<<<<<
 *         cdef int k
 *         cdef double a, b
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("c_ORFscores.CDSWindowFeat.get_diamino_freq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_c_ORFscores(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_c_ORFscores},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "c_ORFscores",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 1},
  {&__pyx_kp_b_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 0, 0},
  {&__pyx_n_b_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 0, 1},
  {&__pyx_n_b_AAA, __pyx_k_AAA, sizeof(__pyx_k_AAA), 0, 0, 0, 1},
  {&__pyx_n_b_AAC, __pyx_k_AAC, sizeof(__pyx_k_AAC), 0, 0, 0, 1},
  {&__pyx_n_b_AAG, __pyx_k_AAG, sizeof(__pyx_k_AAG), 0, 0, 0, 1},
  {&__pyx_n_b_AAT, __pyx_k_AAT, sizeof(__pyx_k_AAT), 0, 0, 0, 1},
  {&__pyx_n_b_ACA, __pyx_k_ACA, sizeof(__pyx_k_ACA), 0, 0, 0, 1},
  {&__pyx_n_b_ACC, __pyx_k_ACC, sizeof(__pyx_k_ACC), 0, 0, 0, 1},
  {&__pyx_n_b_ACG, __pyx_k_ACG, sizeof(__pyx_k_ACG), 0, 0, 0, 1},
  {&__pyx_n_b_ACT, __pyx_k_ACT, sizeof(__pyx_k_ACT), 0, 0, 0, 1},
  {&__pyx_n_b_AGA, __pyx_k_AGA, sizeof(__pyx_k_AGA), 0, 0, 0, 1},
  {&__pyx_n_b_AGC, __pyx_k_AGC, sizeof(__pyx_k_AGC), 0, 0, 0, 1},
  {&__pyx_n_b_AGG, __pyx_k_AGG, sizeof(__pyx_k_AGG), 0, 0, 0, 1},
  {&__pyx_n_b_AGT, __pyx_k_AGT, sizeof(__pyx_k_AGT), 0, 0, 0, 1},
  {&__pyx_n_s_AMINO_LETTERS, __pyx_k_AMINO_LETTERS, sizeof(__pyx_k_AMINO_LETTERS), 0, 0, 1, 1},
  {&__pyx_n_b_ATA, __pyx_k_ATA, sizeof(__pyx_k_ATA), 0, 0, 0, 1},
  {&__pyx_n_b_ATC, __pyx_k_ATC, sizeof(__pyx_k_ATC), 0, 0, 0, 1},
  {&__pyx_n_b_ATG, __pyx_k_ATG, sizeof(__pyx_k_ATG), 0, 0, 0, 1},
  {&__pyx_n_b_ATT, __pyx_k_ATT, sizeof(__pyx_k_ATT), 0, 0, 0, 1},
  {&__pyx_n_s_Bio_Alphabet, __pyx_k_Bio_Alphabet, sizeof(__pyx_k_Bio_Alphabet), 0, 0, 1, 1},
  {&__pyx_n_s_Bio_Data_CodonTable, __pyx_k_Bio_Data_CodonTable, sizeof(__pyx_k_Bio_Data_CodonTable), 0, 0, 1, 1},
  {&__pyx_n_b_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 0, 1},
  {&__pyx_n_b_CAA, __pyx_k_CAA, sizeof(__pyx_k_CAA), 0, 0, 0, 1},
  {&__pyx_n_b_CAC, __pyx_k_CAC, sizeof(__pyx_k_CAC), 0, 0, 0, 1},
  {&__pyx_n_b_CAG, __pyx_k_CAG, sizeof(__pyx_k_CAG), 0, 0, 0, 1},
  {&__pyx_n_b_CAT, __pyx_k_CAT, sizeof(__pyx_k_CAT), 0, 0, 0, 1},
  {&__pyx_n_b_CCA, __pyx_k_CCA, sizeof(__pyx_k_CCA), 0, 0, 0, 1},
  {&__pyx_n_b_CCC, __pyx_k_CCC, sizeof(__pyx_k_CCC), 0, 0, 0, 1},
  {&__pyx_n_b_CCG, __pyx_k_CCG, sizeof(__pyx_k_CCG), 0, 0, 0, 1},
  {&__pyx_n_b_CCT, __pyx_k_CCT, sizeof(__pyx_k_CCT), 0, 0, 0, 1},
  {&__pyx_n_s_CDSWindowFeat, __pyx_k_CDSWindowFeat, sizeof(__pyx_k_CDSWindowFeat), 0, 0, 1, 1},
  {&__pyx_n_s_CDSWindowFeat___init, __pyx_k_CDSWindowFeat___init, sizeof(__pyx_k_CDSWindowFeat___init), 0, 0, 1, 1},
  {&__pyx_n_s_CDSWindowFeat_add_diamino_count, __pyx_k_CDSWindowFeat_add_diamino_count, sizeof(__pyx_k_CDSWindowFeat_add_diamino_count), 0, 0, 1, 1},
  {&__pyx_n_s_CDSWindowFeat_calc_amino_count, __pyx_k_CDSWindowFeat_calc_amino_count, sizeof(__pyx_k_CDSWindowFeat_calc_amino_count), 0, 0, 1, 1},
  {&__pyx_n_s_CDSWindowFeat_calc_codon_count, __pyx_k_CDSWindowFeat_calc_codon_count, sizeof(__pyx_k_CDSWindowFeat_calc_codon_count), 0, 0, 1, 1},
  {&__pyx_n_s_CDSWindowFeat_calc_diamino_count, __pyx_k_CDSWindowFeat_calc_diamino_count, sizeof(__pyx_k_CDSWindowFeat_calc_diamino_count), 0, 0, 1, 1},
  {&__pyx_n_s_CDSWindowFeat_deduct_diamino_cou, __pyx_k_CDSWindowFeat_deduct_diamino_cou, sizeof(__pyx_k_CDSWindowFeat_deduct_diamino_cou), 0, 0, 1, 1},
  {&__pyx_n_s_CDSWindowFeat_get_amino_freq, __pyx_k_CDSWindowFeat_get_amino_freq, sizeof(__pyx_k_CDSWindowFeat_get_amino_freq), 0, 0, 1, 1},
  {&__pyx_n_s_CDSWindowFeat_get_codon_freq, __pyx_k_CDSWindowFeat_get_codon_freq, sizeof(__pyx_k_CDSWindowFeat_get_codon_freq), 0, 0, 1, 1},
  {&__pyx_n_s_CDSWindowFeat_get_diamino_freq, __pyx_k_CDSWindowFeat_get_diamino_freq, sizeof(__pyx_k_CDSWindowFeat_get_diamino_freq), 0, 0, 1, 1},
  {&__pyx_n_b_CGA, __pyx_k_CGA, sizeof(__pyx_k_CGA), 0, 0, 0, 1},
  {&__pyx_n_b_CGC, __pyx_k_CGC, sizeof(__pyx_k_CGC), 0, 0, 0, 1},
  {&__pyx_n_b_CGG, __pyx_k_CGG, sizeof(__pyx_k_CGG), 0, 0, 0, 1},
  {&__pyx_n_b_CGT, __pyx_k_CGT, sizeof(__pyx_k_CGT), 0, 0, 0, 1},
  {&__pyx_n_s_CODON_LETTERS, __pyx_k_CODON_LETTERS, sizeof(__pyx_k_CODON_LETTERS), 0, 0, 1, 1},
  {&__pyx_n_b_CTA, __pyx_k_CTA, sizeof(__pyx_k_CTA), 0, 0, 0, 1},
  {&__pyx_n_b_CTC, __pyx_k_CTC, sizeof(__pyx_k_CTC), 0, 0, 0, 1},
  {&__pyx_n_b_CTG, __pyx_k_CTG, sizeof(__pyx_k_CTG), 0, 0, 0, 1},
  {&__pyx_n_b_CTT, __pyx_k_CTT, sizeof(__pyx_k_CTT), 0, 0, 0, 1},
  {&__pyx_n_s_CodonTable, __pyx_k_CodonTable, sizeof(__pyx_k_CodonTable), 0, 0, 1, 1},
  {&__pyx_n_b_D, __pyx_k_D, sizeof(__pyx_k_D), 0, 0, 0, 1},
  {&__pyx_n_s_DIAMINO_LETTERS, __pyx_k_DIAMINO_LETTERS, sizeof(__pyx_k_DIAMINO_LETTERS), 0, 0, 1, 1},
  {&__pyx_n_b_E, __pyx_k_E, sizeof(__pyx_k_E), 0, 0, 0, 1},
  {&__pyx_n_b_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 0, 0, 1},
  {&__pyx_n_b_G, __pyx_k_G, sizeof(__pyx_k_G), 0, 0, 0, 1},
  {&__pyx_n_b_GAA, __pyx_k_GAA, sizeof(__pyx_k_GAA), 0, 0, 0, 1},
  {&__pyx_n_b_GAC, __pyx_k_GAC, sizeof(__pyx_k_GAC), 0, 0, 0, 1},
  {&__pyx_n_b_GAG, __pyx_k_GAG, sizeof(__pyx_k_GAG), 0, 0, 0, 1},
  {&__pyx_n_b_GAT, __pyx_k_GAT, sizeof(__pyx_k_GAT), 0, 0, 0, 1},
  {&__pyx_n_b_GCA, __pyx_k_GCA, sizeof(__pyx_k_GCA), 0, 0, 0, 1},
  {&__pyx_n_b_GCC, __pyx_k_GCC, sizeof(__pyx_k_GCC), 0, 0, 0, 1},
  {&__pyx_n_b_GCG, __pyx_k_GCG, sizeof(__pyx_k_GCG), 0, 0, 0, 1},
  {&__pyx_n_b_GCT, __pyx_k_GCT, sizeof(__pyx_k_GCT), 0, 0, 0, 1},
  {&__pyx_n_b_GGA, __pyx_k_GGA, sizeof(__pyx_k_GGA), 0, 0, 0, 1},
  {&__pyx_n_b_GGC, __pyx_k_GGC, sizeof(__pyx_k_GGC), 0, 0, 0, 1},
  {&__pyx_n_b_GGG, __pyx_k_GGG, sizeof(__pyx_k_GGG), 0, 0, 0, 1},
  {&__pyx_n_b_GGT, __pyx_k_GGT, sizeof(__pyx_k_GGT), 0, 0, 0, 1},
  {&__pyx_n_b_GTA, __pyx_k_GTA, sizeof(__pyx_k_GTA), 0, 0, 0, 1},
  {&__pyx_n_b_GTC, __pyx_k_GTC, sizeof(__pyx_k_GTC), 0, 0, 0, 1},
  {&__pyx_n_b_GTG, __pyx_k_GTG, sizeof(__pyx_k_GTG), 0, 0, 0, 1},
  {&__pyx_n_b_GTT, __pyx_k_GTT, sizeof(__pyx_k_GTT), 0, 0, 0, 1},
  {&__pyx_n_b_H, __pyx_k_H, sizeof(__pyx_k_H), 0, 0, 0, 1},
  {&__pyx_n_b_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 0, 0, 1},
  {&__pyx_n_s_IUPAC, __pyx_k_IUPAC, sizeof(__pyx_k_IUPAC), 0, 0, 1, 1},
  {&__pyx_n_b_K, __pyx_k_K, sizeof(__pyx_k_K), 0, 0, 0, 1},
  {&__pyx_n_b_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 0, 0, 1},
  {&__pyx_n_b_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 0, 0, 1},
  {&__pyx_n_b_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 0, 1},
  {&__pyx_n_s_NT_LETTERS, __pyx_k_NT_LETTERS, sizeof(__pyx_k_NT_LETTERS), 0, 0, 1, 1},
  {&__pyx_n_b_P, __pyx_k_P, sizeof(__pyx_k_P), 0, 0, 0, 1},
  {&__pyx_n_b_Q, __pyx_k_Q, sizeof(__pyx_k_Q), 0, 0, 0, 1},
  {&__pyx_n_b_R, __pyx_k_R, sizeof(__pyx_k_R), 0, 0, 0, 1},
  {&__pyx_n_b_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 0, 0, 1},
  {&__pyx_n_b_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 0, 1},
  {&__pyx_n_b_TAA, __pyx_k_TAA, sizeof(__pyx_k_TAA), 0, 0, 0, 1},
  {&__pyx_n_b_TAC, __pyx_k_TAC, sizeof(__pyx_k_TAC), 0, 0, 0, 1},
  {&__pyx_n_b_TAG, __pyx_k_TAG, sizeof(__pyx_k_TAG), 0, 0, 0, 1},
  {&__pyx_n_b_TAT, __pyx_k_TAT, sizeof(__pyx_k_TAT), 0, 0, 0, 1},
  {&__pyx_n_b_TCA, __pyx_k_TCA, sizeof(__pyx_k_TCA), 0, 0, 0, 1},
  {&__pyx_n_b_TCC, __pyx_k_TCC, sizeof(__pyx_k_TCC), 0, 0, 0, 1},
  {&__pyx_n_b_TCG, __pyx_k_TCG, sizeof(__pyx_k_TCG), 0, 0, 0, 1},
  {&__pyx_n_b_TCT, __pyx_k_TCT, sizeof(__pyx_k_TCT), 0, 0, 0, 1},
  {&__pyx_n_b_TGA, __pyx_k_TGA, sizeof(__pyx_k_TGA), 0, 0, 0, 1},
  {&__pyx_n_b_TGC, __pyx_k_TGC, sizeof(__pyx_k_TGC), 0, 0, 0, 1},
  {&__pyx_n_b_TGG, __pyx_k_TGG, sizeof(__pyx_k_TGG), 0, 0, 0, 1},
  {&__pyx_n_b_TGT, __pyx_k_TGT, sizeof(__pyx_k_TGT), 0, 0, 0, 1},
  {&__pyx_n_b_TTA, __pyx_k_TTA, sizeof(__pyx_k_TTA), 0, 0, 0, 1},
  {&__pyx_n_b_TTC, __pyx_k_TTC, sizeof(__pyx_k_TTC), 0, 0, 0, 1},
  {&__pyx_n_b_TTG, __pyx_k_TTG, sizeof(__pyx_k_TTG), 0, 0, 0, 1},
  {&__pyx_n_b_TTT, __pyx_k_TTT, sizeof(__pyx_k_TTT), 0, 0, 0, 1},
  {&__pyx_n_b_V, __pyx_k_V, sizeof(__pyx_k_V), 0, 0, 0, 1},
  {&__pyx_n_b_W, __pyx_k_W, sizeof(__pyx_k_W), 0, 0, 0, 1},
  {&__pyx_n_b_Y, __pyx_k_Y, sizeof(__pyx_k_Y), 0, 0, 0, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_aa_len, __pyx_k_aa_len, sizeof(__pyx_k_aa_len), 0, 0, 1, 1},
  {&__pyx_n_s_aa_seq, __pyx_k_aa_seq, sizeof(__pyx_k_aa_seq), 0, 0, 1, 1},
  {&__pyx_n_s_aa_seq2, __pyx_k_aa_seq2, sizeof(__pyx_k_aa_seq2), 0, 0, 1, 1},
  {&__pyx_n_s_add_diamino_count, __pyx_k_add_diamino_count, sizeof(__pyx_k_add_diamino_count), 0, 0, 1, 1},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_amino_count, __pyx_k_amino_count, sizeof(__pyx_k_amino_count), 0, 0, 1, 1},
  {&__pyx_n_s_amino_freq, __pyx_k_amino_freq, sizeof(__pyx_k_amino_freq), 0, 0, 1, 1},
  {&__pyx_n_s_amino_total, __pyx_k_amino_total, sizeof(__pyx_k_amino_total), 0, 0, 1, 1},
  {&__pyx_n_s_author, __pyx_k_author, sizeof(__pyx_k_author), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_c_ORFscores, __pyx_k_c_ORFscores, sizeof(__pyx_k_c_ORFscores), 0, 0, 1, 1},
  {&__pyx_kp_s_c_ORFscores_pyx, __pyx_k_c_ORFscores_pyx, sizeof(__pyx_k_c_ORFscores_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_calc_amino_count, __pyx_k_calc_amino_count, sizeof(__pyx_k_calc_amino_count), 0, 0, 1, 1},
  {&__pyx_n_s_calc_codon_count, __pyx_k_calc_codon_count, sizeof(__pyx_k_calc_codon_count), 0, 0, 1, 1},
  {&__pyx_n_s_calc_diamino_count, __pyx_k_calc_diamino_count, sizeof(__pyx_k_calc_diamino_count), 0, 0, 1, 1},
  {&__pyx_n_s_clear_dict, __pyx_k_clear_dict, sizeof(__pyx_k_clear_dict), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_codon_count, __pyx_k_codon_count, sizeof(__pyx_k_codon_count), 0, 0, 1, 1},
  {&__pyx_n_s_codon_freq, __pyx_k_codon_freq, sizeof(__pyx_k_codon_freq), 0, 0, 1, 1},
  {&__pyx_n_s_codon_total, __pyx_k_codon_total, sizeof(__pyx_k_codon_total), 0, 0, 1, 1},
  {&__pyx_n_s_deduct_diamino_count, __pyx_k_deduct_diamino_count, sizeof(__pyx_k_deduct_diamino_count), 0, 0, 1, 1},
  {&__pyx_n_s_diamino_changed, __pyx_k_diamino_changed, sizeof(__pyx_k_diamino_changed), 0, 0, 1, 1},
  {&__pyx_n_s_diamino_count, __pyx_k_diamino_count, sizeof(__pyx_k_diamino_count), 0, 0, 1, 1},
  {&__pyx_n_s_diamino_freq, __pyx_k_diamino_freq, sizeof(__pyx_k_diamino_freq), 0, 0, 1, 1},
  {&__pyx_n_s_diamino_range, __pyx_k_diamino_range, sizeof(__pyx_k_diamino_range), 0, 0, 1, 1},
  {&__pyx_n_s_diamino_total, __pyx_k_diamino_total, sizeof(__pyx_k_diamino_total), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_kp_u_etseng_pacificbiosciences_com, __pyx_k_etseng_pacificbiosciences_com, sizeof(__pyx_k_etseng_pacificbiosciences_com), 0, 1, 0, 0},
  {&__pyx_n_s_factor, __pyx_k_factor, sizeof(__pyx_k_factor), 0, 0, 1, 1},
  {&__pyx_n_s_get_amino_freq, __pyx_k_get_amino_freq, sizeof(__pyx_k_get_amino_freq), 0, 0, 1, 1},
  {&__pyx_n_s_get_codon_freq, __pyx_k_get_codon_freq, sizeof(__pyx_k_get_codon_freq), 0, 0, 1, 1},
  {&__pyx_n_s_get_diamino_freq, __pyx_k_get_diamino_freq, sizeof(__pyx_k_get_diamino_freq), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_i_range, __pyx_k_i_range, sizeof(__pyx_k_i_range), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_nt_len, __pyx_k_nt_len, sizeof(__pyx_k_nt_len), 0, 0, 1, 1},
  {&__pyx_n_s_nt_seq, __pyx_k_nt_seq, sizeof(__pyx_k_nt_seq), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_pseudo, __pyx_k_pseudo, sizeof(__pyx_k_pseudo), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 89, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 89, __pyx_L1_error)
  #endif
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "c_ORFscores.pyx":19
 * CODON_LETTERS = [b"GGG",b"GGA",b"GGT",b"GGC",b"GAG",b"GAA",b"GAT",b"GAC",b"GTG",b"GTA",b"GTT",b"GTC",b"GCG",b"GCA",b"GCT",b"GCC",b"AGG",b"AGA",b"AGT",b"AGC",b"AAG",b"AAA",b"AAT",b"AAC",b"ATG",b"ATA",b"ATT",b"ATC",b"ACG",b"ACA",b"ACT",b"ACC",b"TGG",b"TGA",b"TGT",b"TGC",b"TAG",b"TAA",b"TAT",b"TAC",b"TTG",b"TTA",b"TTT",b"TTC",b"TCG",b"TCA",b"TCT",b"TCC",b"CGG",b"CGA",b"CGT",b"CGC",b"CAG",b"CAA",b"CAT",b"CAC",b"CTG",b"CTA",b"CTT",b"CTC",b"CCG",b"CCA",b"CCT",b"CCC"]
 * DIAMINO_LETTERS = [\
 *     (b'A', b'A'),(b'A', b'C'),(b'A', b'D'),(b'A', b'E'),(b'A', b'F'),(b'A', b'G'),(b'A', b'H'),(b'A', b'I'),(b'A', b'K'),(b'A', b'L'),(b'A', b'M'),(b'A', b'N'),(b'A', b'P'),(b'A', b'Q'),(b'A', b'R'),(b'A', b'S'),(b'A', b'T'),(b'A', b'V'),(b'A', b'W'),(b'A', b'Y'),(b'A', b'*'),(b'C', b'A'),(b'C', b'C'),(b'C', b'D'),(b'C', b'E'),(b'C', b'F'),(b'C', b'G'),(b'C', b'H'),(b'C', b'I'),(b'C', b'K'),(b'C', b'L'),(b'C', b'M'),(b'C', b'N'),(b'C', b'P'),(b'C', b'Q'),(b'C', b'R'),(b'C', b'S'),(b'C', b'T'),(b'C', b'V'),(b'C', b'W'),(b'C', b'Y'),(b'C', b'*'),(b'D', b'A'),(b'D', b'C'),(b'D', b'D'),(b'D', b'E'),(b'D', b'F'),(b'D', b'G'),(b'D', b'H'),(b'D', b'I'),(b'D', b'K'),(b'D', b'L'),(b'D', b'M'),(b'D', b'N'),(b'D', b'P'),(b'D', b'Q'),(b'D', b'R'),(b'D', b'S'),(b'D', b'T'),(b'D', b'V'),(b'D', b'W'),(b'D', b'Y'),(b'D', b'*'),(b'E', b'A'),(b'E', b'C'),(b'E', b'D'),(b'E', b'E'),(b'E', b'F'),(b'E', b'G'),(b'E', b'H'),(b'E', b'I'),(b'E', b'K'),(b'E', b'L'),(b'E', b'M'),(b'E', b'N'),(b'E', b'P'),(b'E', b'Q'),(b'E', b'R'),(b'E', b'S'),(b'E', b'T'),(b'E', b'V'),(b'E', b'W'),(b'E', b'Y'),(b'E', b'*'),(b'F', b'A'),(b'F', b'C'),(b'F', b'D'),(b'F', b'E'),(b'F', b'F'),(b'F', b'G'),(b'F', b'H'),\             # <<<<<<<<<<<<<<
 *     (b'F', b'I'),(b'F', b'K'),(b'F', b'L'),(b'F', b'M'),(b'F', b'N'),(b'F', b'P'),(b'F', b'Q'),(b'F', b'R'),(b'F', b'S'),(b'F', b'T'),(b'F', b'V'),(b'F', b'W'),(b'F', b'Y'),(b'F', b'*'),(b'G', b'A'),(b'G', b'C'),(b'G', b'D'),(b'G', b'E'),(b'G', b'F'),(b'G', b'G'),(b'G', b'H'),(b'G', b'I'),(b'G', b'K'),(b'G', b'L'),(b'G', b'M'),(b'G', b'N'),(b'G', b'P'),(b'G', b'Q'),(b'G', b'R'),(b'G', b'S'),(b'G', b'T'),(b'G', b'V'),(b'G', b'W'),(b'G', b'Y'),(b'G', b'*'),(b'H', b'A'),(b'H', b'C'),(b'H', b'D'),(b'H', b'E'),(b'H', b'F'),(b'H', b'G'),(b'H', b'H'),(b'H', b'I'),(b'H', b'K'),(b'H', b'L'),(b'H', b'M'),(b'H', b'N'),(b'H', b'P'),(b'H', b'Q'),(b'H', b'R'),(b'H', b'S'),(b'H', b'T'),(b'H', b'V'),(b'H', b'W'),(b'H', b'Y'),(b'H', b'*'),(b'I', b'A'),(b'I', b'C'),(b'I', b'D'),(b'I', b'E'),(b'I', b'F'),(b'I', b'G'),(b'I', b'H'),(b'I', b'I'),(b'I', b'K'),(b'I', b'L'),(b'I', b'M'),(b'I', b'N'),(b'I', b'P'),(b'I', b'Q'),(b'I', b'R'),(b'I', b'S'),(b'I', b'T'),(b'I', b'V'),(b'I', b'W'),(b'I', b'Y'),(b'I', b'*'),(b'K', b'A'),(b'K', b'C'),(b'K', b'D'),(b'K', b'E'),(b'K', b'F'),(b'K', b'G'),(b'K', b'H'),(b'K', b'I'),(b'K', b'K'),(b'K', b'L'),(b'K', b'M'),(b'K', b'N'),(b'K', b'P'),(b'K', b'Q'),\
 *     (b'K', b'R'),(b'K', b'S'),(b'K', b'T'),(b'K', b'V'),(b'K', b'W'),(b'K', b'Y'),(b'K', b'*'),(b'L', b'A'),(b'L', b'C'),(b'L', b'D'),(b'L', b'E'),(b'L', b'F'),(b'L', b'G'),(b'L', b'H'),(b'L', b'I'),(b'L', b'K'),(b'L', b'L'),(b'L', b'M'),(b'L', b'N'),(b'L', b'P'),(b'L', b'Q'),(b'L', b'R'),(b'L', b'S'),(b'L', b'T'),(b'L', b'V'),(b'L', b'W'),(b'L', b'Y'),(b'L', b'*'),(b'M', b'A'),(b'M', b'C'),(b'M', b'D'),(b'M', b'E'),(b'M', b'F'),(b'M', b'G'),(b'M', b'H'),(b'M', b'I'),(b'M', b'K'),(b'M', b'L'),(b'M', b'M'),(b'M', b'N'),(b'M', b'P'),(b'M', b'Q'),(b'M', b'R'),(b'M', b'S'),(b'M', b'T'),(b'M', b'V'),(b'M', b'W'),(b'M', b'Y'),(b'M', b'*'),(b'N', b'A'),(b'N', b'C'),(b'N', b'D'),(b'N', b'E'),(b'N', b'F'),(b'N', b'G'),(b'N', b'H'),(b'N', b'I'),(b'N', b'K'),(b'N', b'L'),(b'N', b'M'),(b'N', b'N'),(b'N', b'P'),(b'N', b'Q'),(b'N', b'R'),(b'N', b'S'),(b'N', b'T'),(b'N', b'V'),(b'N', b'W'),(b'N', b'Y'),(b'N', b'*'),(b'P', b'A'),(b'P', b'C'),(b'P', b'D'),(b'P', b'E'),(b'P', b'F'),(b'P', b'G'),(b'P', b'H'),(b'P', b'I'),(b'P', b'K'),(b'P', b'L'),(b'P', b'M'),(b'P', b'N'),(b'P', b'P'),(b'P', b'Q'),(b'P', b'R'),(b'P', b'S'),(b'P', b'T'),(b'P', b'V'),(b'P', b'W'),(b'P', b'Y'),(b'P', b'*'),(b'Q', b'A'),(b'Q', b'C'),(b'Q', b'D'),(b'Q', b'E'),(b'Q', b'F'),(b'Q', b'G'),(b'Q', b'H'),(b'Q', b'I'),(b'Q', b'K'),(b'Q', b'L'),(b'Q', b'M'),(b'Q', b'N'),(b'Q', b'P'),(b'Q', b'Q'),(b'Q', b'R'),(b'Q', b'S'),(b'Q', b'T'),(b'Q', b'V'),(b'Q', b'W'),(b'Q', b'Y'),(b'Q', b'*'),(b'R', b'A'),(b'R', b'C'),(b'R', b'D'),(b'R', b'E'),(b'R', b'F'),(b'R', b'G'),(b'R', b'H'),(b'R', b'I'),(b'R', b'K'),(b'R', b'L'),(b'R', b'M'),(b'R', b'N'),(b'R', b'P'),(b'R', b'Q'),(b'R', b'R'),(b'R', b'S'),(b'R', b'T'),(b'R', b'V'),(b'R', b'W'),(b'R', b'Y'),(b'R', b'*'),(b'S', b'A'),(b'S', b'C'),(b'S', b'D'),(b'S', b'E'),(b'S', b'F'),(b'S', b'G'),(b'S', b'H'),(b'S', b'I'),(b'S', b'K'),(b'S', b'L'),(b'S', b'M'),(b'S', b'N'),(b'S', b'P'),(b'S', b'Q'),(b'S', b'R'),(b'S', b'S'),(b'S', b'T'),(b'S', b'V'),(b'S', b'W'),(b'S', b'Y'),(b'S', b'*'),(b'T', b'A'),(b'T', b'C'),(b'T', b'D'),(b'T', b'E'),(b'T', b'F'),(b'T', b'G'),(b'T', b'H'),(b'T', b'I'),(b'T', b'K'),(b'T', b'L'),(b'T', b'M'),(b'T', b'N'),(b'T', b'P'),(b'T', b'Q'),(b'T', b'R'),(b'T', b'S'),(b'T', b'T'),(b'T', b'V'),(b'T', b'W'),(b'T', b'Y'),(b'T', b'*'),(b'V', b'A'),(b'V', b'C'),(b'V', b'D'),(b'V', b'E'),(b'V', b'F'),(b'V', b'G'),(b'V', b'H'),(b'V', b'I'),(b'V', b'K'),(b'V', b'L'),(b'V', b'M'),(b'V', b'N'),(b'V', b'P'),(b'V', b'Q'),(b'V', b'R'),(b'V', b'S'),(b'V', b'T'),(b'V', b'V'),(b'V', b'W'),(b'V', b'Y'),(b'V', b'*'),(b'W', b'A'),(b'W', b'C'),(b'W', b'D'),(b'W', b'E'),(b'W', b'F'),(b'W', b'G'),(b'W', b'H'),(b'W', b'I'),(b'W', b'K'),(b'W', b'L'),(b'W', b'M'),(b'W', b'N'),(b'W', b'P'),(b'W', b'Q'),(b'W', b'R'),(b'W', b'S'),(b'W', b'T'),(b'W', b'V'),(b'W', b'W'),(b'W', b'Y'),(b'W', b'*'),(b'Y', b'A'),(b'Y', b'C'),(b'Y', b'D'),(b'Y', b'E'),(b'Y', b'F'),(b'Y', b'G'),(b'Y', b'H'),(b'Y', b'I'),(b'Y', b'K'),(b'Y', b'L'),(b'Y', b'M'),(b'Y', b'N'),(b'Y', b'P'),(b'Y', b'Q'),(b'Y', b'R'),(b'Y', b'S'),(b'Y', b'T'),(b'Y', b'V'),(b'Y', b'W'),(b'Y', b'Y'),(b'Y', b'*'),(b'*', b'A'),(b'*', b'C'),(b'*', b'D'),(b'*', b'E'),(b'*', b'F'),(b'*', b'G'),(b'*', b'H'),(b'*', b'I'),(b'*', b'K'),(b'*', b'L'),(b'*', b'M'),(b'*', b'N'),(b'*', b'P'),(b'*', b'Q'),(b'*', b'R'),(b'*', b'S'),(b'*', b'T'),(b'*', b'V'),(b'*', b'W'),(b'*', b'Y'),(b'*', b'*')]
 */
  __pyx_tuple__2 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_A); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  __pyx_tuple__3 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_C); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __pyx_tuple__4 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_D); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __pyx_tuple__5 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_E); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_F); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_tuple__7 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_G); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_tuple__8 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_H); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_tuple__9 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_I); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_tuple__10 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_K); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_tuple__11 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_L); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_tuple__12 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_M); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_tuple__13 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_N); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_tuple__14 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_P); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_tuple__15 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_R); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_tuple__17 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_S); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_T); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_V); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_tuple__20 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_W); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_tuple__22 = PyTuple_Pack(2, __pyx_n_b_A, __pyx_kp_b_); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_A); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_C); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_tuple__25 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_D); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_E); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_tuple__27 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_F); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_tuple__28 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_G); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_tuple__29 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_H); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_tuple__30 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_I); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_tuple__31 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_K); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_tuple__32 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_L); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_tuple__33 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_M); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_tuple__34 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_N); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_tuple__35 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_P); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_tuple__36 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_tuple__37 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_R); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_tuple__38 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_S); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_tuple__39 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_T); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_tuple__40 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_V); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_tuple__41 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_W); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_tuple__42 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_tuple__43 = PyTuple_Pack(2, __pyx_n_b_C, __pyx_kp_b_); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_tuple__44 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_A); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_tuple__45 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_C); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_tuple__46 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_D); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_tuple__47 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_E); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_tuple__48 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_F); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_tuple__49 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_G); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_tuple__50 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_H); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_tuple__51 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_I); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_tuple__52 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_K); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_tuple__53 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_L); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_tuple__54 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_M); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_tuple__55 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_N); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_tuple__56 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_P); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_tuple__57 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_tuple__58 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_R); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_tuple__59 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_S); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_tuple__60 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_T); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_tuple__61 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_V); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_tuple__62 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_W); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_tuple__63 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_tuple__64 = PyTuple_Pack(2, __pyx_n_b_D, __pyx_kp_b_); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_tuple__65 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_A); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_tuple__66 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_C); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_tuple__67 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_D); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_tuple__68 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_E); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_tuple__69 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_F); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_tuple__70 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_G); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_tuple__71 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_H); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_tuple__72 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_I); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_tuple__73 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_K); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_tuple__74 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_L); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_tuple__75 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_M); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_tuple__76 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_N); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_tuple__77 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_P); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_tuple__78 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_tuple__79 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_R); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_tuple__80 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_S); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_tuple__81 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_T); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_tuple__82 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_V); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_tuple__83 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_W); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_tuple__84 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_tuple__85 = PyTuple_Pack(2, __pyx_n_b_E, __pyx_kp_b_); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_tuple__86 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_A); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_tuple__87 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_C); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_tuple__88 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_D); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_tuple__89 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_E); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_tuple__90 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_F); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_tuple__91 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_G); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_tuple__92 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_H); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);

  /* "c_ORFscores.pyx":20
 * DIAMINO_LETTERS = [\
 *     (b'A', b'A'),(b'A', b'C'),(b'A', b'D'),(b'A', b'E'),(b'A', b'F'),(b'A', b'G'),(b'A', b'H'),(b'A', b'I'),(b'A', b'K'),(b'A', b'L'),(b'A', b'M'),(b'A', b'N'),(b'A', b'P'),(b'A', b'Q'),(b'A', b'R'),(b'A', b'S'),(b'A', b'T'),(b'A', b'V'),(b'A', b'W'),(b'A', b'Y'),(b'A', b'*'),(b'C', b'A'),(b'C', b'C'),(b'C', b'D'),(b'C', b'E'),(b'C', b'F'),(b'C', b'G'),(b'C', b'H'),(b'C', b'I'),(b'C', b'K'),(b'C', b'L'),(b'C', b'M'),(b'C', b'N'),(b'C', b'P'),(b'C', b'Q'),(b'C', b'R'),(b'C', b'S'),(b'C', b'T'),(b'C', b'V'),(b'C', b'W'),(b'C', b'Y'),(b'C', b'*'),(b'D', b'A'),(b'D', b'C'),(b'D', b'D'),(b'D', b'E'),(b'D', b'F'),(b'D', b'G'),(b'D', b'H'),(b'D', b'I'),(b'D', b'K'),(b'D', b'L'),(b'D', b'M'),(b'D', b'N'),(b'D', b'P'),(b'D', b'Q'),(b'D', b'R'),(b'D', b'S'),(b'D', b'T'),(b'D', b'V'),(b'D', b'W'),(b'D', b'Y'),(b'D', b'*'),(b'E', b'A'),(b'E', b'C'),(b'E', b'D'),(b'E', b'E'),(b'E', b'F'),(b'E', b'G'),(b'E', b'H'),(b'E', b'I'),(b'E', b'K'),(b'E', b'L'),(b'E', b'M'),(b'E', b'N'),(b'E', b'P'),(b'E', b'Q'),(b'E', b'R'),(b'E', b'S'),(b'E', b'T'),(b'E', b'V'),(b'E', b'W'),(b'E', b'Y'),(b'E', b'*'),(b'F', b'A'),(b'F', b'C'),(b'F', b'D'),(b'F', b'E'),(b'F', b'F'),(b'F', b'G'),(b'F', b'H'),\
 *     (b'F', b'I'),(b'F', b'K'),(b'F', b'L'),(b'F', b'M'),(b'F', b'N'),(b'F', b'P'),(b'F', b'Q'),(b'F', b'R'),(b'F', b'S'),(b'F', b'T'),(b'F', b'V'),(b'F', b'W'),(b'F', b'Y'),(b'F', b'*'),(b'G', b'A'),(b'G', b'C'),(b'G', b'D'),(b'G', b'E'),(b'G', b'F'),(b'G', b'G'),(b'G', b'H'),(b'G', b'I'),(b'G', b'K'),(b'G', b'L'),(b'G', b'M'),(b'G', b'N'),(b'G', b'P'),(b'G', b'Q'),(b'G', b'R'),(b'G', b'S'),(b'G', b'T'),(b'G', b'V'),(b'G', b'W'),(b'G', b'Y'),(b'G', b'*'),(b'H', b'A'),(b'H', b'C'),(b'H', b'D'),(b'H', b'E'),(b'H', b'F'),(b'H', b'G'),(b'H', b'H'),(b'H', b'I'),(b'H', b'K'),(b'H', b'L'),(b'H', b'M'),(b'H', b'N'),(b'H', b'P'),(b'H', b'Q'),(b'H', b'R'),(b'H', b'S'),(b'H', b'T'),(b'H', b'V'),(b'H', b'W'),(b'H', b'Y'),(b'H', b'*'),(b'I', b'A'),(b'I', b'C'),(b'I', b'D'),(b'I', b'E'),(b'I', b'F'),(b'I', b'G'),(b'I', b'H'),(b'I', b'I'),(b'I', b'K'),(b'I', b'L'),(b'I', b'M'),(b'I', b'N'),(b'I', b'P'),(b'I', b'Q'),(b'I', b'R'),(b'I', b'S'),(b'I', b'T'),(b'I', b'V'),(b'I', b'W'),(b'I', b'Y'),(b'I', b'*'),(b'K', b'A'),(b'K', b'C'),(b'K', b'D'),(b'K', b'E'),(b'K', b'F'),(b'K', b'G'),(b'K', b'H'),(b'K', b'I'),(b'K', b'K'),(b'K', b'L'),(b'K', b'M'),(b'K', b'N'),(b'K', b'P'),(b'K', b'Q'),\             # <<<<<<<<<<<<<<
 *     (b'K', b'R'),(b'K', b'S'),(b'K', b'T'),(b'K', b'V'),(b'K', b'W'),(b'K', b'Y'),(b'K', b'*'),(b'L', b'A'),(b'L', b'C'),(b'L', b'D'),(b'L', b'E'),(b'L', b'F'),(b'L', b'G'),(b'L', b'H'),(b'L', b'I'),(b'L', b'K'),(b'L', b'L'),(b'L', b'M'),(b'L', b'N'),(b'L', b'P'),(b'L', b'Q'),(b'L', b'R'),(b'L', b'S'),(b'L', b'T'),(b'L', b'V'),(b'L', b'W'),(b'L', b'Y'),(b'L', b'*'),(b'M', b'A'),(b'M', b'C'),(b'M', b'D'),(b'M', b'E'),(b'M', b'F'),(b'M', b'G'),(b'M', b'H'),(b'M', b'I'),(b'M', b'K'),(b'M', b'L'),(b'M', b'M'),(b'M', b'N'),(b'M', b'P'),(b'M', b'Q'),(b'M', b'R'),(b'M', b'S'),(b'M', b'T'),(b'M', b'V'),(b'M', b'W'),(b'M', b'Y'),(b'M', b'*'),(b'N', b'A'),(b'N', b'C'),(b'N', b'D'),(b'N', b'E'),(b'N', b'F'),(b'N', b'G'),(b'N', b'H'),(b'N', b'I'),(b'N', b'K'),(b'N', b'L'),(b'N', b'M'),(b'N', b'N'),(b'N', b'P'),(b'N', b'Q'),(b'N', b'R'),(b'N', b'S'),(b'N', b'T'),(b'N', b'V'),(b'N', b'W'),(b'N', b'Y'),(b'N', b'*'),(b'P', b'A'),(b'P', b'C'),(b'P', b'D'),(b'P', b'E'),(b'P', b'F'),(b'P', b'G'),(b'P', b'H'),(b'P', b'I'),(b'P', b'K'),(b'P', b'L'),(b'P', b'M'),(b'P', b'N'),(b'P', b'P'),(b'P', b'Q'),(b'P', b'R'),(b'P', b'S'),(b'P', b'T'),(b'P', b'V'),(b'P', b'W'),(b'P', b'Y'),(b'P', b'*'),(b'Q', b'A'),(b'Q', b'C'),(b'Q', b'D'),(b'Q', b'E'),(b'Q', b'F'),(b'Q', b'G'),(b'Q', b'H'),(b'Q', b'I'),(b'Q', b'K'),(b'Q', b'L'),(b'Q', b'M'),(b'Q', b'N'),(b'Q', b'P'),(b'Q', b'Q'),(b'Q', b'R'),(b'Q', b'S'),(b'Q', b'T'),(b'Q', b'V'),(b'Q', b'W'),(b'Q', b'Y'),(b'Q', b'*'),(b'R', b'A'),(b'R', b'C'),(b'R', b'D'),(b'R', b'E'),(b'R', b'F'),(b'R', b'G'),(b'R', b'H'),(b'R', b'I'),(b'R', b'K'),(b'R', b'L'),(b'R', b'M'),(b'R', b'N'),(b'R', b'P'),(b'R', b'Q'),(b'R', b'R'),(b'R', b'S'),(b'R', b'T'),(b'R', b'V'),(b'R', b'W'),(b'R', b'Y'),(b'R', b'*'),(b'S', b'A'),(b'S', b'C'),(b'S', b'D'),(b'S', b'E'),(b'S', b'F'),(b'S', b'G'),(b'S', b'H'),(b'S', b'I'),(b'S', b'K'),(b'S', b'L'),(b'S', b'M'),(b'S', b'N'),(b'S', b'P'),(b'S', b'Q'),(b'S', b'R'),(b'S', b'S'),(b'S', b'T'),(b'S', b'V'),(b'S', b'W'),(b'S', b'Y'),(b'S', b'*'),(b'T', b'A'),(b'T', b'C'),(b'T', b'D'),(b'T', b'E'),(b'T', b'F'),(b'T', b'G'),(b'T', b'H'),(b'T', b'I'),(b'T', b'K'),(b'T', b'L'),(b'T', b'M'),(b'T', b'N'),(b'T', b'P'),(b'T', b'Q'),(b'T', b'R'),(b'T', b'S'),(b'T', b'T'),(b'T', b'V'),(b'T', b'W'),(b'T', b'Y'),(b'T', b'*'),(b'V', b'A'),(b'V', b'C'),(b'V', b'D'),(b'V', b'E'),(b'V', b'F'),(b'V', b'G'),(b'V', b'H'),(b'V', b'I'),(b'V', b'K'),(b'V', b'L'),(b'V', b'M'),(b'V', b'N'),(b'V', b'P'),(b'V', b'Q'),(b'V', b'R'),(b'V', b'S'),(b'V', b'T'),(b'V', b'V'),(b'V', b'W'),(b'V', b'Y'),(b'V', b'*'),(b'W', b'A'),(b'W', b'C'),(b'W', b'D'),(b'W', b'E'),(b'W', b'F'),(b'W', b'G'),(b'W', b'H'),(b'W', b'I'),(b'W', b'K'),(b'W', b'L'),(b'W', b'M'),(b'W', b'N'),(b'W', b'P'),(b'W', b'Q'),(b'W', b'R'),(b'W', b'S'),(b'W', b'T'),(b'W', b'V'),(b'W', b'W'),(b'W', b'Y'),(b'W', b'*'),(b'Y', b'A'),(b'Y', b'C'),(b'Y', b'D'),(b'Y', b'E'),(b'Y', b'F'),(b'Y', b'G'),(b'Y', b'H'),(b'Y', b'I'),(b'Y', b'K'),(b'Y', b'L'),(b'Y', b'M'),(b'Y', b'N'),(b'Y', b'P'),(b'Y', b'Q'),(b'Y', b'R'),(b'Y', b'S'),(b'Y', b'T'),(b'Y', b'V'),(b'Y', b'W'),(b'Y', b'Y'),(b'Y', b'*'),(b'*', b'A'),(b'*', b'C'),(b'*', b'D'),(b'*', b'E'),(b'*', b'F'),(b'*', b'G'),(b'*', b'H'),(b'*', b'I'),(b'*', b'K'),(b'*', b'L'),(b'*', b'M'),(b'*', b'N'),(b'*', b'P'),(b'*', b'Q'),(b'*', b'R'),(b'*', b'S'),(b'*', b'T'),(b'*', b'V'),(b'*', b'W'),(b'*', b'Y'),(b'*', b'*')]
 * 
 */
  __pyx_tuple__93 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_I); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_tuple__94 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_K); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_tuple__95 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_L); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);
  __pyx_tuple__96 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_M); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_tuple__97 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_N); if (unlikely(!__pyx_tuple__97)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);
  __pyx_tuple__98 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_P); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_tuple__99 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__99)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);
  __pyx_tuple__100 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_R); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_tuple__101 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_S); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);
  __pyx_tuple__102 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_T); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_tuple__103 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_V); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);
  __pyx_tuple__104 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_W); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_tuple__105 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);
  __pyx_tuple__106 = PyTuple_Pack(2, __pyx_n_b_F, __pyx_kp_b_); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_tuple__107 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_A); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);
  __pyx_tuple__108 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_C); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_tuple__109 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_D); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);
  __pyx_tuple__110 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_E); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_tuple__111 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_F); if (unlikely(!__pyx_tuple__111)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);
  __pyx_tuple__112 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_G); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_tuple__113 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_H); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);
  __pyx_tuple__114 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_I); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __pyx_tuple__115 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_K); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);
  __pyx_tuple__116 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_L); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __pyx_tuple__117 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_M); if (unlikely(!__pyx_tuple__117)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);
  __pyx_tuple__118 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_N); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __pyx_tuple__119 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_P); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);
  __pyx_tuple__120 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_tuple__121 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_R); if (unlikely(!__pyx_tuple__121)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);
  __pyx_tuple__122 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_S); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __pyx_tuple__123 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_T); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);
  __pyx_tuple__124 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_V); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  __pyx_tuple__125 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_W); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);
  __pyx_tuple__126 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_tuple__127 = PyTuple_Pack(2, __pyx_n_b_G, __pyx_kp_b_); if (unlikely(!__pyx_tuple__127)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);
  __pyx_tuple__128 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_A); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_tuple__129 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_C); if (unlikely(!__pyx_tuple__129)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);
  __pyx_tuple__130 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_D); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  __pyx_tuple__131 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_E); if (unlikely(!__pyx_tuple__131)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);
  __pyx_tuple__132 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_F); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);
  __pyx_tuple__133 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_G); if (unlikely(!__pyx_tuple__133)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);
  __pyx_tuple__134 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_H); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);
  __pyx_tuple__135 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_I); if (unlikely(!__pyx_tuple__135)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__135);
  __Pyx_GIVEREF(__pyx_tuple__135);
  __pyx_tuple__136 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_K); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);
  __pyx_tuple__137 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_L); if (unlikely(!__pyx_tuple__137)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__137);
  __Pyx_GIVEREF(__pyx_tuple__137);
  __pyx_tuple__138 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_M); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);
  __pyx_tuple__139 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_N); if (unlikely(!__pyx_tuple__139)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__139);
  __Pyx_GIVEREF(__pyx_tuple__139);
  __pyx_tuple__140 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_P); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);
  __pyx_tuple__141 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__141)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__141);
  __Pyx_GIVEREF(__pyx_tuple__141);
  __pyx_tuple__142 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_R); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);
  __pyx_tuple__143 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_S); if (unlikely(!__pyx_tuple__143)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__143);
  __Pyx_GIVEREF(__pyx_tuple__143);
  __pyx_tuple__144 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_T); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);
  __pyx_tuple__145 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_V); if (unlikely(!__pyx_tuple__145)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);
  __pyx_tuple__146 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_W); if (unlikely(!__pyx_tuple__146)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);
  __pyx_tuple__147 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__147)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__147);
  __Pyx_GIVEREF(__pyx_tuple__147);
  __pyx_tuple__148 = PyTuple_Pack(2, __pyx_n_b_H, __pyx_kp_b_); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);
  __pyx_tuple__149 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_A); if (unlikely(!__pyx_tuple__149)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__149);
  __Pyx_GIVEREF(__pyx_tuple__149);
  __pyx_tuple__150 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_C); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);
  __pyx_tuple__151 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_D); if (unlikely(!__pyx_tuple__151)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__151);
  __Pyx_GIVEREF(__pyx_tuple__151);
  __pyx_tuple__152 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_E); if (unlikely(!__pyx_tuple__152)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);
  __pyx_tuple__153 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_F); if (unlikely(!__pyx_tuple__153)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);
  __pyx_tuple__154 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_G); if (unlikely(!__pyx_tuple__154)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__154);
  __Pyx_GIVEREF(__pyx_tuple__154);
  __pyx_tuple__155 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_H); if (unlikely(!__pyx_tuple__155)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);
  __pyx_tuple__156 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_I); if (unlikely(!__pyx_tuple__156)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__156);
  __Pyx_GIVEREF(__pyx_tuple__156);
  __pyx_tuple__157 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_K); if (unlikely(!__pyx_tuple__157)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);
  __pyx_tuple__158 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_L); if (unlikely(!__pyx_tuple__158)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__158);
  __Pyx_GIVEREF(__pyx_tuple__158);
  __pyx_tuple__159 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_M); if (unlikely(!__pyx_tuple__159)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__159);
  __Pyx_GIVEREF(__pyx_tuple__159);
  __pyx_tuple__160 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_N); if (unlikely(!__pyx_tuple__160)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__160);
  __Pyx_GIVEREF(__pyx_tuple__160);
  __pyx_tuple__161 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_P); if (unlikely(!__pyx_tuple__161)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);
  __pyx_tuple__162 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__162)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__162);
  __Pyx_GIVEREF(__pyx_tuple__162);
  __pyx_tuple__163 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_R); if (unlikely(!__pyx_tuple__163)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);
  __pyx_tuple__164 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_S); if (unlikely(!__pyx_tuple__164)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__164);
  __Pyx_GIVEREF(__pyx_tuple__164);
  __pyx_tuple__165 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_T); if (unlikely(!__pyx_tuple__165)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);
  __pyx_tuple__166 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_V); if (unlikely(!__pyx_tuple__166)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__166);
  __Pyx_GIVEREF(__pyx_tuple__166);
  __pyx_tuple__167 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_W); if (unlikely(!__pyx_tuple__167)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__167);
  __Pyx_GIVEREF(__pyx_tuple__167);
  __pyx_tuple__168 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__168)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__168);
  __Pyx_GIVEREF(__pyx_tuple__168);
  __pyx_tuple__169 = PyTuple_Pack(2, __pyx_n_b_I, __pyx_kp_b_); if (unlikely(!__pyx_tuple__169)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__169);
  __Pyx_GIVEREF(__pyx_tuple__169);
  __pyx_tuple__170 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_A); if (unlikely(!__pyx_tuple__170)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__170);
  __Pyx_GIVEREF(__pyx_tuple__170);
  __pyx_tuple__171 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_C); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);
  __pyx_tuple__172 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_D); if (unlikely(!__pyx_tuple__172)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__172);
  __Pyx_GIVEREF(__pyx_tuple__172);
  __pyx_tuple__173 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_E); if (unlikely(!__pyx_tuple__173)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);
  __pyx_tuple__174 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_F); if (unlikely(!__pyx_tuple__174)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__174);
  __Pyx_GIVEREF(__pyx_tuple__174);
  __pyx_tuple__175 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_G); if (unlikely(!__pyx_tuple__175)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);
  __pyx_tuple__176 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_H); if (unlikely(!__pyx_tuple__176)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__176);
  __Pyx_GIVEREF(__pyx_tuple__176);
  __pyx_tuple__177 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_I); if (unlikely(!__pyx_tuple__177)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__177);
  __Pyx_GIVEREF(__pyx_tuple__177);
  __pyx_tuple__178 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_K); if (unlikely(!__pyx_tuple__178)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__178);
  __Pyx_GIVEREF(__pyx_tuple__178);
  __pyx_tuple__179 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_L); if (unlikely(!__pyx_tuple__179)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__179);
  __Pyx_GIVEREF(__pyx_tuple__179);
  __pyx_tuple__180 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_M); if (unlikely(!__pyx_tuple__180)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__180);
  __Pyx_GIVEREF(__pyx_tuple__180);
  __pyx_tuple__181 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_N); if (unlikely(!__pyx_tuple__181)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__181);
  __Pyx_GIVEREF(__pyx_tuple__181);
  __pyx_tuple__182 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_P); if (unlikely(!__pyx_tuple__182)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__182);
  __Pyx_GIVEREF(__pyx_tuple__182);
  __pyx_tuple__183 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__183)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__183);
  __Pyx_GIVEREF(__pyx_tuple__183);

  /* "c_ORFscores.pyx":21
 *     (b'A', b'A'),(b'A', b'C'),(b'A', b'D'),(b'A', b'E'),(b'A', b'F'),(b'A', b'G'),(b'A', b'H'),(b'A', b'I'),(b'A', b'K'),(b'A', b'L'),(b'A', b'M'),(b'A', b'N'),(b'A', b'P'),(b'A', b'Q'),(b'A', b'R'),(b'A', b'S'),(b'A', b'T'),(b'A', b'V'),(b'A', b'W'),(b'A', b'Y'),(b'A', b'*'),(b'C', b'A'),(b'C', b'C'),(b'C', b'D'),(b'C', b'E'),(b'C', b'F'),(b'C', b'G'),(b'C', b'H'),(b'C', b'I'),(b'C', b'K'),(b'C', b'L'),(b'C', b'M'),(b'C', b'N'),(b'C', b'P'),(b'C', b'Q'),(b'C', b'R'),(b'C', b'S'),(b'C', b'T'),(b'C', b'V'),(b'C', b'W'),(b'C', b'Y'),(b'C', b'*'),(b'D', b'A'),(b'D', b'C'),(b'D', b'D'),(b'D', b'E'),(b'D', b'F'),(b'D', b'G'),(b'D', b'H'),(b'D', b'I'),(b'D', b'K'),(b'D', b'L'),(b'D', b'M'),(b'D', b'N'),(b'D', b'P'),(b'D', b'Q'),(b'D', b'R'),(b'D', b'S'),(b'D', b'T'),(b'D', b'V'),(b'D', b'W'),(b'D', b'Y'),(b'D', b'*'),(b'E', b'A'),(b'E', b'C'),(b'E', b'D'),(b'E', b'E'),(b'E', b'F'),(b'E', b'G'),(b'E', b'H'),(b'E', b'I'),(b'E', b'K'),(b'E', b'L'),(b'E', b'M'),(b'E', b'N'),(b'E', b'P'),(b'E', b'Q'),(b'E', b'R'),(b'E', b'S'),(b'E', b'T'),(b'E', b'V'),(b'E', b'W'),(b'E', b'Y'),(b'E', b'*'),(b'F', b'A'),(b'F', b'C'),(b'F', b'D'),(b'F', b'E'),(b'F', b'F'),(b'F', b'G'),(b'F', b'H'),\
 *     (b'F', b'I'),(b'F', b'K'),(b'F', b'L'),(b'F', b'M'),(b'F', b'N'),(b'F', b'P'),(b'F', b'Q'),(b'F', b'R'),(b'F', b'S'),(b'F', b'T'),(b'F', b'V'),(b'F', b'W'),(b'F', b'Y'),(b'F', b'*'),(b'G', b'A'),(b'G', b'C'),(b'G', b'D'),(b'G', b'E'),(b'G', b'F'),(b'G', b'G'),(b'G', b'H'),(b'G', b'I'),(b'G', b'K'),(b'G', b'L'),(b'G', b'M'),(b'G', b'N'),(b'G', b'P'),(b'G', b'Q'),(b'G', b'R'),(b'G', b'S'),(b'G', b'T'),(b'G', b'V'),(b'G', b'W'),(b'G', b'Y'),(b'G', b'*'),(b'H', b'A'),(b'H', b'C'),(b'H', b'D'),(b'H', b'E'),(b'H', b'F'),(b'H', b'G'),(b'H', b'H'),(b'H', b'I'),(b'H', b'K'),(b'H', b'L'),(b'H', b'M'),(b'H', b'N'),(b'H', b'P'),(b'H', b'Q'),(b'H', b'R'),(b'H', b'S'),(b'H', b'T'),(b'H', b'V'),(b'H', b'W'),(b'H', b'Y'),(b'H', b'*'),(b'I', b'A'),(b'I', b'C'),(b'I', b'D'),(b'I', b'E'),(b'I', b'F'),(b'I', b'G'),(b'I', b'H'),(b'I', b'I'),(b'I', b'K'),(b'I', b'L'),(b'I', b'M'),(b'I', b'N'),(b'I', b'P'),(b'I', b'Q'),(b'I', b'R'),(b'I', b'S'),(b'I', b'T'),(b'I', b'V'),(b'I', b'W'),(b'I', b'Y'),(b'I', b'*'),(b'K', b'A'),(b'K', b'C'),(b'K', b'D'),(b'K', b'E'),(b'K', b'F'),(b'K', b'G'),(b'K', b'H'),(b'K', b'I'),(b'K', b'K'),(b'K', b'L'),(b'K', b'M'),(b'K', b'N'),(b'K', b'P'),(b'K', b'Q'),\
 *     (b'K', b'R'),(b'K', b'S'),(b'K', b'T'),(b'K', b'V'),(b'K', b'W'),(b'K', b'Y'),(b'K', b'*'),(b'L', b'A'),(b'L', b'C'),(b'L', b'D'),(b'L', b'E'),(b'L', b'F'),(b'L', b'G'),(b'L', b'H'),(b'L', b'I'),(b'L', b'K'),(b'L', b'L'),(b'L', b'M'),(b'L', b'N'),(b'L', b'P'),(b'L', b'Q'),(b'L', b'R'),(b'L', b'S'),(b'L', b'T'),(b'L', b'V'),(b'L', b'W'),(b'L', b'Y'),(b'L', b'*'),(b'M', b'A'),(b'M', b'C'),(b'M', b'D'),(b'M', b'E'),(b'M', b'F'),(b'M', b'G'),(b'M', b'H'),(b'M', b'I'),(b'M', b'K'),(b'M', b'L'),(b'M', b'M'),(b'M', b'N'),(b'M', b'P'),(b'M', b'Q'),(b'M', b'R'),(b'M', b'S'),(b'M', b'T'),(b'M', b'V'),(b'M', b'W'),(b'M', b'Y'),(b'M', b'*'),(b'N', b'A'),(b'N', b'C'),(b'N', b'D'),(b'N', b'E'),(b'N', b'F'),(b'N', b'G'),(b'N', b'H'),(b'N', b'I'),(b'N', b'K'),(b'N', b'L'),(b'N', b'M'),(b'N', b'N'),(b'N', b'P'),(b'N', b'Q'),(b'N', b'R'),(b'N', b'S'),(b'N', b'T'),(b'N', b'V'),(b'N', b'W'),(b'N', b'Y'),(b'N', b'*'),(b'P', b'A'),(b'P', b'C'),(b'P', b'D'),(b'P', b'E'),(b'P', b'F'),(b'P', b'G'),(b'P', b'H'),(b'P', b'I'),(b'P', b'K'),(b'P', b'L'),(b'P', b'M'),(b'P', b'N'),(b'P', b'P'),(b'P', b'Q'),(b'P', b'R'),(b'P', b'S'),(b'P', b'T'),(b'P', b'V'),(b'P', b'W'),(b'P', b'Y'),(b'P', b'*'),(b'Q', b'A'),(b'Q', b'C'),(b'Q', b'D'),(b'Q', b'E'),(b'Q', b'F'),(b'Q', b'G'),(b'Q', b'H'),(b'Q', b'I'),(b'Q', b'K'),(b'Q', b'L'),(b'Q', b'M'),(b'Q', b'N'),(b'Q', b'P'),(b'Q', b'Q'),(b'Q', b'R'),(b'Q', b'S'),(b'Q', b'T'),(b'Q', b'V'),(b'Q', b'W'),(b'Q', b'Y'),(b'Q', b'*'),(b'R', b'A'),(b'R', b'C'),(b'R', b'D'),(b'R', b'E'),(b'R', b'F'),(b'R', b'G'),(b'R', b'H'),(b'R', b'I'),(b'R', b'K'),(b'R', b'L'),(b'R', b'M'),(b'R', b'N'),(b'R', b'P'),(b'R', b'Q'),(b'R', b'R'),(b'R', b'S'),(b'R', b'T'),(b'R', b'V'),(b'R', b'W'),(b'R', b'Y'),(b'R', b'*'),(b'S', b'A'),(b'S', b'C'),(b'S', b'D'),(b'S', b'E'),(b'S', b'F'),(b'S', b'G'),(b'S', b'H'),(b'S', b'I'),(b'S', b'K'),(b'S', b'L'),(b'S', b'M'),(b'S', b'N'),(b'S', b'P'),(b'S', b'Q'),(b'S', b'R'),(b'S', b'S'),(b'S', b'T'),(b'S', b'V'),(b'S', b'W'),(b'S', b'Y'),(b'S', b'*'),(b'T', b'A'),(b'T', b'C'),(b'T', b'D'),(b'T', b'E'),(b'T', b'F'),(b'T', b'G'),(b'T', b'H'),(b'T', b'I'),(b'T', b'K'),(b'T', b'L'),(b'T', b'M'),(b'T', b'N'),(b'T', b'P'),(b'T', b'Q'),(b'T', b'R'),(b'T', b'S'),(b'T', b'T'),(b'T', b'V'),(b'T', b'W'),(b'T', b'Y'),(b'T', b'*'),(b'V', b'A'),(b'V', b'C'),(b'V', b'D'),(b'V', b'E'),(b'V', b'F'),(b'V', b'G'),(b'V', b'H'),(b'V', b'I'),(b'V', b'K'),(b'V', b'L'),(b'V', b'M'),(b'V', b'N'),(b'V', b'P'),(b'V', b'Q'),(b'V', b'R'),(b'V', b'S'),(b'V', b'T'),(b'V', b'V'),(b'V', b'W'),(b'V', b'Y'),(b'V', b'*'),(b'W', b'A'),(b'W', b'C'),(b'W', b'D'),(b'W', b'E'),(b'W', b'F'),(b'W', b'G'),(b'W', b'H'),(b'W', b'I'),(b'W', b'K'),(b'W', b'L'),(b'W', b'M'),(b'W', b'N'),(b'W', b'P'),(b'W', b'Q'),(b'W', b'R'),(b'W', b'S'),(b'W', b'T'),(b'W', b'V'),(b'W', b'W'),(b'W', b'Y'),(b'W', b'*'),(b'Y', b'A'),(b'Y', b'C'),(b'Y', b'D'),(b'Y', b'E'),(b'Y', b'F'),(b'Y', b'G'),(b'Y', b'H'),(b'Y', b'I'),(b'Y', b'K'),(b'Y', b'L'),(b'Y', b'M'),(b'Y', b'N'),(b'Y', b'P'),(b'Y', b'Q'),(b'Y', b'R'),(b'Y', b'S'),(b'Y', b'T'),(b'Y', b'V'),(b'Y', b'W'),(b'Y', b'Y'),(b'Y', b'*'),(b'*', b'A'),(b'*', b'C'),(b'*', b'D'),(b'*', b'E'),(b'*', b'F'),(b'*', b'G'),(b'*', b'H'),(b'*', b'I'),(b'*', b'K'),(b'*', b'L'),(b'*', b'M'),(b'*', b'N'),(b'*', b'P'),(b'*', b'Q'),(b'*', b'R'),(b'*', b'S'),(b'*', b'T'),(b'*', b'V'),(b'*', b'W'),(b'*', b'Y'),(b'*', b'*')]             # <<<<<<<<<<<<<<
 * 
 * class CDSWindowFeat:
 */
  __pyx_tuple__184 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_R); if (unlikely(!__pyx_tuple__184)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__184);
  __Pyx_GIVEREF(__pyx_tuple__184);
  __pyx_tuple__185 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_S); if (unlikely(!__pyx_tuple__185)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__185);
  __Pyx_GIVEREF(__pyx_tuple__185);
  __pyx_tuple__186 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_T); if (unlikely(!__pyx_tuple__186)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__186);
  __Pyx_GIVEREF(__pyx_tuple__186);
  __pyx_tuple__187 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_V); if (unlikely(!__pyx_tuple__187)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__187);
  __Pyx_GIVEREF(__pyx_tuple__187);
  __pyx_tuple__188 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_W); if (unlikely(!__pyx_tuple__188)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__188);
  __Pyx_GIVEREF(__pyx_tuple__188);
  __pyx_tuple__189 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__189)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__189);
  __Pyx_GIVEREF(__pyx_tuple__189);
  __pyx_tuple__190 = PyTuple_Pack(2, __pyx_n_b_K, __pyx_kp_b_); if (unlikely(!__pyx_tuple__190)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__190);
  __Pyx_GIVEREF(__pyx_tuple__190);
  __pyx_tuple__191 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_A); if (unlikely(!__pyx_tuple__191)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__191);
  __Pyx_GIVEREF(__pyx_tuple__191);
  __pyx_tuple__192 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_C); if (unlikely(!__pyx_tuple__192)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__192);
  __Pyx_GIVEREF(__pyx_tuple__192);
  __pyx_tuple__193 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_D); if (unlikely(!__pyx_tuple__193)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__193);
  __Pyx_GIVEREF(__pyx_tuple__193);
  __pyx_tuple__194 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_E); if (unlikely(!__pyx_tuple__194)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__194);
  __Pyx_GIVEREF(__pyx_tuple__194);
  __pyx_tuple__195 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_F); if (unlikely(!__pyx_tuple__195)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__195);
  __Pyx_GIVEREF(__pyx_tuple__195);
  __pyx_tuple__196 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_G); if (unlikely(!__pyx_tuple__196)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__196);
  __Pyx_GIVEREF(__pyx_tuple__196);
  __pyx_tuple__197 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_H); if (unlikely(!__pyx_tuple__197)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__197);
  __Pyx_GIVEREF(__pyx_tuple__197);
  __pyx_tuple__198 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_I); if (unlikely(!__pyx_tuple__198)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__198);
  __Pyx_GIVEREF(__pyx_tuple__198);
  __pyx_tuple__199 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_K); if (unlikely(!__pyx_tuple__199)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__199);
  __Pyx_GIVEREF(__pyx_tuple__199);
  __pyx_tuple__200 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_L); if (unlikely(!__pyx_tuple__200)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__200);
  __Pyx_GIVEREF(__pyx_tuple__200);
  __pyx_tuple__201 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_M); if (unlikely(!__pyx_tuple__201)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__201);
  __Pyx_GIVEREF(__pyx_tuple__201);
  __pyx_tuple__202 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_N); if (unlikely(!__pyx_tuple__202)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__202);
  __Pyx_GIVEREF(__pyx_tuple__202);
  __pyx_tuple__203 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_P); if (unlikely(!__pyx_tuple__203)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__203);
  __Pyx_GIVEREF(__pyx_tuple__203);
  __pyx_tuple__204 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__204)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__204);
  __Pyx_GIVEREF(__pyx_tuple__204);
  __pyx_tuple__205 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_R); if (unlikely(!__pyx_tuple__205)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__205);
  __Pyx_GIVEREF(__pyx_tuple__205);
  __pyx_tuple__206 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_S); if (unlikely(!__pyx_tuple__206)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__206);
  __Pyx_GIVEREF(__pyx_tuple__206);
  __pyx_tuple__207 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_T); if (unlikely(!__pyx_tuple__207)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__207);
  __Pyx_GIVEREF(__pyx_tuple__207);
  __pyx_tuple__208 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_V); if (unlikely(!__pyx_tuple__208)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__208);
  __Pyx_GIVEREF(__pyx_tuple__208);
  __pyx_tuple__209 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_W); if (unlikely(!__pyx_tuple__209)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__209);
  __Pyx_GIVEREF(__pyx_tuple__209);
  __pyx_tuple__210 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__210)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__210);
  __Pyx_GIVEREF(__pyx_tuple__210);
  __pyx_tuple__211 = PyTuple_Pack(2, __pyx_n_b_L, __pyx_kp_b_); if (unlikely(!__pyx_tuple__211)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__211);
  __Pyx_GIVEREF(__pyx_tuple__211);
  __pyx_tuple__212 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_A); if (unlikely(!__pyx_tuple__212)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__212);
  __Pyx_GIVEREF(__pyx_tuple__212);
  __pyx_tuple__213 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_C); if (unlikely(!__pyx_tuple__213)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__213);
  __Pyx_GIVEREF(__pyx_tuple__213);
  __pyx_tuple__214 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_D); if (unlikely(!__pyx_tuple__214)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__214);
  __Pyx_GIVEREF(__pyx_tuple__214);
  __pyx_tuple__215 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_E); if (unlikely(!__pyx_tuple__215)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__215);
  __Pyx_GIVEREF(__pyx_tuple__215);
  __pyx_tuple__216 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_F); if (unlikely(!__pyx_tuple__216)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__216);
  __Pyx_GIVEREF(__pyx_tuple__216);
  __pyx_tuple__217 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_G); if (unlikely(!__pyx_tuple__217)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__217);
  __Pyx_GIVEREF(__pyx_tuple__217);
  __pyx_tuple__218 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_H); if (unlikely(!__pyx_tuple__218)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__218);
  __Pyx_GIVEREF(__pyx_tuple__218);
  __pyx_tuple__219 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_I); if (unlikely(!__pyx_tuple__219)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__219);
  __Pyx_GIVEREF(__pyx_tuple__219);
  __pyx_tuple__220 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_K); if (unlikely(!__pyx_tuple__220)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__220);
  __Pyx_GIVEREF(__pyx_tuple__220);
  __pyx_tuple__221 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_L); if (unlikely(!__pyx_tuple__221)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__221);
  __Pyx_GIVEREF(__pyx_tuple__221);
  __pyx_tuple__222 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_M); if (unlikely(!__pyx_tuple__222)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__222);
  __Pyx_GIVEREF(__pyx_tuple__222);
  __pyx_tuple__223 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_N); if (unlikely(!__pyx_tuple__223)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__223);
  __Pyx_GIVEREF(__pyx_tuple__223);
  __pyx_tuple__224 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_P); if (unlikely(!__pyx_tuple__224)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__224);
  __Pyx_GIVEREF(__pyx_tuple__224);
  __pyx_tuple__225 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__225)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__225);
  __Pyx_GIVEREF(__pyx_tuple__225);
  __pyx_tuple__226 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_R); if (unlikely(!__pyx_tuple__226)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__226);
  __Pyx_GIVEREF(__pyx_tuple__226);
  __pyx_tuple__227 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_S); if (unlikely(!__pyx_tuple__227)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__227);
  __Pyx_GIVEREF(__pyx_tuple__227);
  __pyx_tuple__228 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_T); if (unlikely(!__pyx_tuple__228)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__228);
  __Pyx_GIVEREF(__pyx_tuple__228);
  __pyx_tuple__229 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_V); if (unlikely(!__pyx_tuple__229)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__229);
  __Pyx_GIVEREF(__pyx_tuple__229);
  __pyx_tuple__230 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_W); if (unlikely(!__pyx_tuple__230)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__230);
  __Pyx_GIVEREF(__pyx_tuple__230);
  __pyx_tuple__231 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__231)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__231);
  __Pyx_GIVEREF(__pyx_tuple__231);
  __pyx_tuple__232 = PyTuple_Pack(2, __pyx_n_b_M, __pyx_kp_b_); if (unlikely(!__pyx_tuple__232)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__232);
  __Pyx_GIVEREF(__pyx_tuple__232);
  __pyx_tuple__233 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_A); if (unlikely(!__pyx_tuple__233)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__233);
  __Pyx_GIVEREF(__pyx_tuple__233);
  __pyx_tuple__234 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_C); if (unlikely(!__pyx_tuple__234)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__234);
  __Pyx_GIVEREF(__pyx_tuple__234);
  __pyx_tuple__235 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_D); if (unlikely(!__pyx_tuple__235)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__235);
  __Pyx_GIVEREF(__pyx_tuple__235);
  __pyx_tuple__236 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_E); if (unlikely(!__pyx_tuple__236)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__236);
  __Pyx_GIVEREF(__pyx_tuple__236);
  __pyx_tuple__237 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_F); if (unlikely(!__pyx_tuple__237)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__237);
  __Pyx_GIVEREF(__pyx_tuple__237);
  __pyx_tuple__238 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_G); if (unlikely(!__pyx_tuple__238)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__238);
  __Pyx_GIVEREF(__pyx_tuple__238);
  __pyx_tuple__239 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_H); if (unlikely(!__pyx_tuple__239)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__239);
  __Pyx_GIVEREF(__pyx_tuple__239);
  __pyx_tuple__240 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_I); if (unlikely(!__pyx_tuple__240)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__240);
  __Pyx_GIVEREF(__pyx_tuple__240);
  __pyx_tuple__241 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_K); if (unlikely(!__pyx_tuple__241)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__241);
  __Pyx_GIVEREF(__pyx_tuple__241);
  __pyx_tuple__242 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_L); if (unlikely(!__pyx_tuple__242)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__242);
  __Pyx_GIVEREF(__pyx_tuple__242);
  __pyx_tuple__243 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_M); if (unlikely(!__pyx_tuple__243)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__243);
  __Pyx_GIVEREF(__pyx_tuple__243);
  __pyx_tuple__244 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_N); if (unlikely(!__pyx_tuple__244)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__244);
  __Pyx_GIVEREF(__pyx_tuple__244);
  __pyx_tuple__245 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_P); if (unlikely(!__pyx_tuple__245)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__245);
  __Pyx_GIVEREF(__pyx_tuple__245);
  __pyx_tuple__246 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__246)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__246);
  __Pyx_GIVEREF(__pyx_tuple__246);
  __pyx_tuple__247 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_R); if (unlikely(!__pyx_tuple__247)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__247);
  __Pyx_GIVEREF(__pyx_tuple__247);
  __pyx_tuple__248 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_S); if (unlikely(!__pyx_tuple__248)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__248);
  __Pyx_GIVEREF(__pyx_tuple__248);
  __pyx_tuple__249 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_T); if (unlikely(!__pyx_tuple__249)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__249);
  __Pyx_GIVEREF(__pyx_tuple__249);
  __pyx_tuple__250 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_V); if (unlikely(!__pyx_tuple__250)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__250);
  __Pyx_GIVEREF(__pyx_tuple__250);
  __pyx_tuple__251 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_W); if (unlikely(!__pyx_tuple__251)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__251);
  __Pyx_GIVEREF(__pyx_tuple__251);
  __pyx_tuple__252 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__252)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__252);
  __Pyx_GIVEREF(__pyx_tuple__252);
  __pyx_tuple__253 = PyTuple_Pack(2, __pyx_n_b_N, __pyx_kp_b_); if (unlikely(!__pyx_tuple__253)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__253);
  __Pyx_GIVEREF(__pyx_tuple__253);
  __pyx_tuple__254 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_A); if (unlikely(!__pyx_tuple__254)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__254);
  __Pyx_GIVEREF(__pyx_tuple__254);
  __pyx_tuple__255 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_C); if (unlikely(!__pyx_tuple__255)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__255);
  __Pyx_GIVEREF(__pyx_tuple__255);
  __pyx_tuple__256 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_D); if (unlikely(!__pyx_tuple__256)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__256);
  __Pyx_GIVEREF(__pyx_tuple__256);
  __pyx_tuple__257 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_E); if (unlikely(!__pyx_tuple__257)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__257);
  __Pyx_GIVEREF(__pyx_tuple__257);
  __pyx_tuple__258 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_F); if (unlikely(!__pyx_tuple__258)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__258);
  __Pyx_GIVEREF(__pyx_tuple__258);
  __pyx_tuple__259 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_G); if (unlikely(!__pyx_tuple__259)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__259);
  __Pyx_GIVEREF(__pyx_tuple__259);
  __pyx_tuple__260 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_H); if (unlikely(!__pyx_tuple__260)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__260);
  __Pyx_GIVEREF(__pyx_tuple__260);
  __pyx_tuple__261 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_I); if (unlikely(!__pyx_tuple__261)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__261);
  __Pyx_GIVEREF(__pyx_tuple__261);
  __pyx_tuple__262 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_K); if (unlikely(!__pyx_tuple__262)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__262);
  __Pyx_GIVEREF(__pyx_tuple__262);
  __pyx_tuple__263 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_L); if (unlikely(!__pyx_tuple__263)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__263);
  __Pyx_GIVEREF(__pyx_tuple__263);
  __pyx_tuple__264 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_M); if (unlikely(!__pyx_tuple__264)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__264);
  __Pyx_GIVEREF(__pyx_tuple__264);
  __pyx_tuple__265 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_N); if (unlikely(!__pyx_tuple__265)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__265);
  __Pyx_GIVEREF(__pyx_tuple__265);
  __pyx_tuple__266 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_P); if (unlikely(!__pyx_tuple__266)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__266);
  __Pyx_GIVEREF(__pyx_tuple__266);
  __pyx_tuple__267 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__267)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__267);
  __Pyx_GIVEREF(__pyx_tuple__267);
  __pyx_tuple__268 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_R); if (unlikely(!__pyx_tuple__268)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__268);
  __Pyx_GIVEREF(__pyx_tuple__268);
  __pyx_tuple__269 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_S); if (unlikely(!__pyx_tuple__269)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__269);
  __Pyx_GIVEREF(__pyx_tuple__269);
  __pyx_tuple__270 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_T); if (unlikely(!__pyx_tuple__270)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__270);
  __Pyx_GIVEREF(__pyx_tuple__270);
  __pyx_tuple__271 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_V); if (unlikely(!__pyx_tuple__271)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__271);
  __Pyx_GIVEREF(__pyx_tuple__271);
  __pyx_tuple__272 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_W); if (unlikely(!__pyx_tuple__272)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__272);
  __Pyx_GIVEREF(__pyx_tuple__272);
  __pyx_tuple__273 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__273)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__273);
  __Pyx_GIVEREF(__pyx_tuple__273);
  __pyx_tuple__274 = PyTuple_Pack(2, __pyx_n_b_P, __pyx_kp_b_); if (unlikely(!__pyx_tuple__274)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__274);
  __Pyx_GIVEREF(__pyx_tuple__274);
  __pyx_tuple__275 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_A); if (unlikely(!__pyx_tuple__275)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__275);
  __Pyx_GIVEREF(__pyx_tuple__275);
  __pyx_tuple__276 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_C); if (unlikely(!__pyx_tuple__276)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__276);
  __Pyx_GIVEREF(__pyx_tuple__276);
  __pyx_tuple__277 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_D); if (unlikely(!__pyx_tuple__277)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__277);
  __Pyx_GIVEREF(__pyx_tuple__277);
  __pyx_tuple__278 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_E); if (unlikely(!__pyx_tuple__278)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__278);
  __Pyx_GIVEREF(__pyx_tuple__278);
  __pyx_tuple__279 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_F); if (unlikely(!__pyx_tuple__279)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__279);
  __Pyx_GIVEREF(__pyx_tuple__279);
  __pyx_tuple__280 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_G); if (unlikely(!__pyx_tuple__280)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__280);
  __Pyx_GIVEREF(__pyx_tuple__280);
  __pyx_tuple__281 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_H); if (unlikely(!__pyx_tuple__281)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__281);
  __Pyx_GIVEREF(__pyx_tuple__281);
  __pyx_tuple__282 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_I); if (unlikely(!__pyx_tuple__282)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__282);
  __Pyx_GIVEREF(__pyx_tuple__282);
  __pyx_tuple__283 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_K); if (unlikely(!__pyx_tuple__283)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__283);
  __Pyx_GIVEREF(__pyx_tuple__283);
  __pyx_tuple__284 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_L); if (unlikely(!__pyx_tuple__284)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__284);
  __Pyx_GIVEREF(__pyx_tuple__284);
  __pyx_tuple__285 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_M); if (unlikely(!__pyx_tuple__285)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__285);
  __Pyx_GIVEREF(__pyx_tuple__285);
  __pyx_tuple__286 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_N); if (unlikely(!__pyx_tuple__286)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__286);
  __Pyx_GIVEREF(__pyx_tuple__286);
  __pyx_tuple__287 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_P); if (unlikely(!__pyx_tuple__287)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__287);
  __Pyx_GIVEREF(__pyx_tuple__287);
  __pyx_tuple__288 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__288)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__288);
  __Pyx_GIVEREF(__pyx_tuple__288);
  __pyx_tuple__289 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_R); if (unlikely(!__pyx_tuple__289)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__289);
  __Pyx_GIVEREF(__pyx_tuple__289);
  __pyx_tuple__290 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_S); if (unlikely(!__pyx_tuple__290)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__290);
  __Pyx_GIVEREF(__pyx_tuple__290);
  __pyx_tuple__291 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_T); if (unlikely(!__pyx_tuple__291)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__291);
  __Pyx_GIVEREF(__pyx_tuple__291);
  __pyx_tuple__292 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_V); if (unlikely(!__pyx_tuple__292)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__292);
  __Pyx_GIVEREF(__pyx_tuple__292);
  __pyx_tuple__293 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_W); if (unlikely(!__pyx_tuple__293)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__293);
  __Pyx_GIVEREF(__pyx_tuple__293);
  __pyx_tuple__294 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__294)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__294);
  __Pyx_GIVEREF(__pyx_tuple__294);
  __pyx_tuple__295 = PyTuple_Pack(2, __pyx_n_b_Q, __pyx_kp_b_); if (unlikely(!__pyx_tuple__295)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__295);
  __Pyx_GIVEREF(__pyx_tuple__295);
  __pyx_tuple__296 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_A); if (unlikely(!__pyx_tuple__296)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__296);
  __Pyx_GIVEREF(__pyx_tuple__296);
  __pyx_tuple__297 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_C); if (unlikely(!__pyx_tuple__297)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__297);
  __Pyx_GIVEREF(__pyx_tuple__297);
  __pyx_tuple__298 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_D); if (unlikely(!__pyx_tuple__298)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__298);
  __Pyx_GIVEREF(__pyx_tuple__298);
  __pyx_tuple__299 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_E); if (unlikely(!__pyx_tuple__299)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__299);
  __Pyx_GIVEREF(__pyx_tuple__299);
  __pyx_tuple__300 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_F); if (unlikely(!__pyx_tuple__300)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__300);
  __Pyx_GIVEREF(__pyx_tuple__300);
  __pyx_tuple__301 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_G); if (unlikely(!__pyx_tuple__301)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__301);
  __Pyx_GIVEREF(__pyx_tuple__301);
  __pyx_tuple__302 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_H); if (unlikely(!__pyx_tuple__302)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__302);
  __Pyx_GIVEREF(__pyx_tuple__302);
  __pyx_tuple__303 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_I); if (unlikely(!__pyx_tuple__303)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__303);
  __Pyx_GIVEREF(__pyx_tuple__303);
  __pyx_tuple__304 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_K); if (unlikely(!__pyx_tuple__304)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__304);
  __Pyx_GIVEREF(__pyx_tuple__304);
  __pyx_tuple__305 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_L); if (unlikely(!__pyx_tuple__305)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__305);
  __Pyx_GIVEREF(__pyx_tuple__305);
  __pyx_tuple__306 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_M); if (unlikely(!__pyx_tuple__306)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__306);
  __Pyx_GIVEREF(__pyx_tuple__306);
  __pyx_tuple__307 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_N); if (unlikely(!__pyx_tuple__307)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__307);
  __Pyx_GIVEREF(__pyx_tuple__307);
  __pyx_tuple__308 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_P); if (unlikely(!__pyx_tuple__308)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__308);
  __Pyx_GIVEREF(__pyx_tuple__308);
  __pyx_tuple__309 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__309)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__309);
  __Pyx_GIVEREF(__pyx_tuple__309);
  __pyx_tuple__310 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_R); if (unlikely(!__pyx_tuple__310)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__310);
  __Pyx_GIVEREF(__pyx_tuple__310);
  __pyx_tuple__311 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_S); if (unlikely(!__pyx_tuple__311)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__311);
  __Pyx_GIVEREF(__pyx_tuple__311);
  __pyx_tuple__312 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_T); if (unlikely(!__pyx_tuple__312)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__312);
  __Pyx_GIVEREF(__pyx_tuple__312);
  __pyx_tuple__313 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_V); if (unlikely(!__pyx_tuple__313)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__313);
  __Pyx_GIVEREF(__pyx_tuple__313);
  __pyx_tuple__314 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_W); if (unlikely(!__pyx_tuple__314)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__314);
  __Pyx_GIVEREF(__pyx_tuple__314);
  __pyx_tuple__315 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__315)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__315);
  __Pyx_GIVEREF(__pyx_tuple__315);
  __pyx_tuple__316 = PyTuple_Pack(2, __pyx_n_b_R, __pyx_kp_b_); if (unlikely(!__pyx_tuple__316)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__316);
  __Pyx_GIVEREF(__pyx_tuple__316);
  __pyx_tuple__317 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_A); if (unlikely(!__pyx_tuple__317)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__317);
  __Pyx_GIVEREF(__pyx_tuple__317);
  __pyx_tuple__318 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_C); if (unlikely(!__pyx_tuple__318)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__318);
  __Pyx_GIVEREF(__pyx_tuple__318);
  __pyx_tuple__319 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_D); if (unlikely(!__pyx_tuple__319)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__319);
  __Pyx_GIVEREF(__pyx_tuple__319);
  __pyx_tuple__320 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_E); if (unlikely(!__pyx_tuple__320)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__320);
  __Pyx_GIVEREF(__pyx_tuple__320);
  __pyx_tuple__321 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_F); if (unlikely(!__pyx_tuple__321)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__321);
  __Pyx_GIVEREF(__pyx_tuple__321);
  __pyx_tuple__322 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_G); if (unlikely(!__pyx_tuple__322)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__322);
  __Pyx_GIVEREF(__pyx_tuple__322);
  __pyx_tuple__323 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_H); if (unlikely(!__pyx_tuple__323)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__323);
  __Pyx_GIVEREF(__pyx_tuple__323);
  __pyx_tuple__324 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_I); if (unlikely(!__pyx_tuple__324)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__324);
  __Pyx_GIVEREF(__pyx_tuple__324);
  __pyx_tuple__325 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_K); if (unlikely(!__pyx_tuple__325)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__325);
  __Pyx_GIVEREF(__pyx_tuple__325);
  __pyx_tuple__326 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_L); if (unlikely(!__pyx_tuple__326)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__326);
  __Pyx_GIVEREF(__pyx_tuple__326);
  __pyx_tuple__327 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_M); if (unlikely(!__pyx_tuple__327)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__327);
  __Pyx_GIVEREF(__pyx_tuple__327);
  __pyx_tuple__328 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_N); if (unlikely(!__pyx_tuple__328)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__328);
  __Pyx_GIVEREF(__pyx_tuple__328);
  __pyx_tuple__329 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_P); if (unlikely(!__pyx_tuple__329)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__329);
  __Pyx_GIVEREF(__pyx_tuple__329);
  __pyx_tuple__330 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__330)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__330);
  __Pyx_GIVEREF(__pyx_tuple__330);
  __pyx_tuple__331 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_R); if (unlikely(!__pyx_tuple__331)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__331);
  __Pyx_GIVEREF(__pyx_tuple__331);
  __pyx_tuple__332 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_S); if (unlikely(!__pyx_tuple__332)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__332);
  __Pyx_GIVEREF(__pyx_tuple__332);
  __pyx_tuple__333 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_T); if (unlikely(!__pyx_tuple__333)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__333);
  __Pyx_GIVEREF(__pyx_tuple__333);
  __pyx_tuple__334 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_V); if (unlikely(!__pyx_tuple__334)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__334);
  __Pyx_GIVEREF(__pyx_tuple__334);
  __pyx_tuple__335 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_W); if (unlikely(!__pyx_tuple__335)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__335);
  __Pyx_GIVEREF(__pyx_tuple__335);
  __pyx_tuple__336 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__336)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__336);
  __Pyx_GIVEREF(__pyx_tuple__336);
  __pyx_tuple__337 = PyTuple_Pack(2, __pyx_n_b_S, __pyx_kp_b_); if (unlikely(!__pyx_tuple__337)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__337);
  __Pyx_GIVEREF(__pyx_tuple__337);
  __pyx_tuple__338 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_A); if (unlikely(!__pyx_tuple__338)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__338);
  __Pyx_GIVEREF(__pyx_tuple__338);
  __pyx_tuple__339 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_C); if (unlikely(!__pyx_tuple__339)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__339);
  __Pyx_GIVEREF(__pyx_tuple__339);
  __pyx_tuple__340 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_D); if (unlikely(!__pyx_tuple__340)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__340);
  __Pyx_GIVEREF(__pyx_tuple__340);
  __pyx_tuple__341 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_E); if (unlikely(!__pyx_tuple__341)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__341);
  __Pyx_GIVEREF(__pyx_tuple__341);
  __pyx_tuple__342 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_F); if (unlikely(!__pyx_tuple__342)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__342);
  __Pyx_GIVEREF(__pyx_tuple__342);
  __pyx_tuple__343 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_G); if (unlikely(!__pyx_tuple__343)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__343);
  __Pyx_GIVEREF(__pyx_tuple__343);
  __pyx_tuple__344 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_H); if (unlikely(!__pyx_tuple__344)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__344);
  __Pyx_GIVEREF(__pyx_tuple__344);
  __pyx_tuple__345 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_I); if (unlikely(!__pyx_tuple__345)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__345);
  __Pyx_GIVEREF(__pyx_tuple__345);
  __pyx_tuple__346 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_K); if (unlikely(!__pyx_tuple__346)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__346);
  __Pyx_GIVEREF(__pyx_tuple__346);
  __pyx_tuple__347 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_L); if (unlikely(!__pyx_tuple__347)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__347);
  __Pyx_GIVEREF(__pyx_tuple__347);
  __pyx_tuple__348 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_M); if (unlikely(!__pyx_tuple__348)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__348);
  __Pyx_GIVEREF(__pyx_tuple__348);
  __pyx_tuple__349 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_N); if (unlikely(!__pyx_tuple__349)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__349);
  __Pyx_GIVEREF(__pyx_tuple__349);
  __pyx_tuple__350 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_P); if (unlikely(!__pyx_tuple__350)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__350);
  __Pyx_GIVEREF(__pyx_tuple__350);
  __pyx_tuple__351 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__351)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__351);
  __Pyx_GIVEREF(__pyx_tuple__351);
  __pyx_tuple__352 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_R); if (unlikely(!__pyx_tuple__352)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__352);
  __Pyx_GIVEREF(__pyx_tuple__352);
  __pyx_tuple__353 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_S); if (unlikely(!__pyx_tuple__353)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__353);
  __Pyx_GIVEREF(__pyx_tuple__353);
  __pyx_tuple__354 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_T); if (unlikely(!__pyx_tuple__354)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__354);
  __Pyx_GIVEREF(__pyx_tuple__354);
  __pyx_tuple__355 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_V); if (unlikely(!__pyx_tuple__355)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__355);
  __Pyx_GIVEREF(__pyx_tuple__355);
  __pyx_tuple__356 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_W); if (unlikely(!__pyx_tuple__356)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__356);
  __Pyx_GIVEREF(__pyx_tuple__356);
  __pyx_tuple__357 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__357)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__357);
  __Pyx_GIVEREF(__pyx_tuple__357);
  __pyx_tuple__358 = PyTuple_Pack(2, __pyx_n_b_T, __pyx_kp_b_); if (unlikely(!__pyx_tuple__358)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__358);
  __Pyx_GIVEREF(__pyx_tuple__358);
  __pyx_tuple__359 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_A); if (unlikely(!__pyx_tuple__359)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__359);
  __Pyx_GIVEREF(__pyx_tuple__359);
  __pyx_tuple__360 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_C); if (unlikely(!__pyx_tuple__360)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__360);
  __Pyx_GIVEREF(__pyx_tuple__360);
  __pyx_tuple__361 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_D); if (unlikely(!__pyx_tuple__361)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__361);
  __Pyx_GIVEREF(__pyx_tuple__361);
  __pyx_tuple__362 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_E); if (unlikely(!__pyx_tuple__362)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__362);
  __Pyx_GIVEREF(__pyx_tuple__362);
  __pyx_tuple__363 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_F); if (unlikely(!__pyx_tuple__363)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__363);
  __Pyx_GIVEREF(__pyx_tuple__363);
  __pyx_tuple__364 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_G); if (unlikely(!__pyx_tuple__364)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__364);
  __Pyx_GIVEREF(__pyx_tuple__364);
  __pyx_tuple__365 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_H); if (unlikely(!__pyx_tuple__365)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__365);
  __Pyx_GIVEREF(__pyx_tuple__365);
  __pyx_tuple__366 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_I); if (unlikely(!__pyx_tuple__366)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__366);
  __Pyx_GIVEREF(__pyx_tuple__366);
  __pyx_tuple__367 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_K); if (unlikely(!__pyx_tuple__367)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__367);
  __Pyx_GIVEREF(__pyx_tuple__367);
  __pyx_tuple__368 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_L); if (unlikely(!__pyx_tuple__368)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__368);
  __Pyx_GIVEREF(__pyx_tuple__368);
  __pyx_tuple__369 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_M); if (unlikely(!__pyx_tuple__369)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__369);
  __Pyx_GIVEREF(__pyx_tuple__369);
  __pyx_tuple__370 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_N); if (unlikely(!__pyx_tuple__370)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__370);
  __Pyx_GIVEREF(__pyx_tuple__370);
  __pyx_tuple__371 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_P); if (unlikely(!__pyx_tuple__371)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__371);
  __Pyx_GIVEREF(__pyx_tuple__371);
  __pyx_tuple__372 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__372)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__372);
  __Pyx_GIVEREF(__pyx_tuple__372);
  __pyx_tuple__373 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_R); if (unlikely(!__pyx_tuple__373)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__373);
  __Pyx_GIVEREF(__pyx_tuple__373);
  __pyx_tuple__374 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_S); if (unlikely(!__pyx_tuple__374)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__374);
  __Pyx_GIVEREF(__pyx_tuple__374);
  __pyx_tuple__375 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_T); if (unlikely(!__pyx_tuple__375)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__375);
  __Pyx_GIVEREF(__pyx_tuple__375);
  __pyx_tuple__376 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_V); if (unlikely(!__pyx_tuple__376)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__376);
  __Pyx_GIVEREF(__pyx_tuple__376);
  __pyx_tuple__377 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_W); if (unlikely(!__pyx_tuple__377)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__377);
  __Pyx_GIVEREF(__pyx_tuple__377);
  __pyx_tuple__378 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__378)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__378);
  __Pyx_GIVEREF(__pyx_tuple__378);
  __pyx_tuple__379 = PyTuple_Pack(2, __pyx_n_b_V, __pyx_kp_b_); if (unlikely(!__pyx_tuple__379)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__379);
  __Pyx_GIVEREF(__pyx_tuple__379);
  __pyx_tuple__380 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_A); if (unlikely(!__pyx_tuple__380)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__380);
  __Pyx_GIVEREF(__pyx_tuple__380);
  __pyx_tuple__381 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_C); if (unlikely(!__pyx_tuple__381)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__381);
  __Pyx_GIVEREF(__pyx_tuple__381);
  __pyx_tuple__382 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_D); if (unlikely(!__pyx_tuple__382)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__382);
  __Pyx_GIVEREF(__pyx_tuple__382);
  __pyx_tuple__383 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_E); if (unlikely(!__pyx_tuple__383)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__383);
  __Pyx_GIVEREF(__pyx_tuple__383);
  __pyx_tuple__384 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_F); if (unlikely(!__pyx_tuple__384)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__384);
  __Pyx_GIVEREF(__pyx_tuple__384);
  __pyx_tuple__385 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_G); if (unlikely(!__pyx_tuple__385)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__385);
  __Pyx_GIVEREF(__pyx_tuple__385);
  __pyx_tuple__386 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_H); if (unlikely(!__pyx_tuple__386)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__386);
  __Pyx_GIVEREF(__pyx_tuple__386);
  __pyx_tuple__387 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_I); if (unlikely(!__pyx_tuple__387)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__387);
  __Pyx_GIVEREF(__pyx_tuple__387);
  __pyx_tuple__388 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_K); if (unlikely(!__pyx_tuple__388)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__388);
  __Pyx_GIVEREF(__pyx_tuple__388);
  __pyx_tuple__389 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_L); if (unlikely(!__pyx_tuple__389)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__389);
  __Pyx_GIVEREF(__pyx_tuple__389);
  __pyx_tuple__390 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_M); if (unlikely(!__pyx_tuple__390)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__390);
  __Pyx_GIVEREF(__pyx_tuple__390);
  __pyx_tuple__391 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_N); if (unlikely(!__pyx_tuple__391)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__391);
  __Pyx_GIVEREF(__pyx_tuple__391);
  __pyx_tuple__392 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_P); if (unlikely(!__pyx_tuple__392)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__392);
  __Pyx_GIVEREF(__pyx_tuple__392);
  __pyx_tuple__393 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__393)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__393);
  __Pyx_GIVEREF(__pyx_tuple__393);
  __pyx_tuple__394 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_R); if (unlikely(!__pyx_tuple__394)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__394);
  __Pyx_GIVEREF(__pyx_tuple__394);
  __pyx_tuple__395 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_S); if (unlikely(!__pyx_tuple__395)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__395);
  __Pyx_GIVEREF(__pyx_tuple__395);
  __pyx_tuple__396 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_T); if (unlikely(!__pyx_tuple__396)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__396);
  __Pyx_GIVEREF(__pyx_tuple__396);
  __pyx_tuple__397 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_V); if (unlikely(!__pyx_tuple__397)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__397);
  __Pyx_GIVEREF(__pyx_tuple__397);
  __pyx_tuple__398 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_W); if (unlikely(!__pyx_tuple__398)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__398);
  __Pyx_GIVEREF(__pyx_tuple__398);
  __pyx_tuple__399 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__399)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__399);
  __Pyx_GIVEREF(__pyx_tuple__399);
  __pyx_tuple__400 = PyTuple_Pack(2, __pyx_n_b_W, __pyx_kp_b_); if (unlikely(!__pyx_tuple__400)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__400);
  __Pyx_GIVEREF(__pyx_tuple__400);
  __pyx_tuple__401 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_A); if (unlikely(!__pyx_tuple__401)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__401);
  __Pyx_GIVEREF(__pyx_tuple__401);
  __pyx_tuple__402 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_C); if (unlikely(!__pyx_tuple__402)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__402);
  __Pyx_GIVEREF(__pyx_tuple__402);
  __pyx_tuple__403 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_D); if (unlikely(!__pyx_tuple__403)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__403);
  __Pyx_GIVEREF(__pyx_tuple__403);
  __pyx_tuple__404 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_E); if (unlikely(!__pyx_tuple__404)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__404);
  __Pyx_GIVEREF(__pyx_tuple__404);
  __pyx_tuple__405 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_F); if (unlikely(!__pyx_tuple__405)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__405);
  __Pyx_GIVEREF(__pyx_tuple__405);
  __pyx_tuple__406 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_G); if (unlikely(!__pyx_tuple__406)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__406);
  __Pyx_GIVEREF(__pyx_tuple__406);
  __pyx_tuple__407 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_H); if (unlikely(!__pyx_tuple__407)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__407);
  __Pyx_GIVEREF(__pyx_tuple__407);
  __pyx_tuple__408 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_I); if (unlikely(!__pyx_tuple__408)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__408);
  __Pyx_GIVEREF(__pyx_tuple__408);
  __pyx_tuple__409 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_K); if (unlikely(!__pyx_tuple__409)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__409);
  __Pyx_GIVEREF(__pyx_tuple__409);
  __pyx_tuple__410 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_L); if (unlikely(!__pyx_tuple__410)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__410);
  __Pyx_GIVEREF(__pyx_tuple__410);
  __pyx_tuple__411 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_M); if (unlikely(!__pyx_tuple__411)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__411);
  __Pyx_GIVEREF(__pyx_tuple__411);
  __pyx_tuple__412 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_N); if (unlikely(!__pyx_tuple__412)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__412);
  __Pyx_GIVEREF(__pyx_tuple__412);
  __pyx_tuple__413 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_P); if (unlikely(!__pyx_tuple__413)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__413);
  __Pyx_GIVEREF(__pyx_tuple__413);
  __pyx_tuple__414 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__414)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__414);
  __Pyx_GIVEREF(__pyx_tuple__414);
  __pyx_tuple__415 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_R); if (unlikely(!__pyx_tuple__415)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__415);
  __Pyx_GIVEREF(__pyx_tuple__415);
  __pyx_tuple__416 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_S); if (unlikely(!__pyx_tuple__416)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__416);
  __Pyx_GIVEREF(__pyx_tuple__416);
  __pyx_tuple__417 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_T); if (unlikely(!__pyx_tuple__417)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__417);
  __Pyx_GIVEREF(__pyx_tuple__417);
  __pyx_tuple__418 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_V); if (unlikely(!__pyx_tuple__418)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__418);
  __Pyx_GIVEREF(__pyx_tuple__418);
  __pyx_tuple__419 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_W); if (unlikely(!__pyx_tuple__419)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__419);
  __Pyx_GIVEREF(__pyx_tuple__419);
  __pyx_tuple__420 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__420)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__420);
  __Pyx_GIVEREF(__pyx_tuple__420);
  __pyx_tuple__421 = PyTuple_Pack(2, __pyx_n_b_Y, __pyx_kp_b_); if (unlikely(!__pyx_tuple__421)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__421);
  __Pyx_GIVEREF(__pyx_tuple__421);
  __pyx_tuple__422 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_A); if (unlikely(!__pyx_tuple__422)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__422);
  __Pyx_GIVEREF(__pyx_tuple__422);
  __pyx_tuple__423 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_C); if (unlikely(!__pyx_tuple__423)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__423);
  __Pyx_GIVEREF(__pyx_tuple__423);
  __pyx_tuple__424 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_D); if (unlikely(!__pyx_tuple__424)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__424);
  __Pyx_GIVEREF(__pyx_tuple__424);
  __pyx_tuple__425 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_E); if (unlikely(!__pyx_tuple__425)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__425);
  __Pyx_GIVEREF(__pyx_tuple__425);
  __pyx_tuple__426 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_F); if (unlikely(!__pyx_tuple__426)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__426);
  __Pyx_GIVEREF(__pyx_tuple__426);
  __pyx_tuple__427 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_G); if (unlikely(!__pyx_tuple__427)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__427);
  __Pyx_GIVEREF(__pyx_tuple__427);
  __pyx_tuple__428 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_H); if (unlikely(!__pyx_tuple__428)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__428);
  __Pyx_GIVEREF(__pyx_tuple__428);
  __pyx_tuple__429 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_I); if (unlikely(!__pyx_tuple__429)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__429);
  __Pyx_GIVEREF(__pyx_tuple__429);
  __pyx_tuple__430 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_K); if (unlikely(!__pyx_tuple__430)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__430);
  __Pyx_GIVEREF(__pyx_tuple__430);
  __pyx_tuple__431 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_L); if (unlikely(!__pyx_tuple__431)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__431);
  __Pyx_GIVEREF(__pyx_tuple__431);
  __pyx_tuple__432 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_M); if (unlikely(!__pyx_tuple__432)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__432);
  __Pyx_GIVEREF(__pyx_tuple__432);
  __pyx_tuple__433 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_N); if (unlikely(!__pyx_tuple__433)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__433);
  __Pyx_GIVEREF(__pyx_tuple__433);
  __pyx_tuple__434 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_P); if (unlikely(!__pyx_tuple__434)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__434);
  __Pyx_GIVEREF(__pyx_tuple__434);
  __pyx_tuple__435 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_Q); if (unlikely(!__pyx_tuple__435)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__435);
  __Pyx_GIVEREF(__pyx_tuple__435);
  __pyx_tuple__436 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_R); if (unlikely(!__pyx_tuple__436)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__436);
  __Pyx_GIVEREF(__pyx_tuple__436);
  __pyx_tuple__437 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_S); if (unlikely(!__pyx_tuple__437)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__437);
  __Pyx_GIVEREF(__pyx_tuple__437);
  __pyx_tuple__438 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_T); if (unlikely(!__pyx_tuple__438)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__438);
  __Pyx_GIVEREF(__pyx_tuple__438);
  __pyx_tuple__439 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_V); if (unlikely(!__pyx_tuple__439)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__439);
  __Pyx_GIVEREF(__pyx_tuple__439);
  __pyx_tuple__440 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_W); if (unlikely(!__pyx_tuple__440)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__440);
  __Pyx_GIVEREF(__pyx_tuple__440);
  __pyx_tuple__441 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_n_b_Y); if (unlikely(!__pyx_tuple__441)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__441);
  __Pyx_GIVEREF(__pyx_tuple__441);
  __pyx_tuple__442 = PyTuple_Pack(2, __pyx_kp_b_, __pyx_kp_b_); if (unlikely(!__pyx_tuple__442)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__442);
  __Pyx_GIVEREF(__pyx_tuple__442);

  /* "c_ORFscores.pyx":24
 * 
 * class CDSWindowFeat:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Input filename: should be a fasta filename containing just CDS sequences (in-frame)
 */
  __pyx_tuple__443 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_k); if (unlikely(!__pyx_tuple__443)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__443);
  __Pyx_GIVEREF(__pyx_tuple__443);
  __pyx_codeobj__444 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__443, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_c_ORFscores_pyx, __pyx_n_s_init, 24, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__444)) __PYX_ERR(0, 24, __pyx_L1_error)

  /* "c_ORFscores.pyx":80
 * 
 * 
 *     def calc_amino_count(self, char* aa_seq, int factor=1):             # <<<<<<<<<<<<<<
 *         cdef bytes x
 *         cdef bytes aa_seq2 = aa_seq
 */
  __pyx_tuple__445 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_aa_seq, __pyx_n_s_factor, __pyx_n_s_x, __pyx_n_s_aa_seq2); if (unlikely(!__pyx_tuple__445)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__445);
  __Pyx_GIVEREF(__pyx_tuple__445);
  __pyx_codeobj__446 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__445, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_c_ORFscores_pyx, __pyx_n_s_calc_amino_count, 80, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__446)) __PYX_ERR(0, 80, __pyx_L1_error)

  /* "c_ORFscores.pyx":87
 *             self.amino_total += 1 * factor
 * 
 *     def calc_codon_count(self, char* nt_seq, int nt_len, int factor=1):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in xrange(0, nt_len-2, 3):
 */
  __pyx_tuple__447 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_nt_seq, __pyx_n_s_nt_len, __pyx_n_s_factor, __pyx_n_s_i); if (unlikely(!__pyx_tuple__447)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__447);
  __Pyx_GIVEREF(__pyx_tuple__447);
  __pyx_codeobj__448 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__447, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_c_ORFscores_pyx, __pyx_n_s_calc_codon_count, 87, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__448)) __PYX_ERR(0, 87, __pyx_L1_error)

  /* "c_ORFscores.pyx":93
 *             self.codon_total += 1 * factor
 * 
 *     def calc_diamino_count(self, char* aa_seq, int aa_len):             # <<<<<<<<<<<<<<
 *         cdef int i, k
 *         cdef bytes x, y
 */
  __pyx_tuple__449 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_aa_seq, __pyx_n_s_aa_len, __pyx_n_s_i, __pyx_n_s_k, __pyx_n_s_x, __pyx_n_s_y); if (unlikely(!__pyx_tuple__449)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__449);
  __Pyx_GIVEREF(__pyx_tuple__449);
  __pyx_codeobj__450 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__449, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_c_ORFscores_pyx, __pyx_n_s_calc_diamino_count, 93, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__450)) __PYX_ERR(0, 93, __pyx_L1_error)

  /* "c_ORFscores.pyx":104
 *                     self.diamino_total[k] += 1
 * 
 *     def deduct_diamino_count(self, char* aa_seq, int aa_len, int i_range):             # <<<<<<<<<<<<<<
 *         cdef int i, k
 *         cdef bytes x, y
 */
  __pyx_tuple__451 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_aa_seq, __pyx_n_s_aa_len, __pyx_n_s_i_range, __pyx_n_s_i, __pyx_n_s_k, __pyx_n_s_x, __pyx_n_s_y); if (unlikely(!__pyx_tuple__451)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__451);
  __Pyx_GIVEREF(__pyx_tuple__451);
  __pyx_codeobj__452 = (PyObject*)__Pyx_PyCode_New(4, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__451, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_c_ORFscores_pyx, __pyx_n_s_deduct_diamino_count, 104, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__452)) __PYX_ERR(0, 104, __pyx_L1_error)

  /* "c_ORFscores.pyx":116
 *                     self.diamino_changed[(k, x, y)] = 1
 * 
 *     def add_diamino_count(self, char* aa_seq, int aa_len, int i_range):             # <<<<<<<<<<<<<<
 *         cdef int i, k
 *         cdef bytes x, y
 */
  __pyx_tuple__453 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_aa_seq, __pyx_n_s_aa_len, __pyx_n_s_i_range, __pyx_n_s_i, __pyx_n_s_k, __pyx_n_s_x, __pyx_n_s_y); if (unlikely(!__pyx_tuple__453)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__453);
  __Pyx_GIVEREF(__pyx_tuple__453);
  __pyx_codeobj__454 = (PyObject*)__Pyx_PyCode_New(4, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__453, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_c_ORFscores_pyx, __pyx_n_s_add_diamino_count, 116, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__454)) __PYX_ERR(0, 116, __pyx_L1_error)

  /* "c_ORFscores.pyx":128
 *                     self.diamino_changed[(k, x, y)] = 1
 * 
 *     def get_amino_freq(self, object pseudo=None, double alpha=0):             # <<<<<<<<<<<<<<
 *         cdef string x
 *         cdef double a, b
 */
  __pyx_tuple__455 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_pseudo, __pyx_n_s_alpha, __pyx_n_s_x, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__455)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__455);
  __Pyx_GIVEREF(__pyx_tuple__455);
  __pyx_codeobj__456 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__455, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_c_ORFscores_pyx, __pyx_n_s_get_amino_freq, 128, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__456)) __PYX_ERR(0, 128, __pyx_L1_error)

  /* "c_ORFscores.pyx":141
 *         return self.amino_freq
 * 
 *     def get_codon_freq(self, object pseudo=None, double alpha=0):             # <<<<<<<<<<<<<<
 *         cdef string x
 *         cdef double a, b
 */
  __pyx_tuple__457 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_pseudo, __pyx_n_s_alpha, __pyx_n_s_x, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__457)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__457);
  __Pyx_GIVEREF(__pyx_tuple__457);
  __pyx_codeobj__458 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__457, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_c_ORFscores_pyx, __pyx_n_s_get_codon_freq, 141, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__458)) __PYX_ERR(0, 141, __pyx_L1_error)

  /* "c_ORFscores.pyx":155
 *         return self.codon_freq
 * 
 *     def get_diamino_freq(self, object pseudo=None, double alpha=0, bool clear_dict=True):             # <<<<<<<<<<<<<<
 *         cdef int k
 *         cdef double a, b
 */
  __pyx_tuple__459 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_pseudo, __pyx_n_s_alpha, __pyx_n_s_clear_dict, __pyx_n_s_k, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_x, __pyx_n_s_y); if (unlikely(!__pyx_tuple__459)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__459);
  __Pyx_GIVEREF(__pyx_tuple__459);
  __pyx_codeobj__460 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__459, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_c_ORFscores_pyx, __pyx_n_s_get_diamino_freq, 155, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__460)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initc_ORFscores(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initc_ORFscores(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_c_ORFscores(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_c_ORFscores(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_c_ORFscores(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'c_ORFscores' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_c_ORFscores(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("c_ORFscores", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_c_ORFscores) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "c_ORFscores")) {
      if (unlikely(PyDict_SetItemString(modules, "c_ORFscores", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "c_ORFscores.pyx":2
 * #cython: language_level=3
 * __author__ = 'etseng@pacificbiosciences.com'             # <<<<<<<<<<<<<<
 * 
 * import itertools
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_u_etseng_pacificbiosciences_com) < 0) __PYX_ERR(0, 2, __pyx_L1_error)

  /* "c_ORFscores.pyx":4
 * __author__ = 'etseng@pacificbiosciences.com'
 * 
 * import itertools             # <<<<<<<<<<<<<<
 * from Bio.Alphabet import IUPAC
 * import Bio.Data.CodonTable as CodonTable
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_itertools, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itertools, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_ORFscores.pyx":5
 * 
 * import itertools
 * from Bio.Alphabet import IUPAC             # <<<<<<<<<<<<<<
 * import Bio.Data.CodonTable as CodonTable
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_IUPAC);
  __Pyx_GIVEREF(__pyx_n_s_IUPAC);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_IUPAC);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_Bio_Alphabet, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_IUPAC); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IUPAC, __pyx_t_1) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_ORFscores.pyx":6
 * import itertools
 * from Bio.Alphabet import IUPAC
 * import Bio.Data.CodonTable as CodonTable             # <<<<<<<<<<<<<<
 * 
 * from libcpp.utility cimport pair
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_);
  __Pyx_GIVEREF(__pyx_n_s_);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_Bio_Data_CodonTable, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CodonTable, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_ORFscores.pyx":13
 * from libcpp cimport bool
 * 
 * AMINO_LETTERS = [b'A', b'C', b'D', b'E', b'F', b'G',\             # <<<<<<<<<<<<<<
 * 		b'H', b'I', b'K', b'L', b'M', b'N', b'P', b'Q', b'R',\
 * 		b'S', b'T', b'V', b'W', b'Y', b'*']
 */
  __pyx_t_1 = PyList_New(21); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_b_A);
  __Pyx_GIVEREF(__pyx_n_b_A);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_b_A);
  __Pyx_INCREF(__pyx_n_b_C);
  __Pyx_GIVEREF(__pyx_n_b_C);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_b_C);
  __Pyx_INCREF(__pyx_n_b_D);
  __Pyx_GIVEREF(__pyx_n_b_D);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_b_D);
  __Pyx_INCREF(__pyx_n_b_E);
  __Pyx_GIVEREF(__pyx_n_b_E);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_b_E);
  __Pyx_INCREF(__pyx_n_b_F);
  __Pyx_GIVEREF(__pyx_n_b_F);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_b_F);
  __Pyx_INCREF(__pyx_n_b_G);
  __Pyx_GIVEREF(__pyx_n_b_G);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_b_G);
  __Pyx_INCREF(__pyx_n_b_H);
  __Pyx_GIVEREF(__pyx_n_b_H);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_b_H);
  __Pyx_INCREF(__pyx_n_b_I);
  __Pyx_GIVEREF(__pyx_n_b_I);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_b_I);
  __Pyx_INCREF(__pyx_n_b_K);
  __Pyx_GIVEREF(__pyx_n_b_K);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_b_K);
  __Pyx_INCREF(__pyx_n_b_L);
  __Pyx_GIVEREF(__pyx_n_b_L);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_b_L);
  __Pyx_INCREF(__pyx_n_b_M);
  __Pyx_GIVEREF(__pyx_n_b_M);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_b_M);
  __Pyx_INCREF(__pyx_n_b_N);
  __Pyx_GIVEREF(__pyx_n_b_N);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_b_N);
  __Pyx_INCREF(__pyx_n_b_P);
  __Pyx_GIVEREF(__pyx_n_b_P);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_n_b_P);
  __Pyx_INCREF(__pyx_n_b_Q);
  __Pyx_GIVEREF(__pyx_n_b_Q);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_n_b_Q);
  __Pyx_INCREF(__pyx_n_b_R);
  __Pyx_GIVEREF(__pyx_n_b_R);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_n_b_R);
  __Pyx_INCREF(__pyx_n_b_S);
  __Pyx_GIVEREF(__pyx_n_b_S);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_n_b_S);
  __Pyx_INCREF(__pyx_n_b_T);
  __Pyx_GIVEREF(__pyx_n_b_T);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_n_b_T);
  __Pyx_INCREF(__pyx_n_b_V);
  __Pyx_GIVEREF(__pyx_n_b_V);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_n_b_V);
  __Pyx_INCREF(__pyx_n_b_W);
  __Pyx_GIVEREF(__pyx_n_b_W);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_n_b_W);
  __Pyx_INCREF(__pyx_n_b_Y);
  __Pyx_GIVEREF(__pyx_n_b_Y);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_n_b_Y);
  __Pyx_INCREF(__pyx_kp_b_);
  __Pyx_GIVEREF(__pyx_kp_b_);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_kp_b_);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AMINO_LETTERS, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_ORFscores.pyx":16
 * 		b'H', b'I', b'K', b'L', b'M', b'N', b'P', b'Q', b'R',\
 * 		b'S', b'T', b'V', b'W', b'Y', b'*']
 * NT_LETTERS = [b'G', b'A', b'T', b'C']             # <<<<<<<<<<<<<<
 * CODON_LETTERS = [b"GGG",b"GGA",b"GGT",b"GGC",b"GAG",b"GAA",b"GAT",b"GAC",b"GTG",b"GTA",b"GTT",b"GTC",b"GCG",b"GCA",b"GCT",b"GCC",b"AGG",b"AGA",b"AGT",b"AGC",b"AAG",b"AAA",b"AAT",b"AAC",b"ATG",b"ATA",b"ATT",b"ATC",b"ACG",b"ACA",b"ACT",b"ACC",b"TGG",b"TGA",b"TGT",b"TGC",b"TAG",b"TAA",b"TAT",b"TAC",b"TTG",b"TTA",b"TTT",b"TTC",b"TCG",b"TCA",b"TCT",b"TCC",b"CGG",b"CGA",b"CGT",b"CGC",b"CAG",b"CAA",b"CAT",b"CAC",b"CTG",b"CTA",b"CTT",b"CTC",b"CCG",b"CCA",b"CCT",b"CCC"]
 * DIAMINO_LETTERS = [\
 */
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_b_G);
  __Pyx_GIVEREF(__pyx_n_b_G);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_b_G);
  __Pyx_INCREF(__pyx_n_b_A);
  __Pyx_GIVEREF(__pyx_n_b_A);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_b_A);
  __Pyx_INCREF(__pyx_n_b_T);
  __Pyx_GIVEREF(__pyx_n_b_T);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_b_T);
  __Pyx_INCREF(__pyx_n_b_C);
  __Pyx_GIVEREF(__pyx_n_b_C);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_b_C);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NT_LETTERS, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_ORFscores.pyx":17
 * 		b'S', b'T', b'V', b'W', b'Y', b'*']
 * NT_LETTERS = [b'G', b'A', b'T', b'C']
 * CODON_LETTERS = [b"GGG",b"GGA",b"GGT",b"GGC",b"GAG",b"GAA",b"GAT",b"GAC",b"GTG",b"GTA",b"GTT",b"GTC",b"GCG",b"GCA",b"GCT",b"GCC",b"AGG",b"AGA",b"AGT",b"AGC",b"AAG",b"AAA",b"AAT",b"AAC",b"ATG",b"ATA",b"ATT",b"ATC",b"ACG",b"ACA",b"ACT",b"ACC",b"TGG",b"TGA",b"TGT",b"TGC",b"TAG",b"TAA",b"TAT",b"TAC",b"TTG",b"TTA",b"TTT",b"TTC",b"TCG",b"TCA",b"TCT",b"TCC",b"CGG",b"CGA",b"CGT",b"CGC",b"CAG",b"CAA",b"CAT",b"CAC",b"CTG",b"CTA",b"CTT",b"CTC",b"CCG",b"CCA",b"CCT",b"CCC"]             # <<<<<<<<<<<<<<
 * DIAMINO_LETTERS = [\
 *     (b'A', b'A'),(b'A', b'C'),(b'A', b'D'),(b'A', b'E'),(b'A', b'F'),(b'A', b'G'),(b'A', b'H'),(b'A', b'I'),(b'A', b'K'),(b'A', b'L'),(b'A', b'M'),(b'A', b'N'),(b'A', b'P'),(b'A', b'Q'),(b'A', b'R'),(b'A', b'S'),(b'A', b'T'),(b'A', b'V'),(b'A', b'W'),(b'A', b'Y'),(b'A', b'*'),(b'C', b'A'),(b'C', b'C'),(b'C', b'D'),(b'C', b'E'),(b'C', b'F'),(b'C', b'G'),(b'C', b'H'),(b'C', b'I'),(b'C', b'K'),(b'C', b'L'),(b'C', b'M'),(b'C', b'N'),(b'C', b'P'),(b'C', b'Q'),(b'C', b'R'),(b'C', b'S'),(b'C', b'T'),(b'C', b'V'),(b'C', b'W'),(b'C', b'Y'),(b'C', b'*'),(b'D', b'A'),(b'D', b'C'),(b'D', b'D'),(b'D', b'E'),(b'D', b'F'),(b'D', b'G'),(b'D', b'H'),(b'D', b'I'),(b'D', b'K'),(b'D', b'L'),(b'D', b'M'),(b'D', b'N'),(b'D', b'P'),(b'D', b'Q'),(b'D', b'R'),(b'D', b'S'),(b'D', b'T'),(b'D', b'V'),(b'D', b'W'),(b'D', b'Y'),(b'D', b'*'),(b'E', b'A'),(b'E', b'C'),(b'E', b'D'),(b'E', b'E'),(b'E', b'F'),(b'E', b'G'),(b'E', b'H'),(b'E', b'I'),(b'E', b'K'),(b'E', b'L'),(b'E', b'M'),(b'E', b'N'),(b'E', b'P'),(b'E', b'Q'),(b'E', b'R'),(b'E', b'S'),(b'E', b'T'),(b'E', b'V'),(b'E', b'W'),(b'E', b'Y'),(b'E', b'*'),(b'F', b'A'),(b'F', b'C'),(b'F', b'D'),(b'F', b'E'),(b'F', b'F'),(b'F', b'G'),(b'F', b'H'),\
 */
  __pyx_t_1 = PyList_New(64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_b_GGG);
  __Pyx_GIVEREF(__pyx_n_b_GGG);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_b_GGG);
  __Pyx_INCREF(__pyx_n_b_GGA);
  __Pyx_GIVEREF(__pyx_n_b_GGA);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_b_GGA);
  __Pyx_INCREF(__pyx_n_b_GGT);
  __Pyx_GIVEREF(__pyx_n_b_GGT);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_b_GGT);
  __Pyx_INCREF(__pyx_n_b_GGC);
  __Pyx_GIVEREF(__pyx_n_b_GGC);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_b_GGC);
  __Pyx_INCREF(__pyx_n_b_GAG);
  __Pyx_GIVEREF(__pyx_n_b_GAG);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_b_GAG);
  __Pyx_INCREF(__pyx_n_b_GAA);
  __Pyx_GIVEREF(__pyx_n_b_GAA);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_b_GAA);
  __Pyx_INCREF(__pyx_n_b_GAT);
  __Pyx_GIVEREF(__pyx_n_b_GAT);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_b_GAT);
  __Pyx_INCREF(__pyx_n_b_GAC);
  __Pyx_GIVEREF(__pyx_n_b_GAC);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_b_GAC);
  __Pyx_INCREF(__pyx_n_b_GTG);
  __Pyx_GIVEREF(__pyx_n_b_GTG);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_b_GTG);
  __Pyx_INCREF(__pyx_n_b_GTA);
  __Pyx_GIVEREF(__pyx_n_b_GTA);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_b_GTA);
  __Pyx_INCREF(__pyx_n_b_GTT);
  __Pyx_GIVEREF(__pyx_n_b_GTT);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_b_GTT);
  __Pyx_INCREF(__pyx_n_b_GTC);
  __Pyx_GIVEREF(__pyx_n_b_GTC);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_b_GTC);
  __Pyx_INCREF(__pyx_n_b_GCG);
  __Pyx_GIVEREF(__pyx_n_b_GCG);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_n_b_GCG);
  __Pyx_INCREF(__pyx_n_b_GCA);
  __Pyx_GIVEREF(__pyx_n_b_GCA);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_n_b_GCA);
  __Pyx_INCREF(__pyx_n_b_GCT);
  __Pyx_GIVEREF(__pyx_n_b_GCT);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_n_b_GCT);
  __Pyx_INCREF(__pyx_n_b_GCC);
  __Pyx_GIVEREF(__pyx_n_b_GCC);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_n_b_GCC);
  __Pyx_INCREF(__pyx_n_b_AGG);
  __Pyx_GIVEREF(__pyx_n_b_AGG);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_n_b_AGG);
  __Pyx_INCREF(__pyx_n_b_AGA);
  __Pyx_GIVEREF(__pyx_n_b_AGA);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_n_b_AGA);
  __Pyx_INCREF(__pyx_n_b_AGT);
  __Pyx_GIVEREF(__pyx_n_b_AGT);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_n_b_AGT);
  __Pyx_INCREF(__pyx_n_b_AGC);
  __Pyx_GIVEREF(__pyx_n_b_AGC);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_n_b_AGC);
  __Pyx_INCREF(__pyx_n_b_AAG);
  __Pyx_GIVEREF(__pyx_n_b_AAG);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_n_b_AAG);
  __Pyx_INCREF(__pyx_n_b_AAA);
  __Pyx_GIVEREF(__pyx_n_b_AAA);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_n_b_AAA);
  __Pyx_INCREF(__pyx_n_b_AAT);
  __Pyx_GIVEREF(__pyx_n_b_AAT);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_n_b_AAT);
  __Pyx_INCREF(__pyx_n_b_AAC);
  __Pyx_GIVEREF(__pyx_n_b_AAC);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_n_b_AAC);
  __Pyx_INCREF(__pyx_n_b_ATG);
  __Pyx_GIVEREF(__pyx_n_b_ATG);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_n_b_ATG);
  __Pyx_INCREF(__pyx_n_b_ATA);
  __Pyx_GIVEREF(__pyx_n_b_ATA);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_n_b_ATA);
  __Pyx_INCREF(__pyx_n_b_ATT);
  __Pyx_GIVEREF(__pyx_n_b_ATT);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_n_b_ATT);
  __Pyx_INCREF(__pyx_n_b_ATC);
  __Pyx_GIVEREF(__pyx_n_b_ATC);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_n_b_ATC);
  __Pyx_INCREF(__pyx_n_b_ACG);
  __Pyx_GIVEREF(__pyx_n_b_ACG);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_n_b_ACG);
  __Pyx_INCREF(__pyx_n_b_ACA);
  __Pyx_GIVEREF(__pyx_n_b_ACA);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_n_b_ACA);
  __Pyx_INCREF(__pyx_n_b_ACT);
  __Pyx_GIVEREF(__pyx_n_b_ACT);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_n_b_ACT);
  __Pyx_INCREF(__pyx_n_b_ACC);
  __Pyx_GIVEREF(__pyx_n_b_ACC);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_n_b_ACC);
  __Pyx_INCREF(__pyx_n_b_TGG);
  __Pyx_GIVEREF(__pyx_n_b_TGG);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_n_b_TGG);
  __Pyx_INCREF(__pyx_n_b_TGA);
  __Pyx_GIVEREF(__pyx_n_b_TGA);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_n_b_TGA);
  __Pyx_INCREF(__pyx_n_b_TGT);
  __Pyx_GIVEREF(__pyx_n_b_TGT);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_n_b_TGT);
  __Pyx_INCREF(__pyx_n_b_TGC);
  __Pyx_GIVEREF(__pyx_n_b_TGC);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_n_b_TGC);
  __Pyx_INCREF(__pyx_n_b_TAG);
  __Pyx_GIVEREF(__pyx_n_b_TAG);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_n_b_TAG);
  __Pyx_INCREF(__pyx_n_b_TAA);
  __Pyx_GIVEREF(__pyx_n_b_TAA);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_n_b_TAA);
  __Pyx_INCREF(__pyx_n_b_TAT);
  __Pyx_GIVEREF(__pyx_n_b_TAT);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_n_b_TAT);
  __Pyx_INCREF(__pyx_n_b_TAC);
  __Pyx_GIVEREF(__pyx_n_b_TAC);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_n_b_TAC);
  __Pyx_INCREF(__pyx_n_b_TTG);
  __Pyx_GIVEREF(__pyx_n_b_TTG);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_n_b_TTG);
  __Pyx_INCREF(__pyx_n_b_TTA);
  __Pyx_GIVEREF(__pyx_n_b_TTA);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_n_b_TTA);
  __Pyx_INCREF(__pyx_n_b_TTT);
  __Pyx_GIVEREF(__pyx_n_b_TTT);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_n_b_TTT);
  __Pyx_INCREF(__pyx_n_b_TTC);
  __Pyx_GIVEREF(__pyx_n_b_TTC);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_n_b_TTC);
  __Pyx_INCREF(__pyx_n_b_TCG);
  __Pyx_GIVEREF(__pyx_n_b_TCG);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_n_b_TCG);
  __Pyx_INCREF(__pyx_n_b_TCA);
  __Pyx_GIVEREF(__pyx_n_b_TCA);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_n_b_TCA);
  __Pyx_INCREF(__pyx_n_b_TCT);
  __Pyx_GIVEREF(__pyx_n_b_TCT);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_n_b_TCT);
  __Pyx_INCREF(__pyx_n_b_TCC);
  __Pyx_GIVEREF(__pyx_n_b_TCC);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_n_b_TCC);
  __Pyx_INCREF(__pyx_n_b_CGG);
  __Pyx_GIVEREF(__pyx_n_b_CGG);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_n_b_CGG);
  __Pyx_INCREF(__pyx_n_b_CGA);
  __Pyx_GIVEREF(__pyx_n_b_CGA);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_n_b_CGA);
  __Pyx_INCREF(__pyx_n_b_CGT);
  __Pyx_GIVEREF(__pyx_n_b_CGT);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_n_b_CGT);
  __Pyx_INCREF(__pyx_n_b_CGC);
  __Pyx_GIVEREF(__pyx_n_b_CGC);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_n_b_CGC);
  __Pyx_INCREF(__pyx_n_b_CAG);
  __Pyx_GIVEREF(__pyx_n_b_CAG);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_n_b_CAG);
  __Pyx_INCREF(__pyx_n_b_CAA);
  __Pyx_GIVEREF(__pyx_n_b_CAA);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_n_b_CAA);
  __Pyx_INCREF(__pyx_n_b_CAT);
  __Pyx_GIVEREF(__pyx_n_b_CAT);
  PyList_SET_ITEM(__pyx_t_1, 54, __pyx_n_b_CAT);
  __Pyx_INCREF(__pyx_n_b_CAC);
  __Pyx_GIVEREF(__pyx_n_b_CAC);
  PyList_SET_ITEM(__pyx_t_1, 55, __pyx_n_b_CAC);
  __Pyx_INCREF(__pyx_n_b_CTG);
  __Pyx_GIVEREF(__pyx_n_b_CTG);
  PyList_SET_ITEM(__pyx_t_1, 56, __pyx_n_b_CTG);
  __Pyx_INCREF(__pyx_n_b_CTA);
  __Pyx_GIVEREF(__pyx_n_b_CTA);
  PyList_SET_ITEM(__pyx_t_1, 57, __pyx_n_b_CTA);
  __Pyx_INCREF(__pyx_n_b_CTT);
  __Pyx_GIVEREF(__pyx_n_b_CTT);
  PyList_SET_ITEM(__pyx_t_1, 58, __pyx_n_b_CTT);
  __Pyx_INCREF(__pyx_n_b_CTC);
  __Pyx_GIVEREF(__pyx_n_b_CTC);
  PyList_SET_ITEM(__pyx_t_1, 59, __pyx_n_b_CTC);
  __Pyx_INCREF(__pyx_n_b_CCG);
  __Pyx_GIVEREF(__pyx_n_b_CCG);
  PyList_SET_ITEM(__pyx_t_1, 60, __pyx_n_b_CCG);
  __Pyx_INCREF(__pyx_n_b_CCA);
  __Pyx_GIVEREF(__pyx_n_b_CCA);
  PyList_SET_ITEM(__pyx_t_1, 61, __pyx_n_b_CCA);
  __Pyx_INCREF(__pyx_n_b_CCT);
  __Pyx_GIVEREF(__pyx_n_b_CCT);
  PyList_SET_ITEM(__pyx_t_1, 62, __pyx_n_b_CCT);
  __Pyx_INCREF(__pyx_n_b_CCC);
  __Pyx_GIVEREF(__pyx_n_b_CCC);
  PyList_SET_ITEM(__pyx_t_1, 63, __pyx_n_b_CCC);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CODON_LETTERS, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_ORFscores.pyx":18
 * NT_LETTERS = [b'G', b'A', b'T', b'C']
 * CODON_LETTERS = [b"GGG",b"GGA",b"GGT",b"GGC",b"GAG",b"GAA",b"GAT",b"GAC",b"GTG",b"GTA",b"GTT",b"GTC",b"GCG",b"GCA",b"GCT",b"GCC",b"AGG",b"AGA",b"AGT",b"AGC",b"AAG",b"AAA",b"AAT",b"AAC",b"ATG",b"ATA",b"ATT",b"ATC",b"ACG",b"ACA",b"ACT",b"ACC",b"TGG",b"TGA",b"TGT",b"TGC",b"TAG",b"TAA",b"TAT",b"TAC",b"TTG",b"TTA",b"TTT",b"TTC",b"TCG",b"TCA",b"TCT",b"TCC",b"CGG",b"CGA",b"CGT",b"CGC",b"CAG",b"CAA",b"CAT",b"CAC",b"CTG",b"CTA",b"CTT",b"CTC",b"CCG",b"CCA",b"CCT",b"CCC"]
 * DIAMINO_LETTERS = [\             # <<<<<<<<<<<<<<
 *     (b'A', b'A'),(b'A', b'C'),(b'A', b'D'),(b'A', b'E'),(b'A', b'F'),(b'A', b'G'),(b'A', b'H'),(b'A', b'I'),(b'A', b'K'),(b'A', b'L'),(b'A', b'M'),(b'A', b'N'),(b'A', b'P'),(b'A', b'Q'),(b'A', b'R'),(b'A', b'S'),(b'A', b'T'),(b'A', b'V'),(b'A', b'W'),(b'A', b'Y'),(b'A', b'*'),(b'C', b'A'),(b'C', b'C'),(b'C', b'D'),(b'C', b'E'),(b'C', b'F'),(b'C', b'G'),(b'C', b'H'),(b'C', b'I'),(b'C', b'K'),(b'C', b'L'),(b'C', b'M'),(b'C', b'N'),(b'C', b'P'),(b'C', b'Q'),(b'C', b'R'),(b'C', b'S'),(b'C', b'T'),(b'C', b'V'),(b'C', b'W'),(b'C', b'Y'),(b'C', b'*'),(b'D', b'A'),(b'D', b'C'),(b'D', b'D'),(b'D', b'E'),(b'D', b'F'),(b'D', b'G'),(b'D', b'H'),(b'D', b'I'),(b'D', b'K'),(b'D', b'L'),(b'D', b'M'),(b'D', b'N'),(b'D', b'P'),(b'D', b'Q'),(b'D', b'R'),(b'D', b'S'),(b'D', b'T'),(b'D', b'V'),(b'D', b'W'),(b'D', b'Y'),(b'D', b'*'),(b'E', b'A'),(b'E', b'C'),(b'E', b'D'),(b'E', b'E'),(b'E', b'F'),(b'E', b'G'),(b'E', b'H'),(b'E', b'I'),(b'E', b'K'),(b'E', b'L'),(b'E', b'M'),(b'E', b'N'),(b'E', b'P'),(b'E', b'Q'),(b'E', b'R'),(b'E', b'S'),(b'E', b'T'),(b'E', b'V'),(b'E', b'W'),(b'E', b'Y'),(b'E', b'*'),(b'F', b'A'),(b'F', b'C'),(b'F', b'D'),(b'F', b'E'),(b'F', b'F'),(b'F', b'G'),(b'F', b'H'),\
 *     (b'F', b'I'),(b'F', b'K'),(b'F', b'L'),(b'F', b'M'),(b'F', b'N'),(b'F', b'P'),(b'F', b'Q'),(b'F', b'R'),(b'F', b'S'),(b'F', b'T'),(b'F', b'V'),(b'F', b'W'),(b'F', b'Y'),(b'F', b'*'),(b'G', b'A'),(b'G', b'C'),(b'G', b'D'),(b'G', b'E'),(b'G', b'F'),(b'G', b'G'),(b'G', b'H'),(b'G', b'I'),(b'G', b'K'),(b'G', b'L'),(b'G', b'M'),(b'G', b'N'),(b'G', b'P'),(b'G', b'Q'),(b'G', b'R'),(b'G', b'S'),(b'G', b'T'),(b'G', b'V'),(b'G', b'W'),(b'G', b'Y'),(b'G', b'*'),(b'H', b'A'),(b'H', b'C'),(b'H', b'D'),(b'H', b'E'),(b'H', b'F'),(b'H', b'G'),(b'H', b'H'),(b'H', b'I'),(b'H', b'K'),(b'H', b'L'),(b'H', b'M'),(b'H', b'N'),(b'H', b'P'),(b'H', b'Q'),(b'H', b'R'),(b'H', b'S'),(b'H', b'T'),(b'H', b'V'),(b'H', b'W'),(b'H', b'Y'),(b'H', b'*'),(b'I', b'A'),(b'I', b'C'),(b'I', b'D'),(b'I', b'E'),(b'I', b'F'),(b'I', b'G'),(b'I', b'H'),(b'I', b'I'),(b'I', b'K'),(b'I', b'L'),(b'I', b'M'),(b'I', b'N'),(b'I', b'P'),(b'I', b'Q'),(b'I', b'R'),(b'I', b'S'),(b'I', b'T'),(b'I', b'V'),(b'I', b'W'),(b'I', b'Y'),(b'I', b'*'),(b'K', b'A'),(b'K', b'C'),(b'K', b'D'),(b'K', b'E'),(b'K', b'F'),(b'K', b'G'),(b'K', b'H'),(b'K', b'I'),(b'K', b'K'),(b'K', b'L'),(b'K', b'M'),(b'K', b'N'),(b'K', b'P'),(b'K', b'Q'),\
 */
  __pyx_t_1 = PyList_New(441); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_tuple__2);
  __Pyx_INCREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_tuple__3);
  __Pyx_INCREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_tuple__4);
  __Pyx_INCREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_tuple__5);
  __Pyx_INCREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_tuple__6);
  __Pyx_INCREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_tuple__7);
  __Pyx_INCREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_tuple__8);
  __Pyx_INCREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_tuple__9);
  __Pyx_INCREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_tuple__10);
  __Pyx_INCREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_tuple__11);
  __Pyx_INCREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_tuple__12);
  __Pyx_INCREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_tuple__13);
  __Pyx_INCREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_tuple__14);
  __Pyx_INCREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_tuple__15);
  __Pyx_INCREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_tuple__16);
  __Pyx_INCREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_tuple__17);
  __Pyx_INCREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_tuple__18);
  __Pyx_INCREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_tuple__19);
  __Pyx_INCREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_tuple__20);
  __Pyx_INCREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_tuple__21);
  __Pyx_INCREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_tuple__22);
  __Pyx_INCREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_tuple__23);
  __Pyx_INCREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_tuple__24);
  __Pyx_INCREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_tuple__25);
  __Pyx_INCREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_tuple__26);
  __Pyx_INCREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_tuple__27);
  __Pyx_INCREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_tuple__28);
  __Pyx_INCREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_tuple__29);
  __Pyx_INCREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_tuple__30);
  __Pyx_INCREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_tuple__31);
  __Pyx_INCREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_tuple__32);
  __Pyx_INCREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_tuple__33);
  __Pyx_INCREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_tuple__34);
  __Pyx_INCREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_tuple__35);
  __Pyx_INCREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_tuple__36);
  __Pyx_INCREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_tuple__37);
  __Pyx_INCREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_tuple__38);
  __Pyx_INCREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_tuple__39);
  __Pyx_INCREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_tuple__40);
  __Pyx_INCREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_tuple__41);
  __Pyx_INCREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_tuple__42);
  __Pyx_INCREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_tuple__43);
  __Pyx_INCREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_tuple__44);
  __Pyx_INCREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_tuple__45);
  __Pyx_INCREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_tuple__46);
  __Pyx_INCREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_tuple__47);
  __Pyx_INCREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_tuple__48);
  __Pyx_INCREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_tuple__49);
  __Pyx_INCREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_tuple__50);
  __Pyx_INCREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_tuple__51);
  __Pyx_INCREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_tuple__52);
  __Pyx_INCREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_tuple__53);
  __Pyx_INCREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_tuple__54);
  __Pyx_INCREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_tuple__55);
  __Pyx_INCREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  PyList_SET_ITEM(__pyx_t_1, 54, __pyx_tuple__56);
  __Pyx_INCREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  PyList_SET_ITEM(__pyx_t_1, 55, __pyx_tuple__57);
  __Pyx_INCREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  PyList_SET_ITEM(__pyx_t_1, 56, __pyx_tuple__58);
  __Pyx_INCREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  PyList_SET_ITEM(__pyx_t_1, 57, __pyx_tuple__59);
  __Pyx_INCREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  PyList_SET_ITEM(__pyx_t_1, 58, __pyx_tuple__60);
  __Pyx_INCREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  PyList_SET_ITEM(__pyx_t_1, 59, __pyx_tuple__61);
  __Pyx_INCREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  PyList_SET_ITEM(__pyx_t_1, 60, __pyx_tuple__62);
  __Pyx_INCREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  PyList_SET_ITEM(__pyx_t_1, 61, __pyx_tuple__63);
  __Pyx_INCREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  PyList_SET_ITEM(__pyx_t_1, 62, __pyx_tuple__64);
  __Pyx_INCREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  PyList_SET_ITEM(__pyx_t_1, 63, __pyx_tuple__65);
  __Pyx_INCREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  PyList_SET_ITEM(__pyx_t_1, 64, __pyx_tuple__66);
  __Pyx_INCREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  PyList_SET_ITEM(__pyx_t_1, 65, __pyx_tuple__67);
  __Pyx_INCREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  PyList_SET_ITEM(__pyx_t_1, 66, __pyx_tuple__68);
  __Pyx_INCREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  PyList_SET_ITEM(__pyx_t_1, 67, __pyx_tuple__69);
  __Pyx_INCREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  PyList_SET_ITEM(__pyx_t_1, 68, __pyx_tuple__70);
  __Pyx_INCREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  PyList_SET_ITEM(__pyx_t_1, 69, __pyx_tuple__71);
  __Pyx_INCREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  PyList_SET_ITEM(__pyx_t_1, 70, __pyx_tuple__72);
  __Pyx_INCREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  PyList_SET_ITEM(__pyx_t_1, 71, __pyx_tuple__73);
  __Pyx_INCREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  PyList_SET_ITEM(__pyx_t_1, 72, __pyx_tuple__74);
  __Pyx_INCREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  PyList_SET_ITEM(__pyx_t_1, 73, __pyx_tuple__75);
  __Pyx_INCREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  PyList_SET_ITEM(__pyx_t_1, 74, __pyx_tuple__76);
  __Pyx_INCREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  PyList_SET_ITEM(__pyx_t_1, 75, __pyx_tuple__77);
  __Pyx_INCREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  PyList_SET_ITEM(__pyx_t_1, 76, __pyx_tuple__78);
  __Pyx_INCREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  PyList_SET_ITEM(__pyx_t_1, 77, __pyx_tuple__79);
  __Pyx_INCREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  PyList_SET_ITEM(__pyx_t_1, 78, __pyx_tuple__80);
  __Pyx_INCREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  PyList_SET_ITEM(__pyx_t_1, 79, __pyx_tuple__81);
  __Pyx_INCREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  PyList_SET_ITEM(__pyx_t_1, 80, __pyx_tuple__82);
  __Pyx_INCREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  PyList_SET_ITEM(__pyx_t_1, 81, __pyx_tuple__83);
  __Pyx_INCREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  PyList_SET_ITEM(__pyx_t_1, 82, __pyx_tuple__84);
  __Pyx_INCREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  PyList_SET_ITEM(__pyx_t_1, 83, __pyx_tuple__85);
  __Pyx_INCREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  PyList_SET_ITEM(__pyx_t_1, 84, __pyx_tuple__86);
  __Pyx_INCREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  PyList_SET_ITEM(__pyx_t_1, 85, __pyx_tuple__87);
  __Pyx_INCREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  PyList_SET_ITEM(__pyx_t_1, 86, __pyx_tuple__88);
  __Pyx_INCREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  PyList_SET_ITEM(__pyx_t_1, 87, __pyx_tuple__89);
  __Pyx_INCREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  PyList_SET_ITEM(__pyx_t_1, 88, __pyx_tuple__90);
  __Pyx_INCREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  PyList_SET_ITEM(__pyx_t_1, 89, __pyx_tuple__91);
  __Pyx_INCREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  PyList_SET_ITEM(__pyx_t_1, 90, __pyx_tuple__92);
  __Pyx_INCREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  PyList_SET_ITEM(__pyx_t_1, 91, __pyx_tuple__93);
  __Pyx_INCREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  PyList_SET_ITEM(__pyx_t_1, 92, __pyx_tuple__94);
  __Pyx_INCREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);
  PyList_SET_ITEM(__pyx_t_1, 93, __pyx_tuple__95);
  __Pyx_INCREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  PyList_SET_ITEM(__pyx_t_1, 94, __pyx_tuple__96);
  __Pyx_INCREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);
  PyList_SET_ITEM(__pyx_t_1, 95, __pyx_tuple__97);
  __Pyx_INCREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  PyList_SET_ITEM(__pyx_t_1, 96, __pyx_tuple__98);
  __Pyx_INCREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);
  PyList_SET_ITEM(__pyx_t_1, 97, __pyx_tuple__99);
  __Pyx_INCREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  PyList_SET_ITEM(__pyx_t_1, 98, __pyx_tuple__100);
  __Pyx_INCREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);
  PyList_SET_ITEM(__pyx_t_1, 99, __pyx_tuple__101);
  __Pyx_INCREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  PyList_SET_ITEM(__pyx_t_1, 100, __pyx_tuple__102);
  __Pyx_INCREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);
  PyList_SET_ITEM(__pyx_t_1, 101, __pyx_tuple__103);
  __Pyx_INCREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  PyList_SET_ITEM(__pyx_t_1, 102, __pyx_tuple__104);
  __Pyx_INCREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);
  PyList_SET_ITEM(__pyx_t_1, 103, __pyx_tuple__105);
  __Pyx_INCREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  PyList_SET_ITEM(__pyx_t_1, 104, __pyx_tuple__106);
  __Pyx_INCREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);
  PyList_SET_ITEM(__pyx_t_1, 105, __pyx_tuple__107);
  __Pyx_INCREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  PyList_SET_ITEM(__pyx_t_1, 106, __pyx_tuple__108);
  __Pyx_INCREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);
  PyList_SET_ITEM(__pyx_t_1, 107, __pyx_tuple__109);
  __Pyx_INCREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  PyList_SET_ITEM(__pyx_t_1, 108, __pyx_tuple__110);
  __Pyx_INCREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);
  PyList_SET_ITEM(__pyx_t_1, 109, __pyx_tuple__111);
  __Pyx_INCREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  PyList_SET_ITEM(__pyx_t_1, 110, __pyx_tuple__112);
  __Pyx_INCREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);
  PyList_SET_ITEM(__pyx_t_1, 111, __pyx_tuple__113);
  __Pyx_INCREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  PyList_SET_ITEM(__pyx_t_1, 112, __pyx_tuple__114);
  __Pyx_INCREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);
  PyList_SET_ITEM(__pyx_t_1, 113, __pyx_tuple__115);
  __Pyx_INCREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  PyList_SET_ITEM(__pyx_t_1, 114, __pyx_tuple__116);
  __Pyx_INCREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);
  PyList_SET_ITEM(__pyx_t_1, 115, __pyx_tuple__117);
  __Pyx_INCREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  PyList_SET_ITEM(__pyx_t_1, 116, __pyx_tuple__118);
  __Pyx_INCREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);
  PyList_SET_ITEM(__pyx_t_1, 117, __pyx_tuple__119);
  __Pyx_INCREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  PyList_SET_ITEM(__pyx_t_1, 118, __pyx_tuple__120);
  __Pyx_INCREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);
  PyList_SET_ITEM(__pyx_t_1, 119, __pyx_tuple__121);
  __Pyx_INCREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  PyList_SET_ITEM(__pyx_t_1, 120, __pyx_tuple__122);
  __Pyx_INCREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);
  PyList_SET_ITEM(__pyx_t_1, 121, __pyx_tuple__123);
  __Pyx_INCREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  PyList_SET_ITEM(__pyx_t_1, 122, __pyx_tuple__124);
  __Pyx_INCREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);
  PyList_SET_ITEM(__pyx_t_1, 123, __pyx_tuple__125);
  __Pyx_INCREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  PyList_SET_ITEM(__pyx_t_1, 124, __pyx_tuple__126);
  __Pyx_INCREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);
  PyList_SET_ITEM(__pyx_t_1, 125, __pyx_tuple__127);
  __Pyx_INCREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  PyList_SET_ITEM(__pyx_t_1, 126, __pyx_tuple__128);
  __Pyx_INCREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);
  PyList_SET_ITEM(__pyx_t_1, 127, __pyx_tuple__129);
  __Pyx_INCREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  PyList_SET_ITEM(__pyx_t_1, 128, __pyx_tuple__130);
  __Pyx_INCREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);
  PyList_SET_ITEM(__pyx_t_1, 129, __pyx_tuple__131);
  __Pyx_INCREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);
  PyList_SET_ITEM(__pyx_t_1, 130, __pyx_tuple__132);
  __Pyx_INCREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);
  PyList_SET_ITEM(__pyx_t_1, 131, __pyx_tuple__133);
  __Pyx_INCREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);
  PyList_SET_ITEM(__pyx_t_1, 132, __pyx_tuple__134);
  __Pyx_INCREF(__pyx_tuple__135);
  __Pyx_GIVEREF(__pyx_tuple__135);
  PyList_SET_ITEM(__pyx_t_1, 133, __pyx_tuple__135);
  __Pyx_INCREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);
  PyList_SET_ITEM(__pyx_t_1, 134, __pyx_tuple__136);
  __Pyx_INCREF(__pyx_tuple__137);
  __Pyx_GIVEREF(__pyx_tuple__137);
  PyList_SET_ITEM(__pyx_t_1, 135, __pyx_tuple__137);
  __Pyx_INCREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);
  PyList_SET_ITEM(__pyx_t_1, 136, __pyx_tuple__138);
  __Pyx_INCREF(__pyx_tuple__139);
  __Pyx_GIVEREF(__pyx_tuple__139);
  PyList_SET_ITEM(__pyx_t_1, 137, __pyx_tuple__139);
  __Pyx_INCREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);
  PyList_SET_ITEM(__pyx_t_1, 138, __pyx_tuple__140);
  __Pyx_INCREF(__pyx_tuple__141);
  __Pyx_GIVEREF(__pyx_tuple__141);
  PyList_SET_ITEM(__pyx_t_1, 139, __pyx_tuple__141);
  __Pyx_INCREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);
  PyList_SET_ITEM(__pyx_t_1, 140, __pyx_tuple__142);
  __Pyx_INCREF(__pyx_tuple__143);
  __Pyx_GIVEREF(__pyx_tuple__143);
  PyList_SET_ITEM(__pyx_t_1, 141, __pyx_tuple__143);
  __Pyx_INCREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);
  PyList_SET_ITEM(__pyx_t_1, 142, __pyx_tuple__144);
  __Pyx_INCREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);
  PyList_SET_ITEM(__pyx_t_1, 143, __pyx_tuple__145);
  __Pyx_INCREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);
  PyList_SET_ITEM(__pyx_t_1, 144, __pyx_tuple__146);
  __Pyx_INCREF(__pyx_tuple__147);
  __Pyx_GIVEREF(__pyx_tuple__147);
  PyList_SET_ITEM(__pyx_t_1, 145, __pyx_tuple__147);
  __Pyx_INCREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);
  PyList_SET_ITEM(__pyx_t_1, 146, __pyx_tuple__148);
  __Pyx_INCREF(__pyx_tuple__149);
  __Pyx_GIVEREF(__pyx_tuple__149);
  PyList_SET_ITEM(__pyx_t_1, 147, __pyx_tuple__149);
  __Pyx_INCREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);
  PyList_SET_ITEM(__pyx_t_1, 148, __pyx_tuple__150);
  __Pyx_INCREF(__pyx_tuple__151);
  __Pyx_GIVEREF(__pyx_tuple__151);
  PyList_SET_ITEM(__pyx_t_1, 149, __pyx_tuple__151);
  __Pyx_INCREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);
  PyList_SET_ITEM(__pyx_t_1, 150, __pyx_tuple__152);
  __Pyx_INCREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);
  PyList_SET_ITEM(__pyx_t_1, 151, __pyx_tuple__153);
  __Pyx_INCREF(__pyx_tuple__154);
  __Pyx_GIVEREF(__pyx_tuple__154);
  PyList_SET_ITEM(__pyx_t_1, 152, __pyx_tuple__154);
  __Pyx_INCREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);
  PyList_SET_ITEM(__pyx_t_1, 153, __pyx_tuple__155);
  __Pyx_INCREF(__pyx_tuple__156);
  __Pyx_GIVEREF(__pyx_tuple__156);
  PyList_SET_ITEM(__pyx_t_1, 154, __pyx_tuple__156);
  __Pyx_INCREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);
  PyList_SET_ITEM(__pyx_t_1, 155, __pyx_tuple__157);
  __Pyx_INCREF(__pyx_tuple__158);
  __Pyx_GIVEREF(__pyx_tuple__158);
  PyList_SET_ITEM(__pyx_t_1, 156, __pyx_tuple__158);
  __Pyx_INCREF(__pyx_tuple__159);
  __Pyx_GIVEREF(__pyx_tuple__159);
  PyList_SET_ITEM(__pyx_t_1, 157, __pyx_tuple__159);
  __Pyx_INCREF(__pyx_tuple__160);
  __Pyx_GIVEREF(__pyx_tuple__160);
  PyList_SET_ITEM(__pyx_t_1, 158, __pyx_tuple__160);
  __Pyx_INCREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);
  PyList_SET_ITEM(__pyx_t_1, 159, __pyx_tuple__161);
  __Pyx_INCREF(__pyx_tuple__162);
  __Pyx_GIVEREF(__pyx_tuple__162);
  PyList_SET_ITEM(__pyx_t_1, 160, __pyx_tuple__162);
  __Pyx_INCREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);
  PyList_SET_ITEM(__pyx_t_1, 161, __pyx_tuple__163);
  __Pyx_INCREF(__pyx_tuple__164);
  __Pyx_GIVEREF(__pyx_tuple__164);
  PyList_SET_ITEM(__pyx_t_1, 162, __pyx_tuple__164);
  __Pyx_INCREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);
  PyList_SET_ITEM(__pyx_t_1, 163, __pyx_tuple__165);
  __Pyx_INCREF(__pyx_tuple__166);
  __Pyx_GIVEREF(__pyx_tuple__166);
  PyList_SET_ITEM(__pyx_t_1, 164, __pyx_tuple__166);
  __Pyx_INCREF(__pyx_tuple__167);
  __Pyx_GIVEREF(__pyx_tuple__167);
  PyList_SET_ITEM(__pyx_t_1, 165, __pyx_tuple__167);
  __Pyx_INCREF(__pyx_tuple__168);
  __Pyx_GIVEREF(__pyx_tuple__168);
  PyList_SET_ITEM(__pyx_t_1, 166, __pyx_tuple__168);
  __Pyx_INCREF(__pyx_tuple__169);
  __Pyx_GIVEREF(__pyx_tuple__169);
  PyList_SET_ITEM(__pyx_t_1, 167, __pyx_tuple__169);
  __Pyx_INCREF(__pyx_tuple__170);
  __Pyx_GIVEREF(__pyx_tuple__170);
  PyList_SET_ITEM(__pyx_t_1, 168, __pyx_tuple__170);
  __Pyx_INCREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);
  PyList_SET_ITEM(__pyx_t_1, 169, __pyx_tuple__171);
  __Pyx_INCREF(__pyx_tuple__172);
  __Pyx_GIVEREF(__pyx_tuple__172);
  PyList_SET_ITEM(__pyx_t_1, 170, __pyx_tuple__172);
  __Pyx_INCREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);
  PyList_SET_ITEM(__pyx_t_1, 171, __pyx_tuple__173);
  __Pyx_INCREF(__pyx_tuple__174);
  __Pyx_GIVEREF(__pyx_tuple__174);
  PyList_SET_ITEM(__pyx_t_1, 172, __pyx_tuple__174);
  __Pyx_INCREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);
  PyList_SET_ITEM(__pyx_t_1, 173, __pyx_tuple__175);
  __Pyx_INCREF(__pyx_tuple__176);
  __Pyx_GIVEREF(__pyx_tuple__176);
  PyList_SET_ITEM(__pyx_t_1, 174, __pyx_tuple__176);
  __Pyx_INCREF(__pyx_tuple__177);
  __Pyx_GIVEREF(__pyx_tuple__177);
  PyList_SET_ITEM(__pyx_t_1, 175, __pyx_tuple__177);
  __Pyx_INCREF(__pyx_tuple__178);
  __Pyx_GIVEREF(__pyx_tuple__178);
  PyList_SET_ITEM(__pyx_t_1, 176, __pyx_tuple__178);
  __Pyx_INCREF(__pyx_tuple__179);
  __Pyx_GIVEREF(__pyx_tuple__179);
  PyList_SET_ITEM(__pyx_t_1, 177, __pyx_tuple__179);
  __Pyx_INCREF(__pyx_tuple__180);
  __Pyx_GIVEREF(__pyx_tuple__180);
  PyList_SET_ITEM(__pyx_t_1, 178, __pyx_tuple__180);
  __Pyx_INCREF(__pyx_tuple__181);
  __Pyx_GIVEREF(__pyx_tuple__181);
  PyList_SET_ITEM(__pyx_t_1, 179, __pyx_tuple__181);
  __Pyx_INCREF(__pyx_tuple__182);
  __Pyx_GIVEREF(__pyx_tuple__182);
  PyList_SET_ITEM(__pyx_t_1, 180, __pyx_tuple__182);
  __Pyx_INCREF(__pyx_tuple__183);
  __Pyx_GIVEREF(__pyx_tuple__183);
  PyList_SET_ITEM(__pyx_t_1, 181, __pyx_tuple__183);
  __Pyx_INCREF(__pyx_tuple__184);
  __Pyx_GIVEREF(__pyx_tuple__184);
  PyList_SET_ITEM(__pyx_t_1, 182, __pyx_tuple__184);
  __Pyx_INCREF(__pyx_tuple__185);
  __Pyx_GIVEREF(__pyx_tuple__185);
  PyList_SET_ITEM(__pyx_t_1, 183, __pyx_tuple__185);
  __Pyx_INCREF(__pyx_tuple__186);
  __Pyx_GIVEREF(__pyx_tuple__186);
  PyList_SET_ITEM(__pyx_t_1, 184, __pyx_tuple__186);
  __Pyx_INCREF(__pyx_tuple__187);
  __Pyx_GIVEREF(__pyx_tuple__187);
  PyList_SET_ITEM(__pyx_t_1, 185, __pyx_tuple__187);
  __Pyx_INCREF(__pyx_tuple__188);
  __Pyx_GIVEREF(__pyx_tuple__188);
  PyList_SET_ITEM(__pyx_t_1, 186, __pyx_tuple__188);
  __Pyx_INCREF(__pyx_tuple__189);
  __Pyx_GIVEREF(__pyx_tuple__189);
  PyList_SET_ITEM(__pyx_t_1, 187, __pyx_tuple__189);
  __Pyx_INCREF(__pyx_tuple__190);
  __Pyx_GIVEREF(__pyx_tuple__190);
  PyList_SET_ITEM(__pyx_t_1, 188, __pyx_tuple__190);
  __Pyx_INCREF(__pyx_tuple__191);
  __Pyx_GIVEREF(__pyx_tuple__191);
  PyList_SET_ITEM(__pyx_t_1, 189, __pyx_tuple__191);
  __Pyx_INCREF(__pyx_tuple__192);
  __Pyx_GIVEREF(__pyx_tuple__192);
  PyList_SET_ITEM(__pyx_t_1, 190, __pyx_tuple__192);
  __Pyx_INCREF(__pyx_tuple__193);
  __Pyx_GIVEREF(__pyx_tuple__193);
  PyList_SET_ITEM(__pyx_t_1, 191, __pyx_tuple__193);
  __Pyx_INCREF(__pyx_tuple__194);
  __Pyx_GIVEREF(__pyx_tuple__194);
  PyList_SET_ITEM(__pyx_t_1, 192, __pyx_tuple__194);
  __Pyx_INCREF(__pyx_tuple__195);
  __Pyx_GIVEREF(__pyx_tuple__195);
  PyList_SET_ITEM(__pyx_t_1, 193, __pyx_tuple__195);
  __Pyx_INCREF(__pyx_tuple__196);
  __Pyx_GIVEREF(__pyx_tuple__196);
  PyList_SET_ITEM(__pyx_t_1, 194, __pyx_tuple__196);
  __Pyx_INCREF(__pyx_tuple__197);
  __Pyx_GIVEREF(__pyx_tuple__197);
  PyList_SET_ITEM(__pyx_t_1, 195, __pyx_tuple__197);
  __Pyx_INCREF(__pyx_tuple__198);
  __Pyx_GIVEREF(__pyx_tuple__198);
  PyList_SET_ITEM(__pyx_t_1, 196, __pyx_tuple__198);
  __Pyx_INCREF(__pyx_tuple__199);
  __Pyx_GIVEREF(__pyx_tuple__199);
  PyList_SET_ITEM(__pyx_t_1, 197, __pyx_tuple__199);
  __Pyx_INCREF(__pyx_tuple__200);
  __Pyx_GIVEREF(__pyx_tuple__200);
  PyList_SET_ITEM(__pyx_t_1, 198, __pyx_tuple__200);
  __Pyx_INCREF(__pyx_tuple__201);
  __Pyx_GIVEREF(__pyx_tuple__201);
  PyList_SET_ITEM(__pyx_t_1, 199, __pyx_tuple__201);
  __Pyx_INCREF(__pyx_tuple__202);
  __Pyx_GIVEREF(__pyx_tuple__202);
  PyList_SET_ITEM(__pyx_t_1, 200, __pyx_tuple__202);
  __Pyx_INCREF(__pyx_tuple__203);
  __Pyx_GIVEREF(__pyx_tuple__203);
  PyList_SET_ITEM(__pyx_t_1, 201, __pyx_tuple__203);
  __Pyx_INCREF(__pyx_tuple__204);
  __Pyx_GIVEREF(__pyx_tuple__204);
  PyList_SET_ITEM(__pyx_t_1, 202, __pyx_tuple__204);
  __Pyx_INCREF(__pyx_tuple__205);
  __Pyx_GIVEREF(__pyx_tuple__205);
  PyList_SET_ITEM(__pyx_t_1, 203, __pyx_tuple__205);
  __Pyx_INCREF(__pyx_tuple__206);
  __Pyx_GIVEREF(__pyx_tuple__206);
  PyList_SET_ITEM(__pyx_t_1, 204, __pyx_tuple__206);
  __Pyx_INCREF(__pyx_tuple__207);
  __Pyx_GIVEREF(__pyx_tuple__207);
  PyList_SET_ITEM(__pyx_t_1, 205, __pyx_tuple__207);
  __Pyx_INCREF(__pyx_tuple__208);
  __Pyx_GIVEREF(__pyx_tuple__208);
  PyList_SET_ITEM(__pyx_t_1, 206, __pyx_tuple__208);
  __Pyx_INCREF(__pyx_tuple__209);
  __Pyx_GIVEREF(__pyx_tuple__209);
  PyList_SET_ITEM(__pyx_t_1, 207, __pyx_tuple__209);
  __Pyx_INCREF(__pyx_tuple__210);
  __Pyx_GIVEREF(__pyx_tuple__210);
  PyList_SET_ITEM(__pyx_t_1, 208, __pyx_tuple__210);
  __Pyx_INCREF(__pyx_tuple__211);
  __Pyx_GIVEREF(__pyx_tuple__211);
  PyList_SET_ITEM(__pyx_t_1, 209, __pyx_tuple__211);
  __Pyx_INCREF(__pyx_tuple__212);
  __Pyx_GIVEREF(__pyx_tuple__212);
  PyList_SET_ITEM(__pyx_t_1, 210, __pyx_tuple__212);
  __Pyx_INCREF(__pyx_tuple__213);
  __Pyx_GIVEREF(__pyx_tuple__213);
  PyList_SET_ITEM(__pyx_t_1, 211, __pyx_tuple__213);
  __Pyx_INCREF(__pyx_tuple__214);
  __Pyx_GIVEREF(__pyx_tuple__214);
  PyList_SET_ITEM(__pyx_t_1, 212, __pyx_tuple__214);
  __Pyx_INCREF(__pyx_tuple__215);
  __Pyx_GIVEREF(__pyx_tuple__215);
  PyList_SET_ITEM(__pyx_t_1, 213, __pyx_tuple__215);
  __Pyx_INCREF(__pyx_tuple__216);
  __Pyx_GIVEREF(__pyx_tuple__216);
  PyList_SET_ITEM(__pyx_t_1, 214, __pyx_tuple__216);
  __Pyx_INCREF(__pyx_tuple__217);
  __Pyx_GIVEREF(__pyx_tuple__217);
  PyList_SET_ITEM(__pyx_t_1, 215, __pyx_tuple__217);
  __Pyx_INCREF(__pyx_tuple__218);
  __Pyx_GIVEREF(__pyx_tuple__218);
  PyList_SET_ITEM(__pyx_t_1, 216, __pyx_tuple__218);
  __Pyx_INCREF(__pyx_tuple__219);
  __Pyx_GIVEREF(__pyx_tuple__219);
  PyList_SET_ITEM(__pyx_t_1, 217, __pyx_tuple__219);
  __Pyx_INCREF(__pyx_tuple__220);
  __Pyx_GIVEREF(__pyx_tuple__220);
  PyList_SET_ITEM(__pyx_t_1, 218, __pyx_tuple__220);
  __Pyx_INCREF(__pyx_tuple__221);
  __Pyx_GIVEREF(__pyx_tuple__221);
  PyList_SET_ITEM(__pyx_t_1, 219, __pyx_tuple__221);
  __Pyx_INCREF(__pyx_tuple__222);
  __Pyx_GIVEREF(__pyx_tuple__222);
  PyList_SET_ITEM(__pyx_t_1, 220, __pyx_tuple__222);
  __Pyx_INCREF(__pyx_tuple__223);
  __Pyx_GIVEREF(__pyx_tuple__223);
  PyList_SET_ITEM(__pyx_t_1, 221, __pyx_tuple__223);
  __Pyx_INCREF(__pyx_tuple__224);
  __Pyx_GIVEREF(__pyx_tuple__224);
  PyList_SET_ITEM(__pyx_t_1, 222, __pyx_tuple__224);
  __Pyx_INCREF(__pyx_tuple__225);
  __Pyx_GIVEREF(__pyx_tuple__225);
  PyList_SET_ITEM(__pyx_t_1, 223, __pyx_tuple__225);
  __Pyx_INCREF(__pyx_tuple__226);
  __Pyx_GIVEREF(__pyx_tuple__226);
  PyList_SET_ITEM(__pyx_t_1, 224, __pyx_tuple__226);
  __Pyx_INCREF(__pyx_tuple__227);
  __Pyx_GIVEREF(__pyx_tuple__227);
  PyList_SET_ITEM(__pyx_t_1, 225, __pyx_tuple__227);
  __Pyx_INCREF(__pyx_tuple__228);
  __Pyx_GIVEREF(__pyx_tuple__228);
  PyList_SET_ITEM(__pyx_t_1, 226, __pyx_tuple__228);
  __Pyx_INCREF(__pyx_tuple__229);
  __Pyx_GIVEREF(__pyx_tuple__229);
  PyList_SET_ITEM(__pyx_t_1, 227, __pyx_tuple__229);
  __Pyx_INCREF(__pyx_tuple__230);
  __Pyx_GIVEREF(__pyx_tuple__230);
  PyList_SET_ITEM(__pyx_t_1, 228, __pyx_tuple__230);
  __Pyx_INCREF(__pyx_tuple__231);
  __Pyx_GIVEREF(__pyx_tuple__231);
  PyList_SET_ITEM(__pyx_t_1, 229, __pyx_tuple__231);
  __Pyx_INCREF(__pyx_tuple__232);
  __Pyx_GIVEREF(__pyx_tuple__232);
  PyList_SET_ITEM(__pyx_t_1, 230, __pyx_tuple__232);
  __Pyx_INCREF(__pyx_tuple__233);
  __Pyx_GIVEREF(__pyx_tuple__233);
  PyList_SET_ITEM(__pyx_t_1, 231, __pyx_tuple__233);
  __Pyx_INCREF(__pyx_tuple__234);
  __Pyx_GIVEREF(__pyx_tuple__234);
  PyList_SET_ITEM(__pyx_t_1, 232, __pyx_tuple__234);
  __Pyx_INCREF(__pyx_tuple__235);
  __Pyx_GIVEREF(__pyx_tuple__235);
  PyList_SET_ITEM(__pyx_t_1, 233, __pyx_tuple__235);
  __Pyx_INCREF(__pyx_tuple__236);
  __Pyx_GIVEREF(__pyx_tuple__236);
  PyList_SET_ITEM(__pyx_t_1, 234, __pyx_tuple__236);
  __Pyx_INCREF(__pyx_tuple__237);
  __Pyx_GIVEREF(__pyx_tuple__237);
  PyList_SET_ITEM(__pyx_t_1, 235, __pyx_tuple__237);
  __Pyx_INCREF(__pyx_tuple__238);
  __Pyx_GIVEREF(__pyx_tuple__238);
  PyList_SET_ITEM(__pyx_t_1, 236, __pyx_tuple__238);
  __Pyx_INCREF(__pyx_tuple__239);
  __Pyx_GIVEREF(__pyx_tuple__239);
  PyList_SET_ITEM(__pyx_t_1, 237, __pyx_tuple__239);
  __Pyx_INCREF(__pyx_tuple__240);
  __Pyx_GIVEREF(__pyx_tuple__240);
  PyList_SET_ITEM(__pyx_t_1, 238, __pyx_tuple__240);
  __Pyx_INCREF(__pyx_tuple__241);
  __Pyx_GIVEREF(__pyx_tuple__241);
  PyList_SET_ITEM(__pyx_t_1, 239, __pyx_tuple__241);
  __Pyx_INCREF(__pyx_tuple__242);
  __Pyx_GIVEREF(__pyx_tuple__242);
  PyList_SET_ITEM(__pyx_t_1, 240, __pyx_tuple__242);
  __Pyx_INCREF(__pyx_tuple__243);
  __Pyx_GIVEREF(__pyx_tuple__243);
  PyList_SET_ITEM(__pyx_t_1, 241, __pyx_tuple__243);
  __Pyx_INCREF(__pyx_tuple__244);
  __Pyx_GIVEREF(__pyx_tuple__244);
  PyList_SET_ITEM(__pyx_t_1, 242, __pyx_tuple__244);
  __Pyx_INCREF(__pyx_tuple__245);
  __Pyx_GIVEREF(__pyx_tuple__245);
  PyList_SET_ITEM(__pyx_t_1, 243, __pyx_tuple__245);
  __Pyx_INCREF(__pyx_tuple__246);
  __Pyx_GIVEREF(__pyx_tuple__246);
  PyList_SET_ITEM(__pyx_t_1, 244, __pyx_tuple__246);
  __Pyx_INCREF(__pyx_tuple__247);
  __Pyx_GIVEREF(__pyx_tuple__247);
  PyList_SET_ITEM(__pyx_t_1, 245, __pyx_tuple__247);
  __Pyx_INCREF(__pyx_tuple__248);
  __Pyx_GIVEREF(__pyx_tuple__248);
  PyList_SET_ITEM(__pyx_t_1, 246, __pyx_tuple__248);
  __Pyx_INCREF(__pyx_tuple__249);
  __Pyx_GIVEREF(__pyx_tuple__249);
  PyList_SET_ITEM(__pyx_t_1, 247, __pyx_tuple__249);
  __Pyx_INCREF(__pyx_tuple__250);
  __Pyx_GIVEREF(__pyx_tuple__250);
  PyList_SET_ITEM(__pyx_t_1, 248, __pyx_tuple__250);
  __Pyx_INCREF(__pyx_tuple__251);
  __Pyx_GIVEREF(__pyx_tuple__251);
  PyList_SET_ITEM(__pyx_t_1, 249, __pyx_tuple__251);
  __Pyx_INCREF(__pyx_tuple__252);
  __Pyx_GIVEREF(__pyx_tuple__252);
  PyList_SET_ITEM(__pyx_t_1, 250, __pyx_tuple__252);
  __Pyx_INCREF(__pyx_tuple__253);
  __Pyx_GIVEREF(__pyx_tuple__253);
  PyList_SET_ITEM(__pyx_t_1, 251, __pyx_tuple__253);
  __Pyx_INCREF(__pyx_tuple__254);
  __Pyx_GIVEREF(__pyx_tuple__254);
  PyList_SET_ITEM(__pyx_t_1, 252, __pyx_tuple__254);
  __Pyx_INCREF(__pyx_tuple__255);
  __Pyx_GIVEREF(__pyx_tuple__255);
  PyList_SET_ITEM(__pyx_t_1, 253, __pyx_tuple__255);
  __Pyx_INCREF(__pyx_tuple__256);
  __Pyx_GIVEREF(__pyx_tuple__256);
  PyList_SET_ITEM(__pyx_t_1, 254, __pyx_tuple__256);
  __Pyx_INCREF(__pyx_tuple__257);
  __Pyx_GIVEREF(__pyx_tuple__257);
  PyList_SET_ITEM(__pyx_t_1, 255, __pyx_tuple__257);
  __Pyx_INCREF(__pyx_tuple__258);
  __Pyx_GIVEREF(__pyx_tuple__258);
  PyList_SET_ITEM(__pyx_t_1, 256, __pyx_tuple__258);
  __Pyx_INCREF(__pyx_tuple__259);
  __Pyx_GIVEREF(__pyx_tuple__259);
  PyList_SET_ITEM(__pyx_t_1, 257, __pyx_tuple__259);
  __Pyx_INCREF(__pyx_tuple__260);
  __Pyx_GIVEREF(__pyx_tuple__260);
  PyList_SET_ITEM(__pyx_t_1, 258, __pyx_tuple__260);
  __Pyx_INCREF(__pyx_tuple__261);
  __Pyx_GIVEREF(__pyx_tuple__261);
  PyList_SET_ITEM(__pyx_t_1, 259, __pyx_tuple__261);
  __Pyx_INCREF(__pyx_tuple__262);
  __Pyx_GIVEREF(__pyx_tuple__262);
  PyList_SET_ITEM(__pyx_t_1, 260, __pyx_tuple__262);
  __Pyx_INCREF(__pyx_tuple__263);
  __Pyx_GIVEREF(__pyx_tuple__263);
  PyList_SET_ITEM(__pyx_t_1, 261, __pyx_tuple__263);
  __Pyx_INCREF(__pyx_tuple__264);
  __Pyx_GIVEREF(__pyx_tuple__264);
  PyList_SET_ITEM(__pyx_t_1, 262, __pyx_tuple__264);
  __Pyx_INCREF(__pyx_tuple__265);
  __Pyx_GIVEREF(__pyx_tuple__265);
  PyList_SET_ITEM(__pyx_t_1, 263, __pyx_tuple__265);
  __Pyx_INCREF(__pyx_tuple__266);
  __Pyx_GIVEREF(__pyx_tuple__266);
  PyList_SET_ITEM(__pyx_t_1, 264, __pyx_tuple__266);
  __Pyx_INCREF(__pyx_tuple__267);
  __Pyx_GIVEREF(__pyx_tuple__267);
  PyList_SET_ITEM(__pyx_t_1, 265, __pyx_tuple__267);
  __Pyx_INCREF(__pyx_tuple__268);
  __Pyx_GIVEREF(__pyx_tuple__268);
  PyList_SET_ITEM(__pyx_t_1, 266, __pyx_tuple__268);
  __Pyx_INCREF(__pyx_tuple__269);
  __Pyx_GIVEREF(__pyx_tuple__269);
  PyList_SET_ITEM(__pyx_t_1, 267, __pyx_tuple__269);
  __Pyx_INCREF(__pyx_tuple__270);
  __Pyx_GIVEREF(__pyx_tuple__270);
  PyList_SET_ITEM(__pyx_t_1, 268, __pyx_tuple__270);
  __Pyx_INCREF(__pyx_tuple__271);
  __Pyx_GIVEREF(__pyx_tuple__271);
  PyList_SET_ITEM(__pyx_t_1, 269, __pyx_tuple__271);
  __Pyx_INCREF(__pyx_tuple__272);
  __Pyx_GIVEREF(__pyx_tuple__272);
  PyList_SET_ITEM(__pyx_t_1, 270, __pyx_tuple__272);
  __Pyx_INCREF(__pyx_tuple__273);
  __Pyx_GIVEREF(__pyx_tuple__273);
  PyList_SET_ITEM(__pyx_t_1, 271, __pyx_tuple__273);
  __Pyx_INCREF(__pyx_tuple__274);
  __Pyx_GIVEREF(__pyx_tuple__274);
  PyList_SET_ITEM(__pyx_t_1, 272, __pyx_tuple__274);
  __Pyx_INCREF(__pyx_tuple__275);
  __Pyx_GIVEREF(__pyx_tuple__275);
  PyList_SET_ITEM(__pyx_t_1, 273, __pyx_tuple__275);
  __Pyx_INCREF(__pyx_tuple__276);
  __Pyx_GIVEREF(__pyx_tuple__276);
  PyList_SET_ITEM(__pyx_t_1, 274, __pyx_tuple__276);
  __Pyx_INCREF(__pyx_tuple__277);
  __Pyx_GIVEREF(__pyx_tuple__277);
  PyList_SET_ITEM(__pyx_t_1, 275, __pyx_tuple__277);
  __Pyx_INCREF(__pyx_tuple__278);
  __Pyx_GIVEREF(__pyx_tuple__278);
  PyList_SET_ITEM(__pyx_t_1, 276, __pyx_tuple__278);
  __Pyx_INCREF(__pyx_tuple__279);
  __Pyx_GIVEREF(__pyx_tuple__279);
  PyList_SET_ITEM(__pyx_t_1, 277, __pyx_tuple__279);
  __Pyx_INCREF(__pyx_tuple__280);
  __Pyx_GIVEREF(__pyx_tuple__280);
  PyList_SET_ITEM(__pyx_t_1, 278, __pyx_tuple__280);
  __Pyx_INCREF(__pyx_tuple__281);
  __Pyx_GIVEREF(__pyx_tuple__281);
  PyList_SET_ITEM(__pyx_t_1, 279, __pyx_tuple__281);
  __Pyx_INCREF(__pyx_tuple__282);
  __Pyx_GIVEREF(__pyx_tuple__282);
  PyList_SET_ITEM(__pyx_t_1, 280, __pyx_tuple__282);
  __Pyx_INCREF(__pyx_tuple__283);
  __Pyx_GIVEREF(__pyx_tuple__283);
  PyList_SET_ITEM(__pyx_t_1, 281, __pyx_tuple__283);
  __Pyx_INCREF(__pyx_tuple__284);
  __Pyx_GIVEREF(__pyx_tuple__284);
  PyList_SET_ITEM(__pyx_t_1, 282, __pyx_tuple__284);
  __Pyx_INCREF(__pyx_tuple__285);
  __Pyx_GIVEREF(__pyx_tuple__285);
  PyList_SET_ITEM(__pyx_t_1, 283, __pyx_tuple__285);
  __Pyx_INCREF(__pyx_tuple__286);
  __Pyx_GIVEREF(__pyx_tuple__286);
  PyList_SET_ITEM(__pyx_t_1, 284, __pyx_tuple__286);
  __Pyx_INCREF(__pyx_tuple__287);
  __Pyx_GIVEREF(__pyx_tuple__287);
  PyList_SET_ITEM(__pyx_t_1, 285, __pyx_tuple__287);
  __Pyx_INCREF(__pyx_tuple__288);
  __Pyx_GIVEREF(__pyx_tuple__288);
  PyList_SET_ITEM(__pyx_t_1, 286, __pyx_tuple__288);
  __Pyx_INCREF(__pyx_tuple__289);
  __Pyx_GIVEREF(__pyx_tuple__289);
  PyList_SET_ITEM(__pyx_t_1, 287, __pyx_tuple__289);
  __Pyx_INCREF(__pyx_tuple__290);
  __Pyx_GIVEREF(__pyx_tuple__290);
  PyList_SET_ITEM(__pyx_t_1, 288, __pyx_tuple__290);
  __Pyx_INCREF(__pyx_tuple__291);
  __Pyx_GIVEREF(__pyx_tuple__291);
  PyList_SET_ITEM(__pyx_t_1, 289, __pyx_tuple__291);
  __Pyx_INCREF(__pyx_tuple__292);
  __Pyx_GIVEREF(__pyx_tuple__292);
  PyList_SET_ITEM(__pyx_t_1, 290, __pyx_tuple__292);
  __Pyx_INCREF(__pyx_tuple__293);
  __Pyx_GIVEREF(__pyx_tuple__293);
  PyList_SET_ITEM(__pyx_t_1, 291, __pyx_tuple__293);
  __Pyx_INCREF(__pyx_tuple__294);
  __Pyx_GIVEREF(__pyx_tuple__294);
  PyList_SET_ITEM(__pyx_t_1, 292, __pyx_tuple__294);
  __Pyx_INCREF(__pyx_tuple__295);
  __Pyx_GIVEREF(__pyx_tuple__295);
  PyList_SET_ITEM(__pyx_t_1, 293, __pyx_tuple__295);
  __Pyx_INCREF(__pyx_tuple__296);
  __Pyx_GIVEREF(__pyx_tuple__296);
  PyList_SET_ITEM(__pyx_t_1, 294, __pyx_tuple__296);
  __Pyx_INCREF(__pyx_tuple__297);
  __Pyx_GIVEREF(__pyx_tuple__297);
  PyList_SET_ITEM(__pyx_t_1, 295, __pyx_tuple__297);
  __Pyx_INCREF(__pyx_tuple__298);
  __Pyx_GIVEREF(__pyx_tuple__298);
  PyList_SET_ITEM(__pyx_t_1, 296, __pyx_tuple__298);
  __Pyx_INCREF(__pyx_tuple__299);
  __Pyx_GIVEREF(__pyx_tuple__299);
  PyList_SET_ITEM(__pyx_t_1, 297, __pyx_tuple__299);
  __Pyx_INCREF(__pyx_tuple__300);
  __Pyx_GIVEREF(__pyx_tuple__300);
  PyList_SET_ITEM(__pyx_t_1, 298, __pyx_tuple__300);
  __Pyx_INCREF(__pyx_tuple__301);
  __Pyx_GIVEREF(__pyx_tuple__301);
  PyList_SET_ITEM(__pyx_t_1, 299, __pyx_tuple__301);
  __Pyx_INCREF(__pyx_tuple__302);
  __Pyx_GIVEREF(__pyx_tuple__302);
  PyList_SET_ITEM(__pyx_t_1, 300, __pyx_tuple__302);
  __Pyx_INCREF(__pyx_tuple__303);
  __Pyx_GIVEREF(__pyx_tuple__303);
  PyList_SET_ITEM(__pyx_t_1, 301, __pyx_tuple__303);
  __Pyx_INCREF(__pyx_tuple__304);
  __Pyx_GIVEREF(__pyx_tuple__304);
  PyList_SET_ITEM(__pyx_t_1, 302, __pyx_tuple__304);
  __Pyx_INCREF(__pyx_tuple__305);
  __Pyx_GIVEREF(__pyx_tuple__305);
  PyList_SET_ITEM(__pyx_t_1, 303, __pyx_tuple__305);
  __Pyx_INCREF(__pyx_tuple__306);
  __Pyx_GIVEREF(__pyx_tuple__306);
  PyList_SET_ITEM(__pyx_t_1, 304, __pyx_tuple__306);
  __Pyx_INCREF(__pyx_tuple__307);
  __Pyx_GIVEREF(__pyx_tuple__307);
  PyList_SET_ITEM(__pyx_t_1, 305, __pyx_tuple__307);
  __Pyx_INCREF(__pyx_tuple__308);
  __Pyx_GIVEREF(__pyx_tuple__308);
  PyList_SET_ITEM(__pyx_t_1, 306, __pyx_tuple__308);
  __Pyx_INCREF(__pyx_tuple__309);
  __Pyx_GIVEREF(__pyx_tuple__309);
  PyList_SET_ITEM(__pyx_t_1, 307, __pyx_tuple__309);
  __Pyx_INCREF(__pyx_tuple__310);
  __Pyx_GIVEREF(__pyx_tuple__310);
  PyList_SET_ITEM(__pyx_t_1, 308, __pyx_tuple__310);
  __Pyx_INCREF(__pyx_tuple__311);
  __Pyx_GIVEREF(__pyx_tuple__311);
  PyList_SET_ITEM(__pyx_t_1, 309, __pyx_tuple__311);
  __Pyx_INCREF(__pyx_tuple__312);
  __Pyx_GIVEREF(__pyx_tuple__312);
  PyList_SET_ITEM(__pyx_t_1, 310, __pyx_tuple__312);
  __Pyx_INCREF(__pyx_tuple__313);
  __Pyx_GIVEREF(__pyx_tuple__313);
  PyList_SET_ITEM(__pyx_t_1, 311, __pyx_tuple__313);
  __Pyx_INCREF(__pyx_tuple__314);
  __Pyx_GIVEREF(__pyx_tuple__314);
  PyList_SET_ITEM(__pyx_t_1, 312, __pyx_tuple__314);
  __Pyx_INCREF(__pyx_tuple__315);
  __Pyx_GIVEREF(__pyx_tuple__315);
  PyList_SET_ITEM(__pyx_t_1, 313, __pyx_tuple__315);
  __Pyx_INCREF(__pyx_tuple__316);
  __Pyx_GIVEREF(__pyx_tuple__316);
  PyList_SET_ITEM(__pyx_t_1, 314, __pyx_tuple__316);
  __Pyx_INCREF(__pyx_tuple__317);
  __Pyx_GIVEREF(__pyx_tuple__317);
  PyList_SET_ITEM(__pyx_t_1, 315, __pyx_tuple__317);
  __Pyx_INCREF(__pyx_tuple__318);
  __Pyx_GIVEREF(__pyx_tuple__318);
  PyList_SET_ITEM(__pyx_t_1, 316, __pyx_tuple__318);
  __Pyx_INCREF(__pyx_tuple__319);
  __Pyx_GIVEREF(__pyx_tuple__319);
  PyList_SET_ITEM(__pyx_t_1, 317, __pyx_tuple__319);
  __Pyx_INCREF(__pyx_tuple__320);
  __Pyx_GIVEREF(__pyx_tuple__320);
  PyList_SET_ITEM(__pyx_t_1, 318, __pyx_tuple__320);
  __Pyx_INCREF(__pyx_tuple__321);
  __Pyx_GIVEREF(__pyx_tuple__321);
  PyList_SET_ITEM(__pyx_t_1, 319, __pyx_tuple__321);
  __Pyx_INCREF(__pyx_tuple__322);
  __Pyx_GIVEREF(__pyx_tuple__322);
  PyList_SET_ITEM(__pyx_t_1, 320, __pyx_tuple__322);
  __Pyx_INCREF(__pyx_tuple__323);
  __Pyx_GIVEREF(__pyx_tuple__323);
  PyList_SET_ITEM(__pyx_t_1, 321, __pyx_tuple__323);
  __Pyx_INCREF(__pyx_tuple__324);
  __Pyx_GIVEREF(__pyx_tuple__324);
  PyList_SET_ITEM(__pyx_t_1, 322, __pyx_tuple__324);
  __Pyx_INCREF(__pyx_tuple__325);
  __Pyx_GIVEREF(__pyx_tuple__325);
  PyList_SET_ITEM(__pyx_t_1, 323, __pyx_tuple__325);
  __Pyx_INCREF(__pyx_tuple__326);
  __Pyx_GIVEREF(__pyx_tuple__326);
  PyList_SET_ITEM(__pyx_t_1, 324, __pyx_tuple__326);
  __Pyx_INCREF(__pyx_tuple__327);
  __Pyx_GIVEREF(__pyx_tuple__327);
  PyList_SET_ITEM(__pyx_t_1, 325, __pyx_tuple__327);
  __Pyx_INCREF(__pyx_tuple__328);
  __Pyx_GIVEREF(__pyx_tuple__328);
  PyList_SET_ITEM(__pyx_t_1, 326, __pyx_tuple__328);
  __Pyx_INCREF(__pyx_tuple__329);
  __Pyx_GIVEREF(__pyx_tuple__329);
  PyList_SET_ITEM(__pyx_t_1, 327, __pyx_tuple__329);
  __Pyx_INCREF(__pyx_tuple__330);
  __Pyx_GIVEREF(__pyx_tuple__330);
  PyList_SET_ITEM(__pyx_t_1, 328, __pyx_tuple__330);
  __Pyx_INCREF(__pyx_tuple__331);
  __Pyx_GIVEREF(__pyx_tuple__331);
  PyList_SET_ITEM(__pyx_t_1, 329, __pyx_tuple__331);
  __Pyx_INCREF(__pyx_tuple__332);
  __Pyx_GIVEREF(__pyx_tuple__332);
  PyList_SET_ITEM(__pyx_t_1, 330, __pyx_tuple__332);
  __Pyx_INCREF(__pyx_tuple__333);
  __Pyx_GIVEREF(__pyx_tuple__333);
  PyList_SET_ITEM(__pyx_t_1, 331, __pyx_tuple__333);
  __Pyx_INCREF(__pyx_tuple__334);
  __Pyx_GIVEREF(__pyx_tuple__334);
  PyList_SET_ITEM(__pyx_t_1, 332, __pyx_tuple__334);
  __Pyx_INCREF(__pyx_tuple__335);
  __Pyx_GIVEREF(__pyx_tuple__335);
  PyList_SET_ITEM(__pyx_t_1, 333, __pyx_tuple__335);
  __Pyx_INCREF(__pyx_tuple__336);
  __Pyx_GIVEREF(__pyx_tuple__336);
  PyList_SET_ITEM(__pyx_t_1, 334, __pyx_tuple__336);
  __Pyx_INCREF(__pyx_tuple__337);
  __Pyx_GIVEREF(__pyx_tuple__337);
  PyList_SET_ITEM(__pyx_t_1, 335, __pyx_tuple__337);
  __Pyx_INCREF(__pyx_tuple__338);
  __Pyx_GIVEREF(__pyx_tuple__338);
  PyList_SET_ITEM(__pyx_t_1, 336, __pyx_tuple__338);
  __Pyx_INCREF(__pyx_tuple__339);
  __Pyx_GIVEREF(__pyx_tuple__339);
  PyList_SET_ITEM(__pyx_t_1, 337, __pyx_tuple__339);
  __Pyx_INCREF(__pyx_tuple__340);
  __Pyx_GIVEREF(__pyx_tuple__340);
  PyList_SET_ITEM(__pyx_t_1, 338, __pyx_tuple__340);
  __Pyx_INCREF(__pyx_tuple__341);
  __Pyx_GIVEREF(__pyx_tuple__341);
  PyList_SET_ITEM(__pyx_t_1, 339, __pyx_tuple__341);
  __Pyx_INCREF(__pyx_tuple__342);
  __Pyx_GIVEREF(__pyx_tuple__342);
  PyList_SET_ITEM(__pyx_t_1, 340, __pyx_tuple__342);
  __Pyx_INCREF(__pyx_tuple__343);
  __Pyx_GIVEREF(__pyx_tuple__343);
  PyList_SET_ITEM(__pyx_t_1, 341, __pyx_tuple__343);
  __Pyx_INCREF(__pyx_tuple__344);
  __Pyx_GIVEREF(__pyx_tuple__344);
  PyList_SET_ITEM(__pyx_t_1, 342, __pyx_tuple__344);
  __Pyx_INCREF(__pyx_tuple__345);
  __Pyx_GIVEREF(__pyx_tuple__345);
  PyList_SET_ITEM(__pyx_t_1, 343, __pyx_tuple__345);
  __Pyx_INCREF(__pyx_tuple__346);
  __Pyx_GIVEREF(__pyx_tuple__346);
  PyList_SET_ITEM(__pyx_t_1, 344, __pyx_tuple__346);
  __Pyx_INCREF(__pyx_tuple__347);
  __Pyx_GIVEREF(__pyx_tuple__347);
  PyList_SET_ITEM(__pyx_t_1, 345, __pyx_tuple__347);
  __Pyx_INCREF(__pyx_tuple__348);
  __Pyx_GIVEREF(__pyx_tuple__348);
  PyList_SET_ITEM(__pyx_t_1, 346, __pyx_tuple__348);
  __Pyx_INCREF(__pyx_tuple__349);
  __Pyx_GIVEREF(__pyx_tuple__349);
  PyList_SET_ITEM(__pyx_t_1, 347, __pyx_tuple__349);
  __Pyx_INCREF(__pyx_tuple__350);
  __Pyx_GIVEREF(__pyx_tuple__350);
  PyList_SET_ITEM(__pyx_t_1, 348, __pyx_tuple__350);
  __Pyx_INCREF(__pyx_tuple__351);
  __Pyx_GIVEREF(__pyx_tuple__351);
  PyList_SET_ITEM(__pyx_t_1, 349, __pyx_tuple__351);
  __Pyx_INCREF(__pyx_tuple__352);
  __Pyx_GIVEREF(__pyx_tuple__352);
  PyList_SET_ITEM(__pyx_t_1, 350, __pyx_tuple__352);
  __Pyx_INCREF(__pyx_tuple__353);
  __Pyx_GIVEREF(__pyx_tuple__353);
  PyList_SET_ITEM(__pyx_t_1, 351, __pyx_tuple__353);
  __Pyx_INCREF(__pyx_tuple__354);
  __Pyx_GIVEREF(__pyx_tuple__354);
  PyList_SET_ITEM(__pyx_t_1, 352, __pyx_tuple__354);
  __Pyx_INCREF(__pyx_tuple__355);
  __Pyx_GIVEREF(__pyx_tuple__355);
  PyList_SET_ITEM(__pyx_t_1, 353, __pyx_tuple__355);
  __Pyx_INCREF(__pyx_tuple__356);
  __Pyx_GIVEREF(__pyx_tuple__356);
  PyList_SET_ITEM(__pyx_t_1, 354, __pyx_tuple__356);
  __Pyx_INCREF(__pyx_tuple__357);
  __Pyx_GIVEREF(__pyx_tuple__357);
  PyList_SET_ITEM(__pyx_t_1, 355, __pyx_tuple__357);
  __Pyx_INCREF(__pyx_tuple__358);
  __Pyx_GIVEREF(__pyx_tuple__358);
  PyList_SET_ITEM(__pyx_t_1, 356, __pyx_tuple__358);
  __Pyx_INCREF(__pyx_tuple__359);
  __Pyx_GIVEREF(__pyx_tuple__359);
  PyList_SET_ITEM(__pyx_t_1, 357, __pyx_tuple__359);
  __Pyx_INCREF(__pyx_tuple__360);
  __Pyx_GIVEREF(__pyx_tuple__360);
  PyList_SET_ITEM(__pyx_t_1, 358, __pyx_tuple__360);
  __Pyx_INCREF(__pyx_tuple__361);
  __Pyx_GIVEREF(__pyx_tuple__361);
  PyList_SET_ITEM(__pyx_t_1, 359, __pyx_tuple__361);
  __Pyx_INCREF(__pyx_tuple__362);
  __Pyx_GIVEREF(__pyx_tuple__362);
  PyList_SET_ITEM(__pyx_t_1, 360, __pyx_tuple__362);
  __Pyx_INCREF(__pyx_tuple__363);
  __Pyx_GIVEREF(__pyx_tuple__363);
  PyList_SET_ITEM(__pyx_t_1, 361, __pyx_tuple__363);
  __Pyx_INCREF(__pyx_tuple__364);
  __Pyx_GIVEREF(__pyx_tuple__364);
  PyList_SET_ITEM(__pyx_t_1, 362, __pyx_tuple__364);
  __Pyx_INCREF(__pyx_tuple__365);
  __Pyx_GIVEREF(__pyx_tuple__365);
  PyList_SET_ITEM(__pyx_t_1, 363, __pyx_tuple__365);
  __Pyx_INCREF(__pyx_tuple__366);
  __Pyx_GIVEREF(__pyx_tuple__366);
  PyList_SET_ITEM(__pyx_t_1, 364, __pyx_tuple__366);
  __Pyx_INCREF(__pyx_tuple__367);
  __Pyx_GIVEREF(__pyx_tuple__367);
  PyList_SET_ITEM(__pyx_t_1, 365, __pyx_tuple__367);
  __Pyx_INCREF(__pyx_tuple__368);
  __Pyx_GIVEREF(__pyx_tuple__368);
  PyList_SET_ITEM(__pyx_t_1, 366, __pyx_tuple__368);
  __Pyx_INCREF(__pyx_tuple__369);
  __Pyx_GIVEREF(__pyx_tuple__369);
  PyList_SET_ITEM(__pyx_t_1, 367, __pyx_tuple__369);
  __Pyx_INCREF(__pyx_tuple__370);
  __Pyx_GIVEREF(__pyx_tuple__370);
  PyList_SET_ITEM(__pyx_t_1, 368, __pyx_tuple__370);
  __Pyx_INCREF(__pyx_tuple__371);
  __Pyx_GIVEREF(__pyx_tuple__371);
  PyList_SET_ITEM(__pyx_t_1, 369, __pyx_tuple__371);
  __Pyx_INCREF(__pyx_tuple__372);
  __Pyx_GIVEREF(__pyx_tuple__372);
  PyList_SET_ITEM(__pyx_t_1, 370, __pyx_tuple__372);
  __Pyx_INCREF(__pyx_tuple__373);
  __Pyx_GIVEREF(__pyx_tuple__373);
  PyList_SET_ITEM(__pyx_t_1, 371, __pyx_tuple__373);
  __Pyx_INCREF(__pyx_tuple__374);
  __Pyx_GIVEREF(__pyx_tuple__374);
  PyList_SET_ITEM(__pyx_t_1, 372, __pyx_tuple__374);
  __Pyx_INCREF(__pyx_tuple__375);
  __Pyx_GIVEREF(__pyx_tuple__375);
  PyList_SET_ITEM(__pyx_t_1, 373, __pyx_tuple__375);
  __Pyx_INCREF(__pyx_tuple__376);
  __Pyx_GIVEREF(__pyx_tuple__376);
  PyList_SET_ITEM(__pyx_t_1, 374, __pyx_tuple__376);
  __Pyx_INCREF(__pyx_tuple__377);
  __Pyx_GIVEREF(__pyx_tuple__377);
  PyList_SET_ITEM(__pyx_t_1, 375, __pyx_tuple__377);
  __Pyx_INCREF(__pyx_tuple__378);
  __Pyx_GIVEREF(__pyx_tuple__378);
  PyList_SET_ITEM(__pyx_t_1, 376, __pyx_tuple__378);
  __Pyx_INCREF(__pyx_tuple__379);
  __Pyx_GIVEREF(__pyx_tuple__379);
  PyList_SET_ITEM(__pyx_t_1, 377, __pyx_tuple__379);
  __Pyx_INCREF(__pyx_tuple__380);
  __Pyx_GIVEREF(__pyx_tuple__380);
  PyList_SET_ITEM(__pyx_t_1, 378, __pyx_tuple__380);
  __Pyx_INCREF(__pyx_tuple__381);
  __Pyx_GIVEREF(__pyx_tuple__381);
  PyList_SET_ITEM(__pyx_t_1, 379, __pyx_tuple__381);
  __Pyx_INCREF(__pyx_tuple__382);
  __Pyx_GIVEREF(__pyx_tuple__382);
  PyList_SET_ITEM(__pyx_t_1, 380, __pyx_tuple__382);
  __Pyx_INCREF(__pyx_tuple__383);
  __Pyx_GIVEREF(__pyx_tuple__383);
  PyList_SET_ITEM(__pyx_t_1, 381, __pyx_tuple__383);
  __Pyx_INCREF(__pyx_tuple__384);
  __Pyx_GIVEREF(__pyx_tuple__384);
  PyList_SET_ITEM(__pyx_t_1, 382, __pyx_tuple__384);
  __Pyx_INCREF(__pyx_tuple__385);
  __Pyx_GIVEREF(__pyx_tuple__385);
  PyList_SET_ITEM(__pyx_t_1, 383, __pyx_tuple__385);
  __Pyx_INCREF(__pyx_tuple__386);
  __Pyx_GIVEREF(__pyx_tuple__386);
  PyList_SET_ITEM(__pyx_t_1, 384, __pyx_tuple__386);
  __Pyx_INCREF(__pyx_tuple__387);
  __Pyx_GIVEREF(__pyx_tuple__387);
  PyList_SET_ITEM(__pyx_t_1, 385, __pyx_tuple__387);
  __Pyx_INCREF(__pyx_tuple__388);
  __Pyx_GIVEREF(__pyx_tuple__388);
  PyList_SET_ITEM(__pyx_t_1, 386, __pyx_tuple__388);
  __Pyx_INCREF(__pyx_tuple__389);
  __Pyx_GIVEREF(__pyx_tuple__389);
  PyList_SET_ITEM(__pyx_t_1, 387, __pyx_tuple__389);
  __Pyx_INCREF(__pyx_tuple__390);
  __Pyx_GIVEREF(__pyx_tuple__390);
  PyList_SET_ITEM(__pyx_t_1, 388, __pyx_tuple__390);
  __Pyx_INCREF(__pyx_tuple__391);
  __Pyx_GIVEREF(__pyx_tuple__391);
  PyList_SET_ITEM(__pyx_t_1, 389, __pyx_tuple__391);
  __Pyx_INCREF(__pyx_tuple__392);
  __Pyx_GIVEREF(__pyx_tuple__392);
  PyList_SET_ITEM(__pyx_t_1, 390, __pyx_tuple__392);
  __Pyx_INCREF(__pyx_tuple__393);
  __Pyx_GIVEREF(__pyx_tuple__393);
  PyList_SET_ITEM(__pyx_t_1, 391, __pyx_tuple__393);
  __Pyx_INCREF(__pyx_tuple__394);
  __Pyx_GIVEREF(__pyx_tuple__394);
  PyList_SET_ITEM(__pyx_t_1, 392, __pyx_tuple__394);
  __Pyx_INCREF(__pyx_tuple__395);
  __Pyx_GIVEREF(__pyx_tuple__395);
  PyList_SET_ITEM(__pyx_t_1, 393, __pyx_tuple__395);
  __Pyx_INCREF(__pyx_tuple__396);
  __Pyx_GIVEREF(__pyx_tuple__396);
  PyList_SET_ITEM(__pyx_t_1, 394, __pyx_tuple__396);
  __Pyx_INCREF(__pyx_tuple__397);
  __Pyx_GIVEREF(__pyx_tuple__397);
  PyList_SET_ITEM(__pyx_t_1, 395, __pyx_tuple__397);
  __Pyx_INCREF(__pyx_tuple__398);
  __Pyx_GIVEREF(__pyx_tuple__398);
  PyList_SET_ITEM(__pyx_t_1, 396, __pyx_tuple__398);
  __Pyx_INCREF(__pyx_tuple__399);
  __Pyx_GIVEREF(__pyx_tuple__399);
  PyList_SET_ITEM(__pyx_t_1, 397, __pyx_tuple__399);
  __Pyx_INCREF(__pyx_tuple__400);
  __Pyx_GIVEREF(__pyx_tuple__400);
  PyList_SET_ITEM(__pyx_t_1, 398, __pyx_tuple__400);
  __Pyx_INCREF(__pyx_tuple__401);
  __Pyx_GIVEREF(__pyx_tuple__401);
  PyList_SET_ITEM(__pyx_t_1, 399, __pyx_tuple__401);
  __Pyx_INCREF(__pyx_tuple__402);
  __Pyx_GIVEREF(__pyx_tuple__402);
  PyList_SET_ITEM(__pyx_t_1, 400, __pyx_tuple__402);
  __Pyx_INCREF(__pyx_tuple__403);
  __Pyx_GIVEREF(__pyx_tuple__403);
  PyList_SET_ITEM(__pyx_t_1, 401, __pyx_tuple__403);
  __Pyx_INCREF(__pyx_tuple__404);
  __Pyx_GIVEREF(__pyx_tuple__404);
  PyList_SET_ITEM(__pyx_t_1, 402, __pyx_tuple__404);
  __Pyx_INCREF(__pyx_tuple__405);
  __Pyx_GIVEREF(__pyx_tuple__405);
  PyList_SET_ITEM(__pyx_t_1, 403, __pyx_tuple__405);
  __Pyx_INCREF(__pyx_tuple__406);
  __Pyx_GIVEREF(__pyx_tuple__406);
  PyList_SET_ITEM(__pyx_t_1, 404, __pyx_tuple__406);
  __Pyx_INCREF(__pyx_tuple__407);
  __Pyx_GIVEREF(__pyx_tuple__407);
  PyList_SET_ITEM(__pyx_t_1, 405, __pyx_tuple__407);
  __Pyx_INCREF(__pyx_tuple__408);
  __Pyx_GIVEREF(__pyx_tuple__408);
  PyList_SET_ITEM(__pyx_t_1, 406, __pyx_tuple__408);
  __Pyx_INCREF(__pyx_tuple__409);
  __Pyx_GIVEREF(__pyx_tuple__409);
  PyList_SET_ITEM(__pyx_t_1, 407, __pyx_tuple__409);
  __Pyx_INCREF(__pyx_tuple__410);
  __Pyx_GIVEREF(__pyx_tuple__410);
  PyList_SET_ITEM(__pyx_t_1, 408, __pyx_tuple__410);
  __Pyx_INCREF(__pyx_tuple__411);
  __Pyx_GIVEREF(__pyx_tuple__411);
  PyList_SET_ITEM(__pyx_t_1, 409, __pyx_tuple__411);
  __Pyx_INCREF(__pyx_tuple__412);
  __Pyx_GIVEREF(__pyx_tuple__412);
  PyList_SET_ITEM(__pyx_t_1, 410, __pyx_tuple__412);
  __Pyx_INCREF(__pyx_tuple__413);
  __Pyx_GIVEREF(__pyx_tuple__413);
  PyList_SET_ITEM(__pyx_t_1, 411, __pyx_tuple__413);
  __Pyx_INCREF(__pyx_tuple__414);
  __Pyx_GIVEREF(__pyx_tuple__414);
  PyList_SET_ITEM(__pyx_t_1, 412, __pyx_tuple__414);
  __Pyx_INCREF(__pyx_tuple__415);
  __Pyx_GIVEREF(__pyx_tuple__415);
  PyList_SET_ITEM(__pyx_t_1, 413, __pyx_tuple__415);
  __Pyx_INCREF(__pyx_tuple__416);
  __Pyx_GIVEREF(__pyx_tuple__416);
  PyList_SET_ITEM(__pyx_t_1, 414, __pyx_tuple__416);
  __Pyx_INCREF(__pyx_tuple__417);
  __Pyx_GIVEREF(__pyx_tuple__417);
  PyList_SET_ITEM(__pyx_t_1, 415, __pyx_tuple__417);
  __Pyx_INCREF(__pyx_tuple__418);
  __Pyx_GIVEREF(__pyx_tuple__418);
  PyList_SET_ITEM(__pyx_t_1, 416, __pyx_tuple__418);
  __Pyx_INCREF(__pyx_tuple__419);
  __Pyx_GIVEREF(__pyx_tuple__419);
  PyList_SET_ITEM(__pyx_t_1, 417, __pyx_tuple__419);
  __Pyx_INCREF(__pyx_tuple__420);
  __Pyx_GIVEREF(__pyx_tuple__420);
  PyList_SET_ITEM(__pyx_t_1, 418, __pyx_tuple__420);
  __Pyx_INCREF(__pyx_tuple__421);
  __Pyx_GIVEREF(__pyx_tuple__421);
  PyList_SET_ITEM(__pyx_t_1, 419, __pyx_tuple__421);
  __Pyx_INCREF(__pyx_tuple__422);
  __Pyx_GIVEREF(__pyx_tuple__422);
  PyList_SET_ITEM(__pyx_t_1, 420, __pyx_tuple__422);
  __Pyx_INCREF(__pyx_tuple__423);
  __Pyx_GIVEREF(__pyx_tuple__423);
  PyList_SET_ITEM(__pyx_t_1, 421, __pyx_tuple__423);
  __Pyx_INCREF(__pyx_tuple__424);
  __Pyx_GIVEREF(__pyx_tuple__424);
  PyList_SET_ITEM(__pyx_t_1, 422, __pyx_tuple__424);
  __Pyx_INCREF(__pyx_tuple__425);
  __Pyx_GIVEREF(__pyx_tuple__425);
  PyList_SET_ITEM(__pyx_t_1, 423, __pyx_tuple__425);
  __Pyx_INCREF(__pyx_tuple__426);
  __Pyx_GIVEREF(__pyx_tuple__426);
  PyList_SET_ITEM(__pyx_t_1, 424, __pyx_tuple__426);
  __Pyx_INCREF(__pyx_tuple__427);
  __Pyx_GIVEREF(__pyx_tuple__427);
  PyList_SET_ITEM(__pyx_t_1, 425, __pyx_tuple__427);
  __Pyx_INCREF(__pyx_tuple__428);
  __Pyx_GIVEREF(__pyx_tuple__428);
  PyList_SET_ITEM(__pyx_t_1, 426, __pyx_tuple__428);
  __Pyx_INCREF(__pyx_tuple__429);
  __Pyx_GIVEREF(__pyx_tuple__429);
  PyList_SET_ITEM(__pyx_t_1, 427, __pyx_tuple__429);
  __Pyx_INCREF(__pyx_tuple__430);
  __Pyx_GIVEREF(__pyx_tuple__430);
  PyList_SET_ITEM(__pyx_t_1, 428, __pyx_tuple__430);
  __Pyx_INCREF(__pyx_tuple__431);
  __Pyx_GIVEREF(__pyx_tuple__431);
  PyList_SET_ITEM(__pyx_t_1, 429, __pyx_tuple__431);
  __Pyx_INCREF(__pyx_tuple__432);
  __Pyx_GIVEREF(__pyx_tuple__432);
  PyList_SET_ITEM(__pyx_t_1, 430, __pyx_tuple__432);
  __Pyx_INCREF(__pyx_tuple__433);
  __Pyx_GIVEREF(__pyx_tuple__433);
  PyList_SET_ITEM(__pyx_t_1, 431, __pyx_tuple__433);
  __Pyx_INCREF(__pyx_tuple__434);
  __Pyx_GIVEREF(__pyx_tuple__434);
  PyList_SET_ITEM(__pyx_t_1, 432, __pyx_tuple__434);
  __Pyx_INCREF(__pyx_tuple__435);
  __Pyx_GIVEREF(__pyx_tuple__435);
  PyList_SET_ITEM(__pyx_t_1, 433, __pyx_tuple__435);
  __Pyx_INCREF(__pyx_tuple__436);
  __Pyx_GIVEREF(__pyx_tuple__436);
  PyList_SET_ITEM(__pyx_t_1, 434, __pyx_tuple__436);
  __Pyx_INCREF(__pyx_tuple__437);
  __Pyx_GIVEREF(__pyx_tuple__437);
  PyList_SET_ITEM(__pyx_t_1, 435, __pyx_tuple__437);
  __Pyx_INCREF(__pyx_tuple__438);
  __Pyx_GIVEREF(__pyx_tuple__438);
  PyList_SET_ITEM(__pyx_t_1, 436, __pyx_tuple__438);
  __Pyx_INCREF(__pyx_tuple__439);
  __Pyx_GIVEREF(__pyx_tuple__439);
  PyList_SET_ITEM(__pyx_t_1, 437, __pyx_tuple__439);
  __Pyx_INCREF(__pyx_tuple__440);
  __Pyx_GIVEREF(__pyx_tuple__440);
  PyList_SET_ITEM(__pyx_t_1, 438, __pyx_tuple__440);
  __Pyx_INCREF(__pyx_tuple__441);
  __Pyx_GIVEREF(__pyx_tuple__441);
  PyList_SET_ITEM(__pyx_t_1, 439, __pyx_tuple__441);
  __Pyx_INCREF(__pyx_tuple__442);
  __Pyx_GIVEREF(__pyx_tuple__442);
  PyList_SET_ITEM(__pyx_t_1, 440, __pyx_tuple__442);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DIAMINO_LETTERS, __pyx_t_1) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_ORFscores.pyx":23
 *     (b'K', b'R'),(b'K', b'S'),(b'K', b'T'),(b'K', b'V'),(b'K', b'W'),(b'K', b'Y'),(b'K', b'*'),(b'L', b'A'),(b'L', b'C'),(b'L', b'D'),(b'L', b'E'),(b'L', b'F'),(b'L', b'G'),(b'L', b'H'),(b'L', b'I'),(b'L', b'K'),(b'L', b'L'),(b'L', b'M'),(b'L', b'N'),(b'L', b'P'),(b'L', b'Q'),(b'L', b'R'),(b'L', b'S'),(b'L', b'T'),(b'L', b'V'),(b'L', b'W'),(b'L', b'Y'),(b'L', b'*'),(b'M', b'A'),(b'M', b'C'),(b'M', b'D'),(b'M', b'E'),(b'M', b'F'),(b'M', b'G'),(b'M', b'H'),(b'M', b'I'),(b'M', b'K'),(b'M', b'L'),(b'M', b'M'),(b'M', b'N'),(b'M', b'P'),(b'M', b'Q'),(b'M', b'R'),(b'M', b'S'),(b'M', b'T'),(b'M', b'V'),(b'M', b'W'),(b'M', b'Y'),(b'M', b'*'),(b'N', b'A'),(b'N', b'C'),(b'N', b'D'),(b'N', b'E'),(b'N', b'F'),(b'N', b'G'),(b'N', b'H'),(b'N', b'I'),(b'N', b'K'),(b'N', b'L'),(b'N', b'M'),(b'N', b'N'),(b'N', b'P'),(b'N', b'Q'),(b'N', b'R'),(b'N', b'S'),(b'N', b'T'),(b'N', b'V'),(b'N', b'W'),(b'N', b'Y'),(b'N', b'*'),(b'P', b'A'),(b'P', b'C'),(b'P', b'D'),(b'P', b'E'),(b'P', b'F'),(b'P', b'G'),(b'P', b'H'),(b'P', b'I'),(b'P', b'K'),(b'P', b'L'),(b'P', b'M'),(b'P', b'N'),(b'P', b'P'),(b'P', b'Q'),(b'P', b'R'),(b'P', b'S'),(b'P', b'T'),(b'P', b'V'),(b'P', b'W'),(b'P', b'Y'),(b'P', b'*'),(b'Q', b'A'),(b'Q', b'C'),(b'Q', b'D'),(b'Q', b'E'),(b'Q', b'F'),(b'Q', b'G'),(b'Q', b'H'),(b'Q', b'I'),(b'Q', b'K'),(b'Q', b'L'),(b'Q', b'M'),(b'Q', b'N'),(b'Q', b'P'),(b'Q', b'Q'),(b'Q', b'R'),(b'Q', b'S'),(b'Q', b'T'),(b'Q', b'V'),(b'Q', b'W'),(b'Q', b'Y'),(b'Q', b'*'),(b'R', b'A'),(b'R', b'C'),(b'R', b'D'),(b'R', b'E'),(b'R', b'F'),(b'R', b'G'),(b'R', b'H'),(b'R', b'I'),(b'R', b'K'),(b'R', b'L'),(b'R', b'M'),(b'R', b'N'),(b'R', b'P'),(b'R', b'Q'),(b'R', b'R'),(b'R', b'S'),(b'R', b'T'),(b'R', b'V'),(b'R', b'W'),(b'R', b'Y'),(b'R', b'*'),(b'S', b'A'),(b'S', b'C'),(b'S', b'D'),(b'S', b'E'),(b'S', b'F'),(b'S', b'G'),(b'S', b'H'),(b'S', b'I'),(b'S', b'K'),(b'S', b'L'),(b'S', b'M'),(b'S', b'N'),(b'S', b'P'),(b'S', b'Q'),(b'S', b'R'),(b'S', b'S'),(b'S', b'T'),(b'S', b'V'),(b'S', b'W'),(b'S', b'Y'),(b'S', b'*'),(b'T', b'A'),(b'T', b'C'),(b'T', b'D'),(b'T', b'E'),(b'T', b'F'),(b'T', b'G'),(b'T', b'H'),(b'T', b'I'),(b'T', b'K'),(b'T', b'L'),(b'T', b'M'),(b'T', b'N'),(b'T', b'P'),(b'T', b'Q'),(b'T', b'R'),(b'T', b'S'),(b'T', b'T'),(b'T', b'V'),(b'T', b'W'),(b'T', b'Y'),(b'T', b'*'),(b'V', b'A'),(b'V', b'C'),(b'V', b'D'),(b'V', b'E'),(b'V', b'F'),(b'V', b'G'),(b'V', b'H'),(b'V', b'I'),(b'V', b'K'),(b'V', b'L'),(b'V', b'M'),(b'V', b'N'),(b'V', b'P'),(b'V', b'Q'),(b'V', b'R'),(b'V', b'S'),(b'V', b'T'),(b'V', b'V'),(b'V', b'W'),(b'V', b'Y'),(b'V', b'*'),(b'W', b'A'),(b'W', b'C'),(b'W', b'D'),(b'W', b'E'),(b'W', b'F'),(b'W', b'G'),(b'W', b'H'),(b'W', b'I'),(b'W', b'K'),(b'W', b'L'),(b'W', b'M'),(b'W', b'N'),(b'W', b'P'),(b'W', b'Q'),(b'W', b'R'),(b'W', b'S'),(b'W', b'T'),(b'W', b'V'),(b'W', b'W'),(b'W', b'Y'),(b'W', b'*'),(b'Y', b'A'),(b'Y', b'C'),(b'Y', b'D'),(b'Y', b'E'),(b'Y', b'F'),(b'Y', b'G'),(b'Y', b'H'),(b'Y', b'I'),(b'Y', b'K'),(b'Y', b'L'),(b'Y', b'M'),(b'Y', b'N'),(b'Y', b'P'),(b'Y', b'Q'),(b'Y', b'R'),(b'Y', b'S'),(b'Y', b'T'),(b'Y', b'V'),(b'Y', b'W'),(b'Y', b'Y'),(b'Y', b'*'),(b'*', b'A'),(b'*', b'C'),(b'*', b'D'),(b'*', b'E'),(b'*', b'F'),(b'*', b'G'),(b'*', b'H'),(b'*', b'I'),(b'*', b'K'),(b'*', b'L'),(b'*', b'M'),(b'*', b'N'),(b'*', b'P'),(b'*', b'Q'),(b'*', b'R'),(b'*', b'S'),(b'*', b'T'),(b'*', b'V'),(b'*', b'W'),(b'*', b'Y'),(b'*', b'*')]
 * 
 * class CDSWindowFeat:             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         """
 */
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_CDSWindowFeat, __pyx_n_s_CDSWindowFeat, (PyObject *) NULL, __pyx_n_s_c_ORFscores, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "c_ORFscores.pyx":24
 * 
 * class CDSWindowFeat:
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Input filename: should be a fasta filename containing just CDS sequences (in-frame)
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11c_ORFscores_13CDSWindowFeat_1__init__, 0, __pyx_n_s_CDSWindowFeat___init, NULL, __pyx_n_s_c_ORFscores, __pyx_d, ((PyObject *)__pyx_codeobj__444)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_init, __pyx_t_2) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_ORFscores.pyx":80
 * 
 * 
 *     def calc_amino_count(self, char* aa_seq, int factor=1):             # <<<<<<<<<<<<<<
 *         cdef bytes x
 *         cdef bytes aa_seq2 = aa_seq
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(((int)1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11c_ORFscores_13CDSWindowFeat_3calc_amino_count, 0, __pyx_n_s_CDSWindowFeat_calc_amino_count, NULL, __pyx_n_s_c_ORFscores, __pyx_d, ((PyObject *)__pyx_codeobj__446)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_calc_amino_count, __pyx_t_2) < 0) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_ORFscores.pyx":87
 *             self.amino_total += 1 * factor
 * 
 *     def calc_codon_count(self, char* nt_seq, int nt_len, int factor=1):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in xrange(0, nt_len-2, 3):
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(((int)1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11c_ORFscores_13CDSWindowFeat_5calc_codon_count, 0, __pyx_n_s_CDSWindowFeat_calc_codon_count, NULL, __pyx_n_s_c_ORFscores, __pyx_d, ((PyObject *)__pyx_codeobj__448)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_calc_codon_count, __pyx_t_2) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_ORFscores.pyx":93
 *             self.codon_total += 1 * factor
 * 
 *     def calc_diamino_count(self, char* aa_seq, int aa_len):             # <<<<<<<<<<<<<<
 *         cdef int i, k
 *         cdef bytes x, y
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11c_ORFscores_13CDSWindowFeat_7calc_diamino_count, 0, __pyx_n_s_CDSWindowFeat_calc_diamino_count, NULL, __pyx_n_s_c_ORFscores, __pyx_d, ((PyObject *)__pyx_codeobj__450)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_calc_diamino_count, __pyx_t_2) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_ORFscores.pyx":104
 *                     self.diamino_total[k] += 1
 * 
 *     def deduct_diamino_count(self, char* aa_seq, int aa_len, int i_range):             # <<<<<<<<<<<<<<
 *         cdef int i, k
 *         cdef bytes x, y
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11c_ORFscores_13CDSWindowFeat_9deduct_diamino_count, 0, __pyx_n_s_CDSWindowFeat_deduct_diamino_cou, NULL, __pyx_n_s_c_ORFscores, __pyx_d, ((PyObject *)__pyx_codeobj__452)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_deduct_diamino_count, __pyx_t_2) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_ORFscores.pyx":116
 *                     self.diamino_changed[(k, x, y)] = 1
 * 
 *     def add_diamino_count(self, char* aa_seq, int aa_len, int i_range):             # <<<<<<<<<<<<<<
 *         cdef int i, k
 *         cdef bytes x, y
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11c_ORFscores_13CDSWindowFeat_11add_diamino_count, 0, __pyx_n_s_CDSWindowFeat_add_diamino_count, NULL, __pyx_n_s_c_ORFscores, __pyx_d, ((PyObject *)__pyx_codeobj__454)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_add_diamino_count, __pyx_t_2) < 0) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_ORFscores.pyx":128
 *                     self.diamino_changed[(k, x, y)] = 1
 * 
 *     def get_amino_freq(self, object pseudo=None, double alpha=0):             # <<<<<<<<<<<<<<
 *         cdef string x
 *         cdef double a, b
 */
  __pyx_t_2 = PyFloat_FromDouble(((double)0.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)Py_None));
  __Pyx_GIVEREF(((PyObject *)Py_None));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_None));
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11c_ORFscores_13CDSWindowFeat_13get_amino_freq, 0, __pyx_n_s_CDSWindowFeat_get_amino_freq, NULL, __pyx_n_s_c_ORFscores, __pyx_d, ((PyObject *)__pyx_codeobj__456)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_get_amino_freq, __pyx_t_2) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_ORFscores.pyx":141
 *         return self.amino_freq
 * 
 *     def get_codon_freq(self, object pseudo=None, double alpha=0):             # <<<<<<<<<<<<<<
 *         cdef string x
 *         cdef double a, b
 */
  __pyx_t_2 = PyFloat_FromDouble(((double)0.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)Py_None));
  __Pyx_GIVEREF(((PyObject *)Py_None));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_None));
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11c_ORFscores_13CDSWindowFeat_15get_codon_freq, 0, __pyx_n_s_CDSWindowFeat_get_codon_freq, NULL, __pyx_n_s_c_ORFscores, __pyx_d, ((PyObject *)__pyx_codeobj__458)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_get_codon_freq, __pyx_t_2) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "c_ORFscores.pyx":155
 *         return self.codon_freq
 * 
 *     def get_diamino_freq(self, object pseudo=None, double alpha=0, bool clear_dict=True):             # <<<<<<<<<<<<<<
 *         cdef int k
 *         cdef double a, b
 */
  __pyx_t_2 = PyFloat_FromDouble(((double)0.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBool_FromLong(((int)1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)Py_None));
  __Pyx_GIVEREF(((PyObject *)Py_None));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_None));
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_CyFunction_NewEx(&__pyx_mdef_11c_ORFscores_13CDSWindowFeat_17get_diamino_freq, 0, __pyx_n_s_CDSWindowFeat_get_diamino_freq, NULL, __pyx_n_s_c_ORFscores, __pyx_d, ((PyObject *)__pyx_codeobj__460)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_get_diamino_freq, __pyx_t_3) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "c_ORFscores.pyx":23
 *     (b'K', b'R'),(b'K', b'S'),(b'K', b'T'),(b'K', b'V'),(b'K', b'W'),(b'K', b'Y'),(b'K', b'*'),(b'L', b'A'),(b'L', b'C'),(b'L', b'D'),(b'L', b'E'),(b'L', b'F'),(b'L', b'G'),(b'L', b'H'),(b'L', b'I'),(b'L', b'K'),(b'L', b'L'),(b'L', b'M'),(b'L', b'N'),(b'L', b'P'),(b'L', b'Q'),(b'L', b'R'),(b'L', b'S'),(b'L', b'T'),(b'L', b'V'),(b'L', b'W'),(b'L', b'Y'),(b'L', b'*'),(b'M', b'A'),(b'M', b'C'),(b'M', b'D'),(b'M', b'E'),(b'M', b'F'),(b'M', b'G'),(b'M', b'H'),(b'M', b'I'),(b'M', b'K'),(b'M', b'L'),(b'M', b'M'),(b'M', b'N'),(b'M', b'P'),(b'M', b'Q'),(b'M', b'R'),(b'M', b'S'),(b'M', b'T'),(b'M', b'V'),(b'M', b'W'),(b'M', b'Y'),(b'M', b'*'),(b'N', b'A'),(b'N', b'C'),(b'N', b'D'),(b'N', b'E'),(b'N', b'F'),(b'N', b'G'),(b'N', b'H'),(b'N', b'I'),(b'N', b'K'),(b'N', b'L'),(b'N', b'M'),(b'N', b'N'),(b'N', b'P'),(b'N', b'Q'),(b'N', b'R'),(b'N', b'S'),(b'N', b'T'),(b'N', b'V'),(b'N', b'W'),(b'N', b'Y'),(b'N', b'*'),(b'P', b'A'),(b'P', b'C'),(b'P', b'D'),(b'P', b'E'),(b'P', b'F'),(b'P', b'G'),(b'P', b'H'),(b'P', b'I'),(b'P', b'K'),(b'P', b'L'),(b'P', b'M'),(b'P', b'N'),(b'P', b'P'),(b'P', b'Q'),(b'P', b'R'),(b'P', b'S'),(b'P', b'T'),(b'P', b'V'),(b'P', b'W'),(b'P', b'Y'),(b'P', b'*'),(b'Q', b'A'),(b'Q', b'C'),(b'Q', b'D'),(b'Q', b'E'),(b'Q', b'F'),(b'Q', b'G'),(b'Q', b'H'),(b'Q', b'I'),(b'Q', b'K'),(b'Q', b'L'),(b'Q', b'M'),(b'Q', b'N'),(b'Q', b'P'),(b'Q', b'Q'),(b'Q', b'R'),(b'Q', b'S'),(b'Q', b'T'),(b'Q', b'V'),(b'Q', b'W'),(b'Q', b'Y'),(b'Q', b'*'),(b'R', b'A'),(b'R', b'C'),(b'R', b'D'),(b'R', b'E'),(b'R', b'F'),(b'R', b'G'),(b'R', b'H'),(b'R', b'I'),(b'R', b'K'),(b'R', b'L'),(b'R', b'M'),(b'R', b'N'),(b'R', b'P'),(b'R', b'Q'),(b'R', b'R'),(b'R', b'S'),(b'R', b'T'),(b'R', b'V'),(b'R', b'W'),(b'R', b'Y'),(b'R', b'*'),(b'S', b'A'),(b'S', b'C'),(b'S', b'D'),(b'S', b'E'),(b'S', b'F'),(b'S', b'G'),(b'S', b'H'),(b'S', b'I'),(b'S', b'K'),(b'S', b'L'),(b'S', b'M'),(b'S', b'N'),(b'S', b'P'),(b'S', b'Q'),(b'S', b'R'),(b'S', b'S'),(b'S', b'T'),(b'S', b'V'),(b'S', b'W'),(b'S', b'Y'),(b'S', b'*'),(b'T', b'A'),(b'T', b'C'),(b'T', b'D'),(b'T', b'E'),(b'T', b'F'),(b'T', b'G'),(b'T', b'H'),(b'T', b'I'),(b'T', b'K'),(b'T', b'L'),(b'T', b'M'),(b'T', b'N'),(b'T', b'P'),(b'T', b'Q'),(b'T', b'R'),(b'T', b'S'),(b'T', b'T'),(b'T', b'V'),(b'T', b'W'),(b'T', b'Y'),(b'T', b'*'),(b'V', b'A'),(b'V', b'C'),(b'V', b'D'),(b'V', b'E'),(b'V', b'F'),(b'V', b'G'),(b'V', b'H'),(b'V', b'I'),(b'V', b'K'),(b'V', b'L'),(b'V', b'M'),(b'V', b'N'),(b'V', b'P'),(b'V', b'Q'),(b'V', b'R'),(b'V', b'S'),(b'V', b'T'),(b'V', b'V'),(b'V', b'W'),(b'V', b'Y'),(b'V', b'*'),(b'W', b'A'),(b'W', b'C'),(b'W', b'D'),(b'W', b'E'),(b'W', b'F'),(b'W', b'G'),(b'W', b'H'),(b'W', b'I'),(b'W', b'K'),(b'W', b'L'),(b'W', b'M'),(b'W', b'N'),(b'W', b'P'),(b'W', b'Q'),(b'W', b'R'),(b'W', b'S'),(b'W', b'T'),(b'W', b'V'),(b'W', b'W'),(b'W', b'Y'),(b'W', b'*'),(b'Y', b'A'),(b'Y', b'C'),(b'Y', b'D'),(b'Y', b'E'),(b'Y', b'F'),(b'Y', b'G'),(b'Y', b'H'),(b'Y', b'I'),(b'Y', b'K'),(b'Y', b'L'),(b'Y', b'M'),(b'Y', b'N'),(b'Y', b'P'),(b'Y', b'Q'),(b'Y', b'R'),(b'Y', b'S'),(b'Y', b'T'),(b'Y', b'V'),(b'Y', b'W'),(b'Y', b'Y'),(b'Y', b'*'),(b'*', b'A'),(b'*', b'C'),(b'*', b'D'),(b'*', b'E'),(b'*', b'F'),(b'*', b'G'),(b'*', b'H'),(b'*', b'I'),(b'*', b'K'),(b'*', b'L'),(b'*', b'M'),(b'*', b'N'),(b'*', b'P'),(b'*', b'Q'),(b'*', b'R'),(b'*', b'S'),(b'*', b'T'),(b'*', b'V'),(b'*', b'W'),(b'*', b'Y'),(b'*', b'*')]
 * 
 * class CDSWindowFeat:             # <<<<<<<<<<<<<<
 *     def __init__(self):
 *         """
 */
  __pyx_t_3 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_CDSWindowFeat, __pyx_empty_tuple, __pyx_t_1, NULL, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CDSWindowFeat, __pyx_t_3) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "c_ORFscores.pyx":1
 * #cython: language_level=3             # <<<<<<<<<<<<<<
 * __author__ = 'etseng@pacificbiosciences.com'
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init c_ORFscores", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init c_ORFscores");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
